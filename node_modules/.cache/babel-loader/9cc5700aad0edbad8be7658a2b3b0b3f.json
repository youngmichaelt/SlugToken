{"ast":null,"code":"var _jsxFileName = \"/Users/michaelyoung/repos/slugsite/src/Wallet.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers'; // import styles from './Wallet.module.css'\n// import simple_token_abi from './Contracts/simple_token_abi.json'\n// import Interactions from './Interactions';\n\nimport token_abi from '../contracts/abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Wallet = () => {\n  _s();\n\n  const contractAddress = \"0xEC716F18179974bb89062287747651085e122D1C\";\n  const [tokenName, setTokenName] = useState(\"Token\");\n  const [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log(\"Please install metamask\");\n      setErrorMessage(\"Please install metamask\");\n    }\n  };\n\n  const accountChangedHandler = newAddress => {\n    setDefaultAccount(newAddress);\n    updateEthers();\n  };\n\n  const updateEthers = () => {\n    let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n    let tempSigner = tempProvider.getSigner();\n    let tempContract = new ethers.Contract(contractAddress, token_abi, tempSigner);\n    setProvider(tempProvider);\n    setSigner(tempSigner);\n    setContract(tempContract);\n  };\n\n  useEffect(() => {\n    if (contract != null) {\n      updateBalance();\n      updateTokenName();\n    }\n  }, [contract]);\n\n  const updateBalance = async () => {\n    let balanceBigN = await contract.balanceOf(defaultAccount);\n    let balanceNumber = balanceBigN.toNumber();\n    let tokenDecimals = await contract.decimals();\n    let tokenBalance = balanceNumber / Math.pow(10, tokenDecimals);\n    setBalance(toFixed(tokenBalance));\n  };\n\n  function toFixed(x) {\n    if (Math.abs(x) < 1.0) {\n      var e = parseInt(x.toString().split('e-')[1]);\n\n      if (e) {\n        x *= Math.pow(10, e - 1);\n        x = '0.' + new Array(e).join('0') + x.toString().substring(2);\n      }\n    } else {\n      var e = parseInt(x.toString().split('+')[1]);\n\n      if (e > 20) {\n        e -= 20;\n        x /= Math.pow(10, e);\n        x += new Array(e + 1).join('0');\n      }\n    }\n\n    return x;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      children: \"connButtonText\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Address: \", defaultAccount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [tokenName, \" Balance: \", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Wallet, \"BhInPNKnazv64igjncIfi+ghIko=\");\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["/Users/michaelyoung/repos/slugsite/src/Wallet.js"],"names":["React","useState","useEffect","ethers","token_abi","Wallet","contractAddress","tokenName","setTokenName","connButtonText","setConnButtonText","defaultAccount","setDefaultAccount","errorMessage","setErrorMessage","balance","setBalance","provider","setProvider","signer","setSigner","contract","setContract","connectWalletHandler","window","ethereum","isMetaMask","request","method","then","result","accountChangedHandler","catch","error","message","console","log","newAddress","updateEthers","tempProvider","providers","Web3Provider","tempSigner","getSigner","tempContract","Contract","updateBalance","updateTokenName","balanceBigN","balanceOf","balanceNumber","toNumber","tokenDecimals","decimals","tokenBalance","Math","pow","toFixed","x","abs","e","parseInt","toString","split","Array","join","substring"],"mappings":"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","sourcesContent":["\nimport {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\n// import styles from './Wallet.module.css'\n// import simple_token_abi from './Contracts/simple_token_abi.json'\n// import Interactions from './Interactions';\nimport token_abi from '../contracts/abi.json'\n\nconst Wallet = () => {\n\n    const contractAddress = \"0xEC716F18179974bb89062287747651085e122D1C\";\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n    const [defaultAccount, setDefaultAccount] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [balance, setBalance] = useState(null);\n\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n    \n\n    const connectWalletHandler = () => {\n        if (window.ethereum && window.ethereum.isMetaMask){\n\n            window.ethereum.request({method: 'eth_requestAccounts'})\n            .then(result => {\n                accountChangedHandler(result[0]);\n                setConnButtonText('Wallet Connected');\n            })\n            .catch(error => {\n                setErrorMessage(error.message);\n            })\n\n        } else {\n            console.log(\"Please install metamask\");\n            setErrorMessage(\"Please install metamask\");\n        }\n    }\n\n    const accountChangedHandler = (newAddress) =>\n    {\n        setDefaultAccount(newAddress);\n        updateEthers();\n    }\n\n    const updateEthers = () => {\n        let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n        let tempSigner = tempProvider.getSigner();\n\n        let tempContract = new ethers.Contract(contractAddress, token_abi, tempSigner);\n\n        setProvider(tempProvider);\n        setSigner(tempSigner);\n        setContract(tempContract);\n    }\n\n    useEffect(() => {\n        if (contract != null){\n            updateBalance();\n            updateTokenName();\n        }\n    }, [contract])\n\n    const updateBalance = async () => {\n        let balanceBigN = await contract.balanceOf(defaultAccount);\n\n        let balanceNumber = balanceBigN.toNumber();\n\n        let tokenDecimals = await contract.decimals();\n\n\t\tlet tokenBalance = balanceNumber / Math.pow(10, tokenDecimals);\n\n        setBalance(toFixed(tokenBalance));\n    }\n\n    function toFixed(x) {\n        if (Math.abs(x) < 1.0) {\n           var e = parseInt(x.toString().split('e-')[1]);\n           if (e) {\n              x *= Math.pow(10, e - 1);\n              x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\n           }\n        } else {\n           var e = parseInt(x.toString().split('+')[1]);\n           if (e > 20) {\n              e -= 20;\n              x /= Math.pow(10, e);\n              x += (new Array(e + 1)).join('0');\n           }\n        }\n        return x;\n     }\n\n    return (\n    <div>\n        <button onClick={connectWalletHandler}>connButtonText</button>\n        <div>\n            <div>\n                <h3>Address: {defaultAccount}</h3>\n            </div>\n            <div>\n                <h3>{tokenName} Balance: {balance}</h3>\n            </div>\n            \n            <p>{errorMessage}</p>\n        </div>\n    </div>\n\n    );\n}\n\nexport default Wallet;"]},"metadata":{},"sourceType":"module"}