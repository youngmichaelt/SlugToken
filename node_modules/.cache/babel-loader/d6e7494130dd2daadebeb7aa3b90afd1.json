{"ast":null,"code":"var _jsxFileName = \"/Users/michaelyoung/repos/slugsite/src/Interactions.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport Wallet from './Wallet.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Interactions = props => {\n  _s();\n\n  const [txnHash, setTxnHash] = useState();\n  const [allowance, setAllowance] = useState();\n  const [selfAllowance, setSelfAllowance] = useState();\n  const [ApproveOrStake, setApproveOrStake] = useState();\n  const [stakeBalance, setStakeBalance] = useState();\n  const [unstakeValue, setUnstakeValue] = useState();\n  const [txnPending, setTxnPending] = useState();\n  let contract = props.contract.contract;\n  let defaultAccount = props.contract.defaultAccount;\n  let provider = props.contract.provider;\n\n  const approveOrStake = async () => {\n    let contractAddress = await contract.address;\n    let allowance = await contract.allowance(defaultAccount, contractAddress);\n    let allowanceBalance = allowance * Math.pow(10, 18);\n    setAllowance(allowanceBalance);\n    let selfAllowance = await contract.allowance(defaultAccount, defaultAccount);\n    let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n    setSelfAllowance(selfAllowanceBalance);\n\n    if (allowanceBalance > 0 && selfAllowanceBalance > 0) {\n      setApproveOrStake(\"Stake\");\n    } else {\n      setApproveOrStake(\"Approve\");\n    }\n  };\n\n  const getStakeBalance = async () => {\n    let isStakeHolder = false;\n    let stakeId = 0;\n\n    if (defaultAccount instanceof Array) {\n      [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount[0]);\n    } else {\n      [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n    }\n\n    if (isStakeHolder == true) {\n      let stakeAmountBig = 0;\n\n      if (defaultAccount instanceof Array) {\n        stakeAmountBig = await contract.stakedTokens(defaultAccount[0]);\n      } else {\n        stakeAmountBig = await contract.stakedTokens(defaultAccount);\n      }\n\n      let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18);\n      setStakeBalance(stakeAmount);\n    } else {\n      setStakeBalance(0);\n    }\n  };\n\n  const stakeHandler = async e => {\n    e.preventDefault();\n    let contractAddress = await contract.address; // let allowance = await contract.allowance(defaultAccount, contractAddress);\n    // let allowanceBalance = allowance / Math.pow(10, 18);\n    //let stakeAmount = parseInt(e.target.stakeAmount.value) * Math.pow(10, 18);\n    //let stakeAmountBig = ethers.BigNumber.from(e.target.stakeAmount.value);\n    //let stakeAmount = stakeAmountBig.mul(Math.pow(10, 18));\n\n    let stakeAmount = parseInt(e.target.stakeAmount.value);\n    let stakeAmountBig = ethers.utils.parseUnits(e.target.stakeAmount.value, 18); // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n\n    console.log(allowance, selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)));\n\n    if (parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)) <= allowance && parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)) <= selfAllowance) {\n      let txn = await contract.stakeToken(stakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n      pollTransaction(txn.hash);\n    } else {\n      let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n      let txn = await contract.approve(contractAddress, stakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n      pollTransaction(txn.hash);\n    }\n  };\n\n  const unstakeHandler = async e => {\n    e.preventDefault();\n    let contractAddress = await contract.address;\n    let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n    let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n    if (stakeBalance > unstakeAmount) {\n      let txn = await contract.unstakeToken(unstakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n      pollTransaction(txn.hash);\n    } else {\n      window.alert(\"You cannot unstake more tokens than you have staked...\");\n    }\n  };\n\n  const pollTransaction = async txnHash => {\n    setTxnPending(\"Pending transaction...\");\n    let txn = await provider.getTransactionReceipt(txnHash);\n    let time = 0;\n\n    while (txn == null && time < 30) {\n      await new Promise(r => setTimeout(r, 2000));\n      txn = await provider.getTransactionReceipt(txnHash);\n      time += 1;\n    }\n\n    if (time == 30) {\n      setTxnPending(\"Time out error, check your transaction to make sure it went through\");\n    } else {\n      setTxnPending(\"txn complete\");\n    }\n  };\n\n  useEffect(() => {\n    if (contract != null) {\n      approveOrStake();\n      getStakeBalance();\n      Wallet.updateBalance();\n    } else {\n      setApproveOrStake(\"Approve\");\n    }\n  }, [contract, defaultAccount, txnPending]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: stakeHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Stake tokens \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"stakeAmount\",\n        min: \"0\",\n        step: \"0.001\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: ApproveOrStake\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Staked balance: \", stakeBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: unstakeHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Unstake tokens \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"unstakeAmount\",\n        min: \"0\",\n        step: \"0.001\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Unstake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: txnPending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: txnHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Interactions, \"jwKPfJo8gjxOnhTWG4rfkcGQeEI=\");\n\n_c = Interactions;\nexport default Interactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Interactions\");","map":{"version":3,"sources":["/Users/michaelyoung/repos/slugsite/src/Interactions.js"],"names":["React","useState","useEffect","ethers","Wallet","Interactions","props","txnHash","setTxnHash","allowance","setAllowance","selfAllowance","setSelfAllowance","ApproveOrStake","setApproveOrStake","stakeBalance","setStakeBalance","unstakeValue","setUnstakeValue","txnPending","setTxnPending","contract","defaultAccount","provider","approveOrStake","contractAddress","address","allowanceBalance","Math","pow","selfAllowanceBalance","getStakeBalance","isStakeHolder","stakeId","Array","isStakeholder","stakeAmountBig","stakedTokens","stakeAmount","utils","formatUnits","stakeHandler","e","preventDefault","parseInt","target","value","parseUnits","console","log","txn","stakeToken","hash","pollTransaction","approveSelftxn","approve","unstakeHandler","unstakeAmount","unstakeAmountBig","unstakeToken","window","alert","getTransactionReceipt","time","Promise","r","setTimeout","updateBalance"],"mappings":";;;AAAA,SAAQA,KAAR,EAAeC,QAAf,EAAyBC,SAAzB,QAAyC,OAAzC;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,MAAP,MAAmB,aAAnB;;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA;;AAE5B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,EAAtC;AAEA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,EAA1C;AACA,QAAM,CAACU,aAAD,EAAgBC,gBAAhB,IAAoCX,QAAQ,EAAlD;AACA,QAAM,CAACY,cAAD,EAAiBC,iBAAjB,IAAsCb,QAAQ,EAApD;AACA,QAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,EAAhD;AACA,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,EAAhD;AAEA,QAAM,CAACkB,UAAD,EAAaC,aAAb,IAA8BnB,QAAQ,EAA5C;AAEA,MAAIoB,QAAQ,GAAGf,KAAK,CAACe,QAAN,CAAeA,QAA9B;AACA,MAAIC,cAAc,GAAGhB,KAAK,CAACe,QAAN,CAAeC,cAApC;AACA,MAAIC,QAAQ,GAAGjB,KAAK,CAACe,QAAN,CAAeE,QAA9B;;AAGA,QAAMC,cAAc,GAAG,YAAY;AAC/B,QAAIC,eAAe,GAAG,MAAMJ,QAAQ,CAACK,OAArC;AACA,QAAIjB,SAAS,GAAG,MAAMY,QAAQ,CAACZ,SAAT,CAAmBa,cAAnB,EAAmCG,eAAnC,CAAtB;AAEA,QAAIE,gBAAgB,GAAGlB,SAAS,GAAGmB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb,CAAnC;AACAnB,IAAAA,YAAY,CAACiB,gBAAD,CAAZ;AAEA,QAAIhB,aAAa,GAAG,MAAMU,QAAQ,CAACZ,SAAT,CAAmBa,cAAnB,EAAmCA,cAAnC,CAA1B;AACA,QAAIQ,oBAAoB,GAAGnB,aAAa,GAAGiB,IAAI,CAACC,GAAL,CAAS,EAAT,EAAa,EAAb,CAA3C;AACAjB,IAAAA,gBAAgB,CAACkB,oBAAD,CAAhB;;AAEA,QAAIH,gBAAgB,GAAG,CAAnB,IAAwBG,oBAAoB,GAAG,CAAnD,EAAqD;AACjDhB,MAAAA,iBAAiB,CAAC,OAAD,CAAjB;AACH,KAFD,MAEO;AACHA,MAAAA,iBAAiB,CAAC,SAAD,CAAjB;AACH;AACJ,GAhBD;;AAkBA,QAAMiB,eAAe,GAAG,YAAW;AAC/B,QAAIC,aAAa,GAAG,KAApB;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,QAAIX,cAAc,YAAYY,KAA9B,EAAoC;AAChC,OAACF,aAAD,EAAgBC,OAAhB,IAA2B,MAAMZ,QAAQ,CAACc,aAAT,CAAuBb,cAAc,CAAC,CAAD,CAArC,CAAjC;AACH,KAFD,MAEO;AACH,OAACU,aAAD,EAAgBC,OAAhB,IAA2B,MAAMZ,QAAQ,CAACc,aAAT,CAAuBb,cAAvB,CAAjC;AACH;;AAGD,QAAIU,aAAa,IAAI,IAArB,EAA0B;AACtB,UAAII,cAAc,GAAG,CAArB;;AACA,UAAId,cAAc,YAAYY,KAA9B,EAAoC;AAChCE,QAAAA,cAAc,GAAG,MAAMf,QAAQ,CAACgB,YAAT,CAAsBf,cAAc,CAAC,CAAD,CAApC,CAAvB;AACH,OAFD,MAEO;AACHc,QAAAA,cAAc,GAAG,MAAMf,QAAQ,CAACgB,YAAT,CAAsBf,cAAtB,CAAvB;AACH;;AAED,UAAIgB,WAAW,GAAGnC,MAAM,CAACoC,KAAP,CAAaC,WAAb,CAAyBJ,cAAzB,EAAyC,EAAzC,CAAlB;AACApB,MAAAA,eAAe,CAACsB,WAAD,CAAf;AACH,KAVD,MAUO;AACHtB,MAAAA,eAAe,CAAC,CAAD,CAAf;AACH;AACJ,GAvBD;;AAyBA,QAAMyB,YAAY,GAAG,MAAOC,CAAP,IAAa;AAC9BA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIlB,eAAe,GAAG,MAAMJ,QAAQ,CAACK,OAArC,CAF8B,CAG9B;AACA;AAGA;AACA;AACA;;AACA,QAAIY,WAAW,GAAGM,QAAQ,CAACF,CAAC,CAACG,MAAF,CAASP,WAAT,CAAqBQ,KAAtB,CAA1B;AACA,QAAIV,cAAc,GAAGjC,MAAM,CAACoC,KAAP,CAAaQ,UAAb,CAAwBL,CAAC,CAACG,MAAF,CAASP,WAAT,CAAqBQ,KAA7C,EAAoD,EAApD,CAArB,CAX8B,CAY9B;;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYxC,SAAZ,EAAsBE,aAAtB,EAAqCiC,QAAQ,CAACzC,MAAM,CAACoC,KAAP,CAAaC,WAAb,CAAyBJ,cAAzB,EAAwC,CAAxC,CAAD,CAA7C;;AAEA,QAAIQ,QAAQ,CAACzC,MAAM,CAACoC,KAAP,CAAaC,WAAb,CAAyBJ,cAAzB,EAAwC,CAAxC,CAAD,CAAR,IAAwD3B,SAAxD,IAAqEmC,QAAQ,CAACzC,MAAM,CAACoC,KAAP,CAAaC,WAAb,CAAyBJ,cAAzB,EAAwC,CAAxC,CAAD,CAAR,IAAwDzB,aAAjI,EAA+I;AAE3I,UAAIuC,GAAG,GAAG,MAAM7B,QAAQ,CAAC8B,UAAT,CAAoBf,cAApB,CAAhB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACN1C,MAAAA,UAAU,CAAC,0CAA0C0C,GAAG,CAACE,IAA/C,CAAV;AACMC,MAAAA,eAAe,CAACH,GAAG,CAACE,IAAL,CAAf;AAEH,KAPD,MAOO;AACH,UAAIE,cAAc,GAAG,MAAMjC,QAAQ,CAACkC,OAAT,CAAiBjC,cAAjB,EAAiCc,cAAjC,CAA3B;AACA,UAAIc,GAAG,GAAG,MAAM7B,QAAQ,CAACkC,OAAT,CAAiB9B,eAAjB,EAAkCW,cAAlC,CAAhB;AACAY,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACN1C,MAAAA,UAAU,CAAC,6CAA6C0C,GAAG,CAACE,IAAlD,CAAV;AACMC,MAAAA,eAAe,CAACH,GAAG,CAACE,IAAL,CAAf;AACH;AACJ,GA7BD;;AA+BA,QAAMI,cAAc,GAAG,MAAOd,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AACA,QAAIlB,eAAe,GAAG,MAAMJ,QAAQ,CAACK,OAArC;AACA,QAAI+B,aAAa,GAAGb,QAAQ,CAACF,CAAC,CAACG,MAAF,CAASY,aAAT,CAAuBX,KAAxB,CAA5B;AACA,QAAIY,gBAAgB,GAAGvD,MAAM,CAACoC,KAAP,CAAaQ,UAAb,CAAwBL,CAAC,CAACG,MAAF,CAASY,aAAT,CAAuBX,KAA/C,EAAsD,EAAtD,CAAvB;;AAEA,QAAI/B,YAAY,GAAG0C,aAAnB,EAAiC;AAC7B,UAAIP,GAAG,GAAG,MAAM7B,QAAQ,CAACsC,YAAT,CAAsBD,gBAAtB,CAAhB;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA1C,MAAAA,UAAU,CAAC,4CAA4C0C,GAAG,CAACE,IAAjD,CAAV;AAEAC,MAAAA,eAAe,CAACH,GAAG,CAACE,IAAL,CAAf;AAEH,KAPD,MAOO;AACHQ,MAAAA,MAAM,CAACC,KAAP,CAAa,wDAAb;AACH;AAEJ,GAjBD;;AAmBA,QAAMR,eAAe,GAAG,MAAO9C,OAAP,IAAmB;AACvCa,IAAAA,aAAa,CAAC,wBAAD,CAAb;AACA,QAAI8B,GAAG,GAAG,MAAM3B,QAAQ,CAACuC,qBAAT,CAA+BvD,OAA/B,CAAhB;AACA,QAAIwD,IAAI,GAAG,CAAX;;AAEA,WAAOb,GAAG,IAAI,IAAP,IAAea,IAAI,GAAG,EAA7B,EAAgC;AAC5B,YAAM,IAAIC,OAAJ,CAAYC,CAAC,IAAIC,UAAU,CAACD,CAAD,EAAI,IAAJ,CAA3B,CAAN;AACAf,MAAAA,GAAG,GAAG,MAAM3B,QAAQ,CAACuC,qBAAT,CAA+BvD,OAA/B,CAAZ;AACAwD,MAAAA,IAAI,IAAI,CAAR;AAEH;;AACD,QAAIA,IAAI,IAAI,EAAZ,EAAe;AACX3C,MAAAA,aAAa,CAAC,qEAAD,CAAb;AACH,KAFD,MAEO;AACHA,MAAAA,aAAa,CAAC,cAAD,CAAb;AACH;AAGJ,GAlBD;;AAoBAlB,EAAAA,SAAS,CAAC,MAAK;AACX,QAAImB,QAAQ,IAAI,IAAhB,EAAqB;AAEjBG,MAAAA,cAAc;AACdO,MAAAA,eAAe;AACf3B,MAAAA,MAAM,CAAC+D,aAAP;AACH,KALD,MAKO;AACHrD,MAAAA,iBAAiB,CAAC,SAAD,CAAjB;AACH;AACJ,GATQ,EASP,CAACO,QAAD,EAAWC,cAAX,EAA2BH,UAA3B,CATO,CAAT;AAWA,sBACI;AAAA,4BACI;AAAM,MAAA,QAAQ,EAAEsB,YAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,EAAE,EAAC,aAAxB;AAAsC,QAAA,GAAG,EAAC,GAA1C;AAA8C,QAAA,IAAI,EAAC;AAAnD;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA,kBAAuB5B;AAAvB;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAOI;AAAA,6BACI;AAAA,uCAAqBE,YAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAPJ,eAUI;AAAM,MAAA,QAAQ,EAAEyC,cAAhB;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,EAAE,EAAC,eAAxB;AAAwC,QAAA,GAAG,EAAC,GAA5C;AAAgD,QAAA,IAAI,EAAC;AAArD;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,eAgBI;AAAA,gBACKrC;AADL;AAAA;AAAA;AAAA;AAAA,YAhBJ,eAmBI;AAAA,gBACPZ;AADO;AAAA;AAAA;AAAA;AAAA,YAnBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA4BH,CAzKD;;GAAMF,Y;;KAAAA,Y;AA2KN,eAAeA,YAAf","sourcesContent":["import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport Wallet from './Wallet.js';\n\nconst Interactions = (props) => {\n\n    const [txnHash, setTxnHash] = useState();\n\n    const [allowance, setAllowance] = useState();\n    const [selfAllowance, setSelfAllowance] = useState();\n    const [ApproveOrStake, setApproveOrStake] = useState();\n    const [stakeBalance, setStakeBalance] = useState();\n    const [unstakeValue, setUnstakeValue] = useState();\n\n    const [txnPending, setTxnPending] = useState();\n\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    \n\n    const approveOrStake = async () => {\n        let contractAddress = await contract.address;\n        let allowance = await contract.allowance(defaultAccount, contractAddress);\n\n        let allowanceBalance = allowance * Math.pow(10, 18);\n        setAllowance(allowanceBalance);\n\n        let selfAllowance = await contract.allowance(defaultAccount, defaultAccount);\n        let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n        setSelfAllowance(selfAllowanceBalance);\n\n        if (allowanceBalance > 0 && selfAllowanceBalance > 0){\n            setApproveOrStake(\"Stake\");\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    }\n\n    const getStakeBalance = async () =>{\n        let isStakeHolder = false;\n        let stakeId = 0;\n        if (defaultAccount instanceof Array){\n            [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount[0]);\n        } else {\n            [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n        }\n        \n        \n        if (isStakeHolder == true){\n            let stakeAmountBig = 0;\n            if (defaultAccount instanceof Array){\n                stakeAmountBig = await contract.stakedTokens(defaultAccount[0]);\n            } else {\n                stakeAmountBig = await contract.stakedTokens(defaultAccount);\n            }\n            \n            let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18)\n            setStakeBalance(stakeAmount);\n        } else {\n            setStakeBalance(0);\n        }\n    }\n\n    const stakeHandler = async (e) => {\n        e.preventDefault();\n        let contractAddress = await contract.address;\n        // let allowance = await contract.allowance(defaultAccount, contractAddress);\n        // let allowanceBalance = allowance / Math.pow(10, 18);\n\n\n        //let stakeAmount = parseInt(e.target.stakeAmount.value) * Math.pow(10, 18);\n        //let stakeAmountBig = ethers.BigNumber.from(e.target.stakeAmount.value);\n        //let stakeAmount = stakeAmountBig.mul(Math.pow(10, 18));\n        let stakeAmount = parseInt(e.target.stakeAmount.value);\n        let stakeAmountBig = ethers.utils.parseUnits(e.target.stakeAmount.value, 18);\n        // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n        console.log(allowance,selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig,0)))\n\n        if (parseInt(ethers.utils.formatUnits(stakeAmountBig,0)) <= allowance && parseInt(ethers.utils.formatUnits(stakeAmountBig,0)) <= selfAllowance){\n\n            let txn = await contract.stakeToken(stakeAmountBig);\n            console.log(txn);\n\t\t    setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n            pollTransaction(txn.hash);\n\n        } else {\n            let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n            let txn = await contract.approve(contractAddress, stakeAmountBig);\n            console.log(txn);\n\t\t    setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n            pollTransaction(txn.hash);\n        }\n    }\n\n    const unstakeHandler = async (e) => {\n        e.preventDefault();\n        let contractAddress = await contract.address;\n        let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n        let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n        if (stakeBalance > unstakeAmount){\n            let txn = await contract.unstakeToken(unstakeAmountBig);\n            console.log(txn);\n            setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n\n            pollTransaction(txn.hash);\n            \n        } else {\n            window.alert(\"You cannot unstake more tokens than you have staked...\");\n        }\n        \n    }\n\n    const pollTransaction = async (txnHash) => {\n        setTxnPending(\"Pending transaction...\");\n        let txn = await provider.getTransactionReceipt(txnHash);\n        let time = 0;\n\n        while (txn == null && time < 30){\n            await new Promise(r => setTimeout(r, 2000));\n            txn = await provider.getTransactionReceipt(txnHash);\n            time += 1;\n            \n        }\n        if (time == 30){\n            setTxnPending(\"Time out error, check your transaction to make sure it went through\");\n        } else {\n            setTxnPending(\"txn complete\");\n        }\n\n        \n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            \n            approveOrStake();\n            getStakeBalance();\n            Wallet.updateBalance();\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    },[contract, defaultAccount, txnPending])\n\n    return (\n        <div>\n            <form onSubmit={stakeHandler}>\n                <h3>Stake tokens </h3>\n                <p>Amount</p>\n                <input type='number' id='stakeAmount' min='0' step='0.001'></input>\n                <button type='submit'>{ApproveOrStake}</button>\n            </form>\n            <div>\n                <h3>Staked balance: {stakeBalance}</h3>\n            </div>\n            <form onSubmit={unstakeHandler}>\n                <h3>Unstake tokens </h3>\n                <p>Amount</p>\n                <input type='number' id='unstakeAmount' min='0' step='0.001'></input>\n                <button type='submit'>Unstake</button>\n            </form>\n            <div>\n                {txnPending}\n            </div>\n            <div>\n\t\t\t\t{txnHash}\n\t\t\t</div>\n\n        </div>\n\n    );\n\n}\n\nexport default Interactions;"]},"metadata":{},"sourceType":"module"}