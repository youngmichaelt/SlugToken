{"ast":null,"code":"var _jsxFileName = \"/Users/michaelyoung/repos/slugsite/src/Interactions.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Interactions = props => {\n  _s();\n\n  const [txnHash, setTxnHash] = useState();\n  const [allowance, setAllowance] = useState();\n  const [selfAllowance, setSelfAllowance] = useState();\n  const [ApproveOrStake, setApproveOrStake] = useState();\n  const [stakeBalance, setStakeBalance] = useState();\n  let contract = props.contract.contract;\n  let defaultAccount = props.contract.defaultAccount;\n\n  const approveOrStake = async () => {\n    let contractAddress = await contract.address;\n    let allowance = await contract.allowance(defaultAccount, contractAddress);\n    let allowanceBalance = allowance * Math.pow(10, 18);\n    setAllowance(allowanceBalance);\n    let selfAllowance = await contract.allowance(defaultAccount, defaultAccount);\n    let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n    setSelfAllowance(selfAllowanceBalance);\n\n    if (allowanceBalance > 0 && selfAllowanceBalance > 0) {\n      setApproveOrStake(\"Stake\");\n    } else {\n      setApproveOrStake(\"Approve\");\n    }\n  };\n\n  const getStakeBalance = async () => {\n    let [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n\n    if (isStakeHolder == true) {\n      let stakeAmountBig = await contract.stakedTokens(defaultAccount);\n      let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18);\n      setStakeBalance(stakeAmount);\n    } else {\n      setStakeBalance(0);\n    }\n  };\n\n  const stakeHandler = async e => {\n    e.preventDefault();\n    let contractAddress = await contract.address; // let allowance = await contract.allowance(defaultAccount, contractAddress);\n    // let allowanceBalance = allowance / Math.pow(10, 18);\n    //let stakeAmount = parseInt(e.target.stakeAmount.value) * Math.pow(10, 18);\n    //let stakeAmountBig = ethers.BigNumber.from(e.target.stakeAmount.value);\n    //let stakeAmount = stakeAmountBig.mul(Math.pow(10, 18));\n\n    let stakeAmount = parseInt(e.target.stakeAmount.value);\n    let stakeAmountBig = ethers.utils.parseUnits(e.target.stakeAmount.value, 18); // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n\n    console.log(allowance, selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)));\n\n    if (parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)) <= allowance && parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)) <= selfAllowance) {\n      let txn = await contract.stakeToken(stakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n    } else {\n      let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n      let txn = await contract.approve(contractAddress, stakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n    }\n  };\n\n  const unstakeHandler = async e => {\n    e.preventDefault();\n    let contractAddress = await contract.address;\n    let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n    let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n    if (stakeBalance > unstakeAmount) {\n      let txn = await contract.unstakeToken(unstakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n    } else {\n      window.alert(\"You cannot unstake more tokens than you have staked...\");\n    }\n  };\n\n  useEffect(() => {\n    if (contract != null) {\n      approveOrStake();\n      getStakeBalance();\n    } else {\n      setApproveOrStake(\"Approve\");\n    }\n  }, [contract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: stakeHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Stake tokens \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"stakeAmount\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: ApproveOrStake\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Staked balance: \", stakeBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: unstakeHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Unstake tokens \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"unstakeAmount\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Unstake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: txnHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Interactions, \"Whkefy/qoAmpTgnEDLfTVLKkWD4=\");\n\n_c = Interactions;\nexport default Interactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Interactions\");","map":{"version":3,"sources":["/Users/michaelyoung/repos/slugsite/src/Interactions.js"],"names":["React","useState","useEffect","ethers","Interactions","props","txnHash","setTxnHash","allowance","setAllowance","selfAllowance","setSelfAllowance","ApproveOrStake","setApproveOrStake","stakeBalance","setStakeBalance","contract","defaultAccount","approveOrStake","contractAddress","address","allowanceBalance","Math","pow","selfAllowanceBalance","getStakeBalance","isStakeHolder","stakeId","isStakeholder","stakeAmountBig","stakedTokens","stakeAmount","utils","formatUnits","stakeHandler","e","preventDefault","parseInt","target","value","parseUnits","console","log","txn","stakeToken","hash","approveSelftxn","approve","unstakeHandler","unstakeAmount","unstakeAmountBig","unstakeToken","window","alert"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\n\nconst Interactions = (props) => {\n\n    const [txnHash, setTxnHash] = useState();\n\n    const [allowance, setAllowance] = useState();\n    const [selfAllowance, setSelfAllowance] = useState();\n    const [ApproveOrStake, setApproveOrStake] = useState();\n    const [stakeBalance, setStakeBalance] = useState();\n\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    \n\n    const approveOrStake = async () => {\n        let contractAddress = await contract.address;\n        let allowance = await contract.allowance(defaultAccount, contractAddress);\n\n        let allowanceBalance = allowance * Math.pow(10, 18);\n        setAllowance(allowanceBalance);\n\n        let selfAllowance = await contract.allowance(defaultAccount, defaultAccount);\n        let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n        setSelfAllowance(selfAllowanceBalance);\n\n        if (allowanceBalance > 0 && selfAllowanceBalance > 0){\n            setApproveOrStake(\"Stake\");\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    }\n\n    const getStakeBalance = async () =>{\n        let [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n        \n        if (isStakeHolder == true){\n            let stakeAmountBig = await contract.stakedTokens(defaultAccount);\n            let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18)\n            setStakeBalance(stakeAmount);\n        } else {\n            setStakeBalance(0);\n        }\n    }\n\n    const stakeHandler = async (e) => {\n        e.preventDefault();\n        let contractAddress = await contract.address;\n        // let allowance = await contract.allowance(defaultAccount, contractAddress);\n        // let allowanceBalance = allowance / Math.pow(10, 18);\n\n\n        //let stakeAmount = parseInt(e.target.stakeAmount.value) * Math.pow(10, 18);\n        //let stakeAmountBig = ethers.BigNumber.from(e.target.stakeAmount.value);\n        //let stakeAmount = stakeAmountBig.mul(Math.pow(10, 18));\n        let stakeAmount = parseInt(e.target.stakeAmount.value);\n        let stakeAmountBig = ethers.utils.parseUnits(e.target.stakeAmount.value, 18);\n        // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n        console.log(allowance,selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig,0)))\n\n        if (parseInt(ethers.utils.formatUnits(stakeAmountBig,0)) <= allowance && parseInt(ethers.utils.formatUnits(stakeAmountBig,0)) <= selfAllowance){\n\n            let txn = await contract.stakeToken(stakeAmountBig);\n            console.log(txn);\n\t\t    setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n\n        } else {\n            let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n            let txn = await contract.approve(contractAddress, stakeAmountBig);\n            console.log(txn);\n\t\t    setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n        }\n    }\n\n    const unstakeHandler = async (e) => {\n        e.preventDefault();\n        let contractAddress = await contract.address;\n        let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n        let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n        if (stakeBalance > unstakeAmount){\n            let txn = await contract.unstakeToken(unstakeAmountBig);\n            console.log(txn);\n            setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n        } else {\n            window.alert(\"You cannot unstake more tokens than you have staked...\");\n        }\n        \n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            approveOrStake();\n            getStakeBalance();\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    },[contract])\n\n    return (\n        <div>\n            <form onSubmit={stakeHandler}>\n                <h3>Stake tokens </h3>\n                <p>Amount</p>\n                <input type='number' id='stakeAmount' min='0'></input>\n                <button type='submit'>{ApproveOrStake}</button>\n            </form>\n            <div>\n                <h3>Staked balance: {stakeBalance}</h3>\n            </div>\n            <form onSubmit={unstakeHandler}>\n                <h3>Unstake tokens </h3>\n                <p>Amount</p>\n                <input type='number' id='unstakeAmount' min='0'></input>\n                <button type='submit'>Unstake</button>\n            </form>\n            <div>\n\t\t\t\t{txnHash}\n\t\t\t</div>\n        </div>\n\n    );\n\n}\n\nexport default Interactions;"]},"metadata":{},"sourceType":"module"}