{"ast":null,"code":"\"use strict\"; // This gets overridden by rollup\n\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar exportWordlist = false;\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport var logger = new Logger(version);\nexport var Wordlist = /*#__PURE__*/function () {\n  function Wordlist(locale) {\n    _classCallCheck(this, Wordlist);\n\n    logger.checkAbstract(this instanceof Wordlist ? this.constructor : void 0, Wordlist);\n    defineReadOnly(this, \"locale\", locale);\n  } // Subclasses may override this\n\n\n  _createClass(Wordlist, [{\n    key: \"split\",\n    value: function split(mnemonic) {\n      return mnemonic.toLowerCase().split(/ +/g);\n    } // Subclasses may override this\n\n  }, {\n    key: \"join\",\n    value: function join(words) {\n      return words.join(\" \");\n    }\n  }], [{\n    key: \"check\",\n    value: function check(wordlist) {\n      var words = [];\n\n      for (var i = 0; i < 2048; i++) {\n        var word = wordlist.getWord(i);\n        /* istanbul ignore if */\n\n        if (i !== wordlist.getWordIndex(word)) {\n          return \"0x\";\n        }\n\n        words.push(word);\n      }\n\n      return id(words.join(\"\\n\") + \"\\n\");\n    }\n  }, {\n    key: \"register\",\n    value: function register(lang, name) {\n      if (!name) {\n        name = lang.locale;\n      }\n      /* istanbul ignore if */\n\n\n      if (exportWordlist) {\n        try {\n          var anyGlobal = window;\n\n          if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n            if (!anyGlobal._ethers.wordlists[name]) {\n              defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n            }\n          }\n        } catch (error) {}\n      }\n    }\n  }]);\n\n  return Wordlist;\n}();","map":{"version":3,"mappings":"AAAA,a,CAEA;;;;AACA,IAAMA,cAAc,GAAG,KAAvB;AAEA,SAASC,EAAT,QAAmB,qBAAnB;AACA,SAASC,cAAT,QAA+B,2BAA/B;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAO,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEP,WAAsBE,QAAtB;AAGI,oBAAYC,MAAZ,EAA0B;AAAA;;AACtBF,UAAM,CAACG,aAAP,uDAAiCF,QAAjC;AACAJ,kBAAc,CAAC,IAAD,EAAO,QAAP,EAAiBK,MAAjB,CAAd;AACH,GANL,CAWI;;;AAXJ;AAAA;AAAA,WAYI,eAAME,QAAN,EAAsB;AAClB,aAAOA,QAAQ,CAACC,WAAT,GAAuBC,KAAvB,CAA6B,KAA7B,CAAP;AACH,KAdL,CAgBI;;AAhBJ;AAAA;AAAA,WAiBI,cAAKC,KAAL,EAAyB;AACrB,aAAOA,KAAK,CAACC,IAAN,CAAW,GAAX,CAAP;AACH;AAnBL;AAAA;AAAA,WAqBI,eAAaC,QAAb,EAA+B;AAC3B,UAAMF,KAAK,GAAG,EAAd;;AACA,WAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,IAApB,EAA0BA,CAAC,EAA3B,EAA+B;AAC3B,YAAMC,IAAI,GAAGF,QAAQ,CAACG,OAAT,CAAiBF,CAAjB,CAAb;AACA;;AACA,YAAIA,CAAC,KAAKD,QAAQ,CAACI,YAAT,CAAsBF,IAAtB,CAAV,EAAuC;AAAE,iBAAO,IAAP;AAAc;;AACvDJ,aAAK,CAACO,IAAN,CAAWH,IAAX;AACH;;AACD,aAAOf,EAAE,CAACW,KAAK,CAACC,IAAN,CAAW,IAAX,IAAmB,IAApB,CAAT;AACH;AA9BL;AAAA;AAAA,WAgCI,kBAAgBO,IAAhB,EAAgCC,IAAhC,EAA6C;AACzC,UAAI,CAACA,IAAL,EAAW;AAAEA,YAAI,GAAGD,IAAI,CAACb,MAAZ;AAAqB;AAElC;;;AACA,UAAIP,cAAJ,EAAoB;AAChB,YAAI;AACA,cAAMsB,SAAS,GAAIC,MAAnB;;AACA,cAAID,SAAS,CAACE,OAAV,IAAqBF,SAAS,CAACE,OAAV,CAAkBC,SAA3C,EAAsD;AAClD,gBAAI,CAACH,SAAS,CAACE,OAAV,CAAkBC,SAAlB,CAA4BJ,IAA5B,CAAL,EAAwC;AACnCnB,4BAAc,CAACoB,SAAS,CAACE,OAAV,CAAkBC,SAAnB,EAA8BJ,IAA9B,EAAoCD,IAApC,CAAd;AACJ;AACJ;AACJ,SAPD,CAOE,OAAOM,KAAP,EAAc,CAAG;AACtB;AACJ;AA9CL;;AAAA;AAAA","names":["exportWordlist","id","defineReadOnly","Logger","version","logger","Wordlist","locale","checkAbstract","mnemonic","toLowerCase","split","words","join","wordlist","i","word","getWord","getWordIndex","push","lang","name","anyGlobal","window","_ethers","wordlists","error"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/wordlists/src.ts/wordlist.ts"],"sourcesContent":["\"use strict\";\n\n// This gets overridden by rollup\nconst exportWordlist = false;\n\nimport { id } from \"@ethersproject/hash\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nexport const logger = new Logger(version);\n\nexport abstract class Wordlist {\n    readonly locale: string;\n\n    constructor(locale: string) {\n        logger.checkAbstract(new.target, Wordlist);\n        defineReadOnly(this, \"locale\", locale);\n    }\n\n    abstract getWord(index: number): string;\n    abstract getWordIndex(word: string): number;\n\n    // Subclasses may override this\n    split(mnemonic: string): Array<string> {\n        return mnemonic.toLowerCase().split(/ +/g)\n    }\n\n    // Subclasses may override this\n    join(words: Array<string>): string {\n        return words.join(\" \");\n    }\n\n    static check(wordlist: Wordlist): string {\n        const words = [];\n        for (let i = 0; i < 2048; i++) {\n            const word = wordlist.getWord(i);\n            /* istanbul ignore if */\n            if (i !== wordlist.getWordIndex(word)) { return \"0x\"; }\n            words.push(word);\n        }\n        return id(words.join(\"\\n\") + \"\\n\");\n    }\n\n    static register(lang: Wordlist, name?: string): void {\n        if (!name) { name = lang.locale; }\n\n        /* istanbul ignore if */\n        if (exportWordlist) {\n            try {\n                const anyGlobal = (window as any)\n                if (anyGlobal._ethers && anyGlobal._ethers.wordlists) {\n                    if (!anyGlobal._ethers.wordlists[name]) {\n                         defineReadOnly(anyGlobal._ethers.wordlists, name, lang);\n                    }\n                }\n            } catch (error) { }\n        }\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}