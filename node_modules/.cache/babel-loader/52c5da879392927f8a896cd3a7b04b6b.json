{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar _permanentCensorErrors = false;\nvar _censorErrors = false;\nvar LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nvar _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nvar _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    var missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(function (form) {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nvar _normalizeError = _checkNormalize();\n\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nexport var ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n\n;\nvar HEX = \"0123456789abcdef\";\nexport var Logger = /*#__PURE__*/function () {\n  function Logger(version) {\n    _classCallCheck(this, Logger);\n\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _createClass(Logger, [{\n    key: \"_log\",\n    value: function _log(logLevel, args) {\n      var level = logLevel.toLowerCase();\n\n      if (LogLevels[level] == null) {\n        this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n      }\n\n      if (_logLevel > LogLevels[level]) {\n        return;\n      }\n\n      console.log.apply(console, args);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      this._log(Logger.levels.DEBUG, args);\n    }\n  }, {\n    key: \"info\",\n    value: function info() {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n\n      this._log(Logger.levels.INFO, args);\n    }\n  }, {\n    key: \"warn\",\n    value: function warn() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      this._log(Logger.levels.WARNING, args);\n    }\n  }, {\n    key: \"makeError\",\n    value: function makeError(message, code, params) {\n      // Errors are being censored\n      if (_censorErrors) {\n        return this.makeError(\"censored error\", code, {});\n      }\n\n      if (!code) {\n        code = Logger.errors.UNKNOWN_ERROR;\n      }\n\n      if (!params) {\n        params = {};\n      }\n\n      var messageDetails = [];\n      Object.keys(params).forEach(function (key) {\n        var value = params[key];\n\n        try {\n          if (value instanceof Uint8Array) {\n            var hex = \"\";\n\n            for (var i = 0; i < value.length; i++) {\n              hex += HEX[value[i] >> 4];\n              hex += HEX[value[i] & 0x0f];\n            }\n\n            messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n          } else {\n            messageDetails.push(key + \"=\" + JSON.stringify(value));\n          }\n        } catch (error) {\n          messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n        }\n      });\n      messageDetails.push(\"code=\".concat(code));\n      messageDetails.push(\"version=\".concat(this.version));\n      var reason = message;\n      var url = \"\";\n\n      switch (code) {\n        case ErrorCode.NUMERIC_FAULT:\n          {\n            url = \"NUMERIC_FAULT\";\n            var fault = message;\n\n            switch (fault) {\n              case \"overflow\":\n              case \"underflow\":\n              case \"division-by-zero\":\n                url += \"-\" + fault;\n                break;\n\n              case \"negative-power\":\n              case \"negative-width\":\n                url += \"-unsupported\";\n                break;\n\n              case \"unbound-bitwise-result\":\n                url += \"-unbound-result\";\n                break;\n            }\n\n            break;\n          }\n\n        case ErrorCode.CALL_EXCEPTION:\n        case ErrorCode.INSUFFICIENT_FUNDS:\n        case ErrorCode.MISSING_NEW:\n        case ErrorCode.NONCE_EXPIRED:\n        case ErrorCode.REPLACEMENT_UNDERPRICED:\n        case ErrorCode.TRANSACTION_REPLACED:\n        case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n          url = code;\n          break;\n      }\n\n      if (url) {\n        message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n      }\n\n      if (messageDetails.length) {\n        message += \" (\" + messageDetails.join(\", \") + \")\";\n      } // @TODO: Any??\n\n\n      var error = new Error(message);\n      error.reason = reason;\n      error.code = code;\n      Object.keys(params).forEach(function (key) {\n        error[key] = params[key];\n      });\n      return error;\n    }\n  }, {\n    key: \"throwError\",\n    value: function throwError(message, code, params) {\n      throw this.makeError(message, code, params);\n    }\n  }, {\n    key: \"throwArgumentError\",\n    value: function throwArgumentError(message, name, value) {\n      return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n        argument: name,\n        value: value\n      });\n    }\n  }, {\n    key: \"assert\",\n    value: function assert(condition, message, code, params) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwError(message, code, params);\n    }\n  }, {\n    key: \"assertArgument\",\n    value: function assertArgument(condition, message, name, value) {\n      if (!!condition) {\n        return;\n      }\n\n      this.throwArgumentError(message, name, value);\n    }\n  }, {\n    key: \"checkNormalize\",\n    value: function checkNormalize(message) {\n      if (message == null) {\n        message = \"platform missing String.prototype.normalize\";\n      }\n\n      if (_normalizeError) {\n        this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"String.prototype.normalize\",\n          form: _normalizeError\n        });\n      }\n    }\n  }, {\n    key: \"checkSafeUint53\",\n    value: function checkSafeUint53(value, message) {\n      if (typeof value !== \"number\") {\n        return;\n      }\n\n      if (message == null) {\n        message = \"value not safe\";\n      }\n\n      if (value < 0 || value >= 0x1fffffffffffff) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"out-of-safe-range\",\n          value: value\n        });\n      }\n\n      if (value % 1) {\n        this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n          operation: \"checkSafeInteger\",\n          fault: \"non-integer\",\n          value: value\n        });\n      }\n    }\n  }, {\n    key: \"checkArgumentCount\",\n    value: function checkArgumentCount(count, expectedCount, message) {\n      if (message) {\n        message = \": \" + message;\n      } else {\n        message = \"\";\n      }\n\n      if (count < expectedCount) {\n        this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n\n      if (count > expectedCount) {\n        this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n          count: count,\n          expectedCount: expectedCount\n        });\n      }\n    }\n  }, {\n    key: \"checkNew\",\n    value: function checkNew(target, kind) {\n      if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }, {\n    key: \"checkAbstract\",\n    value: function checkAbstract(target, kind) {\n      if (target === kind) {\n        this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n          name: target.name,\n          operation: \"new\"\n        });\n      } else if (target === Object || target == null) {\n        this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n          name: kind.name\n        });\n      }\n    }\n  }], [{\n    key: \"globalLogger\",\n    value: function globalLogger() {\n      if (!_globalLogger) {\n        _globalLogger = new Logger(version);\n      }\n\n      return _globalLogger;\n    }\n  }, {\n    key: \"setCensorship\",\n    value: function setCensorship(censorship, permanent) {\n      if (!censorship && permanent) {\n        this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      if (_permanentCensorErrors) {\n        if (!censorship) {\n          return;\n        }\n\n        this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"setCensorship\"\n        });\n      }\n\n      _censorErrors = !!censorship;\n      _permanentCensorErrors = !!permanent;\n    }\n  }, {\n    key: \"setLogLevel\",\n    value: function setLogLevel(logLevel) {\n      var level = LogLevels[logLevel.toLowerCase()];\n\n      if (level == null) {\n        Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n        return;\n      }\n\n      _logLevel = level;\n    }\n  }, {\n    key: \"from\",\n    value: function from(version) {\n      return new Logger(version);\n    }\n  }]);\n\n  return Logger;\n}();\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;","map":{"version":3,"mappings":"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","names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","version","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","Object","defineProperty","enumerable","value","writable","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","_log","levels","DEBUG","INFO","WARNING","code","params","makeError","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","i","JSON","stringify","toString","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","name","throwError","INVALID_ARGUMENT","argument","condition","UNSUPPORTED_OPERATION","operation","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","target","kind","censorship","permanent","globalLogger","warn"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/logger/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\n\nconst LogLevels: { [ name: string ]: number } = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\n\nimport { version } from \"./_version\";\n\nlet _globalLogger: Logger = null;\n\nfunction _checkNormalize(): string {\n    try {\n        const missing: Array<string> = [ ];\n\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                };\n            } catch(error) {\n                missing.push(form);\n            }\n        });\n\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\")\n        }\n    } catch (error) {\n        return error.message;\n    }\n\n    return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport enum LogLevel {\n    DEBUG    = \"DEBUG\",\n    INFO     = \"INFO\",\n    WARNING  = \"WARNING\",\n    ERROR    = \"ERROR\",\n    OFF      = \"OFF\"\n}\n\n\nexport enum ErrorCode {\n\n    ///////////////////\n    // Generic Errors\n\n    // Unknown Error\n    UNKNOWN_ERROR = \"UNKNOWN_ERROR\",\n\n    // Not Implemented\n    NOT_IMPLEMENTED = \"NOT_IMPLEMENTED\",\n\n    // Unsupported Operation\n    //   - operation\n    UNSUPPORTED_OPERATION = \"UNSUPPORTED_OPERATION\",\n\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    NETWORK_ERROR = \"NETWORK_ERROR\",\n\n    // Some sort of bad response from the server\n    SERVER_ERROR = \"SERVER_ERROR\",\n\n    // Timeout\n    TIMEOUT = \"TIMEOUT\",\n\n    ///////////////////\n    // Operational  Errors\n\n    // Buffer Overrun\n    BUFFER_OVERRUN = \"BUFFER_OVERRUN\",\n\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    NUMERIC_FAULT = \"NUMERIC_FAULT\",\n\n\n    ///////////////////\n    // Argument Errors\n\n    // Missing new operator to an object\n    //  - name: The name of the class\n    MISSING_NEW = \"MISSING_NEW\",\n\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    INVALID_ARGUMENT = \"INVALID_ARGUMENT\",\n\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    MISSING_ARGUMENT = \"MISSING_ARGUMENT\",\n\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    UNEXPECTED_ARGUMENT = \"UNEXPECTED_ARGUMENT\",\n\n\n    ///////////////////\n    // Blockchain Errors\n\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    CALL_EXCEPTION = \"CALL_EXCEPTION\",\n\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    INSUFFICIENT_FUNDS = \"INSUFFICIENT_FUNDS\",\n\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    NONCE_EXPIRED = \"NONCE_EXPIRED\",\n\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    REPLACEMENT_UNDERPRICED = \"REPLACEMENT_UNDERPRICED\",\n\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    UNPREDICTABLE_GAS_LIMIT = \"UNPREDICTABLE_GAS_LIMIT\",\n\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    TRANSACTION_REPLACED = \"TRANSACTION_REPLACED\",\n};\n\nconst HEX = \"0123456789abcdef\";\n\nexport class Logger {\n    readonly version: string;\n\n    static errors = ErrorCode;\n\n    static levels = LogLevel;\n\n    constructor(version: string) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n\n    _log(logLevel: LogLevel, args: Array<any>): void {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) { return; }\n        console.log.apply(console, args);\n    }\n\n    debug(...args: Array<any>): void {\n        this._log(Logger.levels.DEBUG, args);\n    }\n\n    info(...args: Array<any>): void {\n        this._log(Logger.levels.INFO, args);\n    }\n\n    warn(...args: Array<any>): void {\n        this._log(Logger.levels.WARNING, args);\n    }\n\n    makeError(message: string, code?: ErrorCode, params?: any): Error {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, { });\n        }\n\n        if (!code) { code = Logger.errors.UNKNOWN_ERROR; }\n        if (!params) { params = {}; }\n\n        const messageDetails: Array<string> = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                      hex += HEX[value[i] >> 4];\n                      hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                } else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            } catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${ code }`);\n        messageDetails.push(`version=${ this.version }`);\n\n        const reason = message;\n\n        let url = \"\";\n\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n\n                switch (fault) {\n                    case \"overflow\": case \"underflow\": case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\": case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n\n        // @TODO: Any??\n        const error: any = new Error(message);\n        error.reason = reason;\n        error.code = code\n\n        Object.keys(params).forEach(function(key) {\n            error[key] = params[key];\n        });\n\n        return error;\n    }\n\n    throwError(message: string, code?: ErrorCode, params?: any): never {\n        throw this.makeError(message, code, params);\n    }\n\n    throwArgumentError(message: string, name: string, value: any): never {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n\n    assert(condition: any, message: string, code?: ErrorCode, params?: any): void {\n        if (!!condition) { return; }\n        this.throwError(message, code, params);\n    }\n\n    assertArgument(condition: any, message: string, name: string, value: any): void {\n        if (!!condition) { return; }\n        this.throwArgumentError(message, name, value);\n    }\n\n    checkNormalize(message?: string): void {\n        if (message == null) { message = \"platform missing String.prototype.normalize\"; }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n\n    checkSafeUint53(value: number, message?: string): void {\n        if (typeof(value) !== \"number\") { return; }\n\n        if (message == null) { message = \"value not safe\"; }\n\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n\n    checkArgumentCount(count: number, expectedCount: number, message?: string): void {\n        if (message) {\n            message = \": \" + message;\n        } else {\n            message = \"\";\n        }\n\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n\n    checkNew(target: any, kind: any): void {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    checkAbstract(target: any, kind: any): void {\n        if (target === kind) {\n            this.throwError(\n                \"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { name: target.name, operation: \"new\" }\n            );\n        } else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n\n    static globalLogger(): Logger {\n        if (!_globalLogger) { _globalLogger = new Logger(version); }\n        return _globalLogger;\n    }\n\n    static setCensorship(censorship: boolean, permanent?: boolean): void {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        if (_permanentCensorErrors) {\n            if (!censorship) { return; }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n\n    static setLogLevel(logLevel: LogLevel): void {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n\n    static from(version: string): Logger {\n        return new Logger(version);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}