{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nvar _constructorGuard = {};\nvar Zero = BigNumber.from(0);\nvar NegativeOne = BigNumber.from(-1);\n\nfunction throwFault(message, fault, operation, value) {\n  var params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value !== undefined) {\n    params.value = value;\n  }\n\n  return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n} // Constant to pull zeros from for multipliers\n\n\nvar zeros = \"0\";\n\nwhile (zeros.length < 256) {\n  zeros += zeros;\n} // Returns a string \"1\" followed by decimal \"0\"s\n\n\nfunction getMultiplier(decimals) {\n  if (typeof decimals !== \"number\") {\n    try {\n      decimals = BigNumber.from(decimals).toNumber();\n    } catch (e) {}\n  }\n\n  if (typeof decimals === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n    return \"1\" + zeros.substring(0, decimals);\n  }\n\n  return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nexport function formatFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n\n  var multiplier = getMultiplier(decimals); // Make sure wei is a big number (convert as necessary)\n\n  value = BigNumber.from(value);\n  var negative = value.lt(Zero);\n\n  if (negative) {\n    value = value.mul(NegativeOne);\n  }\n\n  var fraction = value.mod(multiplier).toString();\n\n  while (fraction.length < multiplier.length - 1) {\n    fraction = \"0\" + fraction;\n  } // Strip training 0\n\n\n  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  var whole = value.div(multiplier).toString();\n\n  if (multiplier.length === 1) {\n    value = whole;\n  } else {\n    value = whole + \".\" + fraction;\n  }\n\n  if (negative) {\n    value = \"-\" + value;\n  }\n\n  return value;\n}\nexport function parseFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n\n  var multiplier = getMultiplier(decimals);\n\n  if (typeof value !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n    logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n  } // Is it negative?\n\n\n  var negative = value.substring(0, 1) === \"-\";\n\n  if (negative) {\n    value = value.substring(1);\n  }\n\n  if (value === \".\") {\n    logger.throwArgumentError(\"missing value\", \"value\", value);\n  } // Split it into a whole and fractional part\n\n\n  var comps = value.split(\".\");\n\n  if (comps.length > 2) {\n    logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n  }\n\n  var whole = comps[0],\n      fraction = comps[1];\n\n  if (!whole) {\n    whole = \"0\";\n  }\n\n  if (!fraction) {\n    fraction = \"0\";\n  } // Trim trailing zeros\n\n\n  while (fraction[fraction.length - 1] === \"0\") {\n    fraction = fraction.substring(0, fraction.length - 1);\n  } // Check the fraction doesn't exceed our decimals size\n\n\n  if (fraction.length > multiplier.length - 1) {\n    throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n  } // If decimals is 0, we have an empty string for fraction\n\n\n  if (fraction === \"\") {\n    fraction = \"0\";\n  } // Fully pad the string with zeros to get to wei\n\n\n  while (fraction.length < multiplier.length - 1) {\n    fraction += \"0\";\n  }\n\n  var wholeValue = BigNumber.from(whole);\n  var fractionValue = BigNumber.from(fraction);\n  var wei = wholeValue.mul(multiplier).add(fractionValue);\n\n  if (negative) {\n    wei = wei.mul(NegativeOne);\n  }\n\n  return wei;\n}\nexport var FixedFormat = /*#__PURE__*/function () {\n  function FixedFormat(constructorGuard, signed, width, decimals) {\n    _classCallCheck(this, FixedFormat);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new FixedFormat\"\n      });\n    }\n\n    this.signed = signed;\n    this.width = width;\n    this.decimals = decimals;\n    this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    this._multiplier = getMultiplier(decimals);\n    Object.freeze(this);\n  }\n\n  _createClass(FixedFormat, null, [{\n    key: \"from\",\n    value: function from(value) {\n      if (value instanceof FixedFormat) {\n        return value;\n      }\n\n      if (typeof value === \"number\") {\n        value = \"fixed128x\".concat(value);\n      }\n\n      var signed = true;\n      var width = 128;\n      var decimals = 18;\n\n      if (typeof value === \"string\") {\n        if (value === \"fixed\") {// defaults...\n        } else if (value === \"ufixed\") {\n          signed = false;\n        } else {\n          var match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n\n          if (!match) {\n            logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n          }\n\n          signed = match[1] !== \"u\";\n          width = parseInt(match[2]);\n          decimals = parseInt(match[3]);\n        }\n      } else if (value) {\n        var check = function check(key, type, defaultValue) {\n          if (value[key] == null) {\n            return defaultValue;\n          }\n\n          if (typeof value[key] !== type) {\n            logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n          }\n\n          return value[key];\n        };\n\n        signed = check(\"signed\", \"boolean\", signed);\n        width = check(\"width\", \"number\", width);\n        decimals = check(\"decimals\", \"number\", decimals);\n      }\n\n      if (width % 8) {\n        logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n      }\n\n      if (decimals > 80) {\n        logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n      }\n\n      return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n  }]);\n\n  return FixedFormat;\n}();\nexport var FixedNumber = /*#__PURE__*/function () {\n  function FixedNumber(constructorGuard, hex, value, format) {\n    _classCallCheck(this, FixedNumber);\n\n    logger.checkNew(this instanceof FixedNumber ? this.constructor : void 0, FixedNumber);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new FixedFormat\"\n      });\n    }\n\n    this.format = format;\n    this._hex = hex;\n    this._value = value;\n    this._isFixedNumber = true;\n    Object.freeze(this);\n  }\n\n  _createClass(FixedNumber, [{\n    key: \"_checkFormat\",\n    value: function _checkFormat(other) {\n      if (this.format.name !== other.format.name) {\n        logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n      }\n    }\n  }, {\n    key: \"addUnsafe\",\n    value: function addUnsafe(other) {\n      this._checkFormat(other);\n\n      var a = parseFixed(this._value, this.format.decimals);\n      var b = parseFixed(other._value, other.format.decimals);\n      return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n  }, {\n    key: \"subUnsafe\",\n    value: function subUnsafe(other) {\n      this._checkFormat(other);\n\n      var a = parseFixed(this._value, this.format.decimals);\n      var b = parseFixed(other._value, other.format.decimals);\n      return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n  }, {\n    key: \"mulUnsafe\",\n    value: function mulUnsafe(other) {\n      this._checkFormat(other);\n\n      var a = parseFixed(this._value, this.format.decimals);\n      var b = parseFixed(other._value, other.format.decimals);\n      return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n  }, {\n    key: \"divUnsafe\",\n    value: function divUnsafe(other) {\n      this._checkFormat(other);\n\n      var a = parseFixed(this._value, this.format.decimals);\n      var b = parseFixed(other._value, other.format.decimals);\n      return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n  }, {\n    key: \"floor\",\n    value: function floor() {\n      var comps = this.toString().split(\".\");\n\n      if (comps.length === 1) {\n        comps.push(\"0\");\n      }\n\n      var result = FixedNumber.from(comps[0], this.format);\n      var hasFraction = !comps[1].match(/^(0*)$/);\n\n      if (this.isNegative() && hasFraction) {\n        result = result.subUnsafe(ONE.toFormat(result.format));\n      }\n\n      return result;\n    }\n  }, {\n    key: \"ceiling\",\n    value: function ceiling() {\n      var comps = this.toString().split(\".\");\n\n      if (comps.length === 1) {\n        comps.push(\"0\");\n      }\n\n      var result = FixedNumber.from(comps[0], this.format);\n      var hasFraction = !comps[1].match(/^(0*)$/);\n\n      if (!this.isNegative() && hasFraction) {\n        result = result.addUnsafe(ONE.toFormat(result.format));\n      }\n\n      return result;\n    } // @TODO: Support other rounding algorithms\n\n  }, {\n    key: \"round\",\n    value: function round(decimals) {\n      if (decimals == null) {\n        decimals = 0;\n      } // If we are already in range, we're done\n\n\n      var comps = this.toString().split(\".\");\n\n      if (comps.length === 1) {\n        comps.push(\"0\");\n      }\n\n      if (decimals < 0 || decimals > 80 || decimals % 1) {\n        logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n      }\n\n      if (comps[1].length <= decimals) {\n        return this;\n      }\n\n      var factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n      var bump = BUMP.toFormat(this.format);\n      return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this._value === \"0.0\" || this._value === \"0\";\n    }\n  }, {\n    key: \"isNegative\",\n    value: function isNegative() {\n      return this._value[0] === \"-\";\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._value;\n    }\n  }, {\n    key: \"toHexString\",\n    value: function toHexString(width) {\n      if (width == null) {\n        return this._hex;\n      }\n\n      if (width % 8) {\n        logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n      }\n\n      var hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n      return hexZeroPad(hex, width / 8);\n    }\n  }, {\n    key: \"toUnsafeFloat\",\n    value: function toUnsafeFloat() {\n      return parseFloat(this.toString());\n    }\n  }, {\n    key: \"toFormat\",\n    value: function toFormat(format) {\n      return FixedNumber.fromString(this._value, format);\n    }\n  }], [{\n    key: \"fromValue\",\n    value: function fromValue(value, decimals, format) {\n      // If decimals looks more like a format, and there is no format, shift the parameters\n      if (format == null && decimals != null && !isBigNumberish(decimals)) {\n        format = decimals;\n        decimals = null;\n      }\n\n      if (decimals == null) {\n        decimals = 0;\n      }\n\n      if (format == null) {\n        format = \"fixed\";\n      }\n\n      return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value, format) {\n      if (format == null) {\n        format = \"fixed\";\n      }\n\n      var fixedFormat = FixedFormat.from(format);\n      var numeric = parseFixed(value, fixedFormat.decimals);\n\n      if (!fixedFormat.signed && numeric.lt(Zero)) {\n        throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n      }\n\n      var hex = null;\n\n      if (fixedFormat.signed) {\n        hex = numeric.toTwos(fixedFormat.width).toHexString();\n      } else {\n        hex = numeric.toHexString();\n        hex = hexZeroPad(hex, fixedFormat.width / 8);\n      }\n\n      var decimal = formatFixed(numeric, fixedFormat.decimals);\n      return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n  }, {\n    key: \"fromBytes\",\n    value: function fromBytes(value, format) {\n      if (format == null) {\n        format = \"fixed\";\n      }\n\n      var fixedFormat = FixedFormat.from(format);\n\n      if (arrayify(value).length > fixedFormat.width / 8) {\n        throw new Error(\"overflow\");\n      }\n\n      var numeric = BigNumber.from(value);\n\n      if (fixedFormat.signed) {\n        numeric = numeric.fromTwos(fixedFormat.width);\n      }\n\n      var hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n      var decimal = formatFixed(numeric, fixedFormat.decimals);\n      return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n  }, {\n    key: \"from\",\n    value: function from(value, format) {\n      if (typeof value === \"string\") {\n        return FixedNumber.fromString(value, format);\n      }\n\n      if (isBytes(value)) {\n        return FixedNumber.fromBytes(value, format);\n      }\n\n      try {\n        return FixedNumber.fromValue(value, 0, format);\n      } catch (error) {\n        // Allow NUMERIC_FAULT to bubble up\n        if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n          throw error;\n        }\n      }\n\n      return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n  }, {\n    key: \"isFixedNumber\",\n    value: function isFixedNumber(value) {\n      return !!(value && value._isFixedNumber);\n    }\n  }]);\n\n  return FixedNumber;\n}();\nvar ONE = FixedNumber.from(1);\nvar BUMP = FixedNumber.from(\"0.5\");","map":{"version":3,"mappings":"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","names":["arrayify","hexZeroPad","isBytes","Logger","version","logger","BigNumber","isBigNumberish","_constructorGuard","Zero","from","NegativeOne","throwFault","message","fault","operation","value","params","undefined","throwError","errors","NUMERIC_FAULT","zeros","length","getMultiplier","decimals","toNumber","e","substring","throwArgumentError","formatFixed","multiplier","negative","lt","mul","fraction","mod","toString","match","whole","div","parseFixed","comps","split","wholeValue","fractionValue","wei","add","FixedFormat","constructorGuard","signed","width","UNSUPPORTED_OPERATION","name","String","_multiplier","Object","freeze","parseInt","check","key","type","defaultValue","FixedNumber","hex","format","checkNew","_hex","_value","_isFixedNumber","other","_checkFormat","a","b","fromValue","sub","push","result","hasFraction","isNegative","subUnsafe","ONE","toFormat","addUnsafe","factor","bump","BUMP","mulUnsafe","floor","divUnsafe","fromTwos","toTwos","toHexString","parseFloat","fromString","fixedFormat","numeric","decimal","Error","fromBytes","error","code","INVALID_ARGUMENT"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/bignumber/src.ts/fixednumber.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify, BytesLike, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BigNumber, BigNumberish, isBigNumberish } from \"./bignumber\";\n\nconst _constructorGuard = { };\n\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\n\nfunction throwFault(message: string, fault: string, operation: string, value?: any): never {\n    const params: any = { fault: fault, operation: operation };\n    if (value !== undefined) { params.value = value; }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) { zeros += zeros; }\n\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals: BigNumberish): string {\n\n    if (typeof(decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        } catch (e) { }\n    }\n\n    if (typeof(decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nexport function formatFixed(value: BigNumberish, decimals?: string | BigNumberish): string {\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n\n    const negative = value.lt(Zero);\n    if (negative) { value = value.mul(NegativeOne); }\n\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) { fraction = \"0\" + fraction; }\n\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    } else {\n        value = whole + \".\" + fraction;\n    }\n\n    if (negative) { value = \"-\" + value; }\n\n    return value;\n}\n\nexport function parseFixed(value: string, decimals?: BigNumberish): BigNumber {\n\n    if (decimals == null) { decimals = 0; }\n    const multiplier = getMultiplier(decimals);\n\n    if (typeof(value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) { value = value.substring(1); }\n\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) { whole = \"0\"; }\n    if (!fraction) { fraction = \"0\"; }\n\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") { fraction = \"0\"; }\n\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) { fraction += \"0\"; }\n\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n\n    if (negative) { wei = wei.mul(NegativeOne); }\n\n    return wei;\n}\n\n\nexport class FixedFormat {\n    readonly signed: boolean;\n    readonly width: number;\n    readonly decimals: number;\n    readonly name: string;\n    readonly _multiplier: string;\n\n    constructor(constructorGuard: any, signed: boolean, width: number, decimals: number) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n\n        this.name = (signed ? \"\": \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n\n        this._multiplier = getMultiplier(decimals);\n\n        Object.freeze(this);\n    }\n\n    static from(value: any): FixedFormat {\n        if (value instanceof FixedFormat) { return value; }\n\n        if (typeof(value) === \"number\") {\n            value = `fixed128x${value}`\n        }\n\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n\n        if (typeof(value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            } else if (value === \"ufixed\") {\n                signed = false;\n            } else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) { logger.throwArgumentError(\"invalid fixed format\", \"format\", value); }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        } else if (value) {\n            const check = (key: string, type: string, defaultValue: any): any => {\n                if (value[key] == null) { return defaultValue; }\n                if (typeof(value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type +\")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            }\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\n\nexport class FixedNumber {\n    readonly format: FixedFormat;\n    readonly _hex: string;\n    readonly _value: string;\n\n    readonly _isFixedNumber: boolean;\n\n    constructor(constructorGuard: any, hex: string, value: string, format?: FixedFormat) {\n        logger.checkNew(new.target, FixedNumber);\n\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n\n        this._isFixedNumber = true;\n\n        Object.freeze(this);\n    }\n\n    _checkFormat(other: FixedNumber): void {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n\n    addUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n\n    subUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n\n    mulUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n\n    divUnsafe(other: FixedNumber): FixedNumber {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n\n    floor(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    ceiling(): FixedNumber {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        let result = FixedNumber.from(comps[0], this.format);\n\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n\n        return result;\n    }\n\n    // @TODO: Support other rounding algorithms\n    round(decimals?: number): FixedNumber {\n        if (decimals == null) { decimals = 0; }\n\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) { comps.push(\"0\"); }\n\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n\n        if (comps[1].length <= decimals) { return this; }\n\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n\n    isZero(): boolean {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n\n    isNegative(): boolean {\n        return (this._value[0] === \"-\");\n    }\n\n    toString(): string { return this._value; }\n\n    toHexString(width?: number): string {\n        if (width == null) { return this._hex; }\n        if (width % 8) { logger.throwArgumentError(\"invalid byte width\", \"width\", width); }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n\n    toUnsafeFloat(): number { return parseFloat(this.toString()); }\n\n    toFormat(format: FixedFormat | string): FixedNumber {\n        return FixedNumber.fromString(this._value, format);\n    }\n\n\n    static fromValue(value: BigNumber, decimals?: BigNumberish, format?: FixedFormat | string | number): FixedNumber {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n\n        if (decimals == null) { decimals = 0; }\n        if (format == null) { format = \"fixed\"; }\n\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n\n\n    static fromString(value: string, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        const numeric = parseFixed(value, fixedFormat.decimals);\n\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n\n        let hex: string = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        } else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static fromBytes(value: BytesLike, format?: FixedFormat | string | number): FixedNumber {\n        if (format == null) { format = \"fixed\"; }\n\n        const fixedFormat = FixedFormat.from(format);\n\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) { numeric = numeric.fromTwos(fixedFormat.width); }\n\n        const hex = numeric.toTwos((fixedFormat.signed ? 0: 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n\n    static from(value: any, format?: FixedFormat | string | number) {\n        if (typeof(value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        } catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n\n    static isFixedNumber(value: any): value is FixedNumber {\n        return !!(value && value._isFixedNumber);\n    }\n}\n\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n"]},"metadata":{},"sourceType":"module"}