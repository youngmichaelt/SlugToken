{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { showThrottleMessage } from \"./formatter\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\"; // The transaction has already been sanitized by the calls in Provider\n\nfunction getTransactionPostData(transaction) {\n  var result = {};\n\n  for (var key in transaction) {\n    if (transaction[key] == null) {\n      continue;\n    }\n\n    var value = transaction[key];\n\n    if (key === \"type\" && value === 0) {\n      continue;\n    } // Quantity-types require no leading zero, unless 0\n\n\n    if ({\n      type: true,\n      gasLimit: true,\n      gasPrice: true,\n      maxFeePerGs: true,\n      maxPriorityFeePerGas: true,\n      nonce: true,\n      value: true\n    }[key]) {\n      value = hexValue(hexlify(value));\n    } else if (key === \"accessList\") {\n      value = \"[\" + accessListify(value).map(function (set) {\n        return \"{address:\\\"\".concat(set.address, \"\\\",storageKeys:[\\\"\").concat(set.storageKeys.join('\",\"'), \"\\\"]}\");\n      }).join(\",\") + \"]\";\n    } else {\n      value = hexlify(value);\n    }\n\n    result[key] = value;\n  }\n\n  return result;\n}\n\nfunction getResult(result) {\n  // getLogs, getHistory have weird success responses\n  if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n    return result.result;\n  }\n\n  if (result.status != 1 || result.message != \"OK\") {\n    var error = new Error(\"invalid response\");\n    error.result = JSON.stringify(result);\n\n    if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n      error.throttleRetry = true;\n    }\n\n    throw error;\n  }\n\n  return result.result;\n}\n\nfunction getJsonResult(result) {\n  // This response indicates we are being throttled\n  if (result && result.status == 0 && result.message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n    var error = new Error(\"throttled response\");\n    error.result = JSON.stringify(result);\n    error.throttleRetry = true;\n    throw error;\n  }\n\n  if (result.jsonrpc != \"2.0\") {\n    // @TODO: not any\n    var _error = new Error(\"invalid response\");\n\n    _error.result = JSON.stringify(result);\n    throw _error;\n  }\n\n  if (result.error) {\n    // @TODO: not any\n    var _error2 = new Error(result.error.message || \"unknown error\");\n\n    if (result.error.code) {\n      _error2.code = result.error.code;\n    }\n\n    if (result.error.data) {\n      _error2.data = result.error.data;\n    }\n\n    throw _error2;\n  }\n\n  return result.result;\n} // The blockTag was normalized as a string by the Provider pre-perform operations\n\n\nfunction checkLogTag(blockTag) {\n  if (blockTag === \"pending\") {\n    throw new Error(\"pending not supported\");\n  }\n\n  if (blockTag === \"latest\") {\n    return blockTag;\n  }\n\n  return parseInt(blockTag.substring(2), 16);\n}\n\nvar defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method, error, transaction) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n    var e = error.error; // Etherscan keeps changing their string\n\n    if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n      // Etherscan prefixes the data like \"Reverted 0x1234\"\n      var data = e.data;\n\n      if (data) {\n        data = \"0x\" + data.replace(/^.*0x/i, \"\");\n      }\n\n      if (isHexString(data)) {\n        return data;\n      }\n\n      logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n        error: error,\n        data: \"0x\"\n      });\n    }\n  } // Get the message from any nested error structure\n\n\n  var message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR) {\n    if (error.error && typeof error.error.message === \"string\") {\n      message = error.error.message;\n    } else if (typeof error.body === \"string\") {\n      message = error.body;\n    } else if (typeof error.responseText === \"string\") {\n      message = error.responseText;\n    }\n  }\n\n  message = (message || \"\").toLowerCase(); // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n\n  if (message.match(/insufficient funds/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"Transaction with the same hash was already imported.\"\n\n\n  if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n\n\n  if (message.match(/another transaction with same nonce/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  if (message.match(/execution failed due to an exception|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  throw error;\n}\n\nexport var EtherscanProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(EtherscanProvider, _BaseProvider);\n\n  var _super2 = _createSuper(EtherscanProvider);\n\n  function EtherscanProvider(network, apiKey) {\n    var _this;\n\n    _classCallCheck(this, EtherscanProvider);\n\n    logger.checkNew(this instanceof EtherscanProvider ? this.constructor : void 0, EtherscanProvider);\n    _this = _super2.call(this, network);\n    defineReadOnly(_assertThisInitialized(_this), \"baseUrl\", _this.getBaseUrl());\n    defineReadOnly(_assertThisInitialized(_this), \"apiKey\", apiKey || defaultApiKey);\n    return _this;\n  }\n\n  _createClass(EtherscanProvider, [{\n    key: \"getBaseUrl\",\n    value: function getBaseUrl() {\n      switch (this.network ? this.network.name : \"invalid\") {\n        case \"homestead\":\n          return \"https:/\\/api.etherscan.io\";\n\n        case \"ropsten\":\n          return \"https:/\\/api-ropsten.etherscan.io\";\n\n        case \"rinkeby\":\n          return \"https:/\\/api-rinkeby.etherscan.io\";\n\n        case \"kovan\":\n          return \"https:/\\/api-kovan.etherscan.io\";\n\n        case \"goerli\":\n          return \"https:/\\/api-goerli.etherscan.io\";\n\n        default:\n      }\n\n      return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(module, params) {\n      var query = Object.keys(params).reduce(function (accum, key) {\n        var value = params[key];\n\n        if (value != null) {\n          accum += \"&\".concat(key, \"=\").concat(value);\n        }\n\n        return accum;\n      }, \"\");\n      var apiKey = this.apiKey ? \"&apikey=\".concat(this.apiKey) : \"\";\n      return \"\".concat(this.baseUrl, \"/api?module=\").concat(module).concat(query).concat(apiKey);\n    }\n  }, {\n    key: \"getPostUrl\",\n    value: function getPostUrl() {\n      return \"\".concat(this.baseUrl, \"/api\");\n    }\n  }, {\n    key: \"getPostData\",\n    value: function getPostData(module, params) {\n      params.module = module;\n      params.apikey = this.apiKey;\n      return params;\n    }\n  }, {\n    key: \"fetch\",\n    value: function fetch(module, params, post) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        var url, payload, procFunc, connection, payloadStr, result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                url = post ? this.getPostUrl() : this.getUrl(module, params);\n                payload = post ? this.getPostData(module, params) : null;\n                procFunc = module === \"proxy\" ? getJsonResult : getResult;\n                this.emit(\"debug\", {\n                  action: \"request\",\n                  request: url,\n                  provider: this\n                });\n                connection = {\n                  url: url,\n                  throttleSlotInterval: 1000,\n                  throttleCallback: function throttleCallback(attempt, url) {\n                    if (_this2.isCommunityResource()) {\n                      showThrottleMessage();\n                    }\n\n                    return Promise.resolve(true);\n                  }\n                };\n                payloadStr = null;\n\n                if (payload) {\n                  connection.headers = {\n                    \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\"\n                  };\n                  payloadStr = Object.keys(payload).map(function (key) {\n                    return \"\".concat(key, \"=\").concat(payload[key]);\n                  }).join(\"&\");\n                }\n\n                _context.next = 9;\n                return fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n              case 9:\n                result = _context.sent;\n                this.emit(\"debug\", {\n                  action: \"response\",\n                  request: url,\n                  response: deepCopy(result),\n                  provider: this\n                });\n                return _context.abrupt(\"return\", result);\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", this.network);\n\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      var _this3 = this;\n\n      var _super = Object.create(null, {\n        perform: {\n          get: function get() {\n            return _get(_getPrototypeOf(EtherscanProvider.prototype), \"perform\", _this3);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var postData, _postData, args, topic0, logs, blocks, i, log, block;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.t0 = method;\n                _context3.next = _context3.t0 === \"getBlockNumber\" ? 3 : _context3.t0 === \"getGasPrice\" ? 4 : _context3.t0 === \"getBalance\" ? 5 : _context3.t0 === \"getTransactionCount\" ? 6 : _context3.t0 === \"getCode\" ? 7 : _context3.t0 === \"getStorageAt\" ? 8 : _context3.t0 === \"sendTransaction\" ? 9 : _context3.t0 === \"getBlock\" ? 10 : _context3.t0 === \"getTransaction\" ? 13 : _context3.t0 === \"getTransactionReceipt\" ? 14 : _context3.t0 === \"call\" ? 15 : _context3.t0 === \"estimateGas\" ? 29 : _context3.t0 === \"getLogs\" ? 41 : _context3.t0 === \"getEtherPrice\" ? 65 : 72;\n                break;\n\n              case 3:\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_blockNumber\"\n                }));\n\n              case 4:\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_gasPrice\"\n                }));\n\n              case 5:\n                return _context3.abrupt(\"return\", this.fetch(\"account\", {\n                  action: \"balance\",\n                  address: params.address,\n                  tag: params.blockTag\n                }));\n\n              case 6:\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_getTransactionCount\",\n                  address: params.address,\n                  tag: params.blockTag\n                }));\n\n              case 7:\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_getCode\",\n                  address: params.address,\n                  tag: params.blockTag\n                }));\n\n              case 8:\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_getStorageAt\",\n                  address: params.address,\n                  position: params.position,\n                  tag: params.blockTag\n                }));\n\n              case 9:\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_sendRawTransaction\",\n                  hex: params.signedTransaction\n                }, true).catch(function (error) {\n                  return checkError(\"sendTransaction\", error, params.signedTransaction);\n                }));\n\n              case 10:\n                if (!params.blockTag) {\n                  _context3.next = 12;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_getBlockByNumber\",\n                  tag: params.blockTag,\n                  boolean: params.includeTransactions ? \"true\" : \"false\"\n                }));\n\n              case 12:\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n              case 13:\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_getTransactionByHash\",\n                  txhash: params.transactionHash\n                }));\n\n              case 14:\n                return _context3.abrupt(\"return\", this.fetch(\"proxy\", {\n                  action: \"eth_getTransactionReceipt\",\n                  txhash: params.transactionHash\n                }));\n\n              case 15:\n                if (!(params.blockTag !== \"latest\")) {\n                  _context3.next = 17;\n                  break;\n                }\n\n                throw new Error(\"EtherscanProvider does not support blockTag for call\");\n\n              case 17:\n                postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n                _context3.prev = 20;\n                _context3.next = 23;\n                return this.fetch(\"proxy\", postData, true);\n\n              case 23:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 26:\n                _context3.prev = 26;\n                _context3.t1 = _context3[\"catch\"](20);\n                return _context3.abrupt(\"return\", checkError(\"call\", _context3.t1, params.transaction));\n\n              case 29:\n                _postData = getTransactionPostData(params.transaction);\n                _postData.module = \"proxy\";\n                _postData.action = \"eth_estimateGas\";\n                _context3.prev = 32;\n                _context3.next = 35;\n                return this.fetch(\"proxy\", _postData, true);\n\n              case 35:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 38:\n                _context3.prev = 38;\n                _context3.t2 = _context3[\"catch\"](32);\n                return _context3.abrupt(\"return\", checkError(\"estimateGas\", _context3.t2, params.transaction));\n\n              case 41:\n                args = {\n                  action: \"getLogs\"\n                };\n\n                if (params.filter.fromBlock) {\n                  args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                  args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                  args.address = params.filter.address;\n                } // @TODO: We can handle slightly more complicated logs using the logs API\n\n\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                  if (params.filter.topics.length > 1) {\n                    logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, {\n                      topics: params.filter.topics\n                    });\n                  }\n\n                  if (params.filter.topics.length === 1) {\n                    topic0 = params.filter.topics[0];\n\n                    if (typeof topic0 !== \"string\" || topic0.length !== 66) {\n                      logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, {\n                        topic0: topic0\n                      });\n                    }\n\n                    args.topic0 = topic0;\n                  }\n                }\n\n                _context3.next = 48;\n                return this.fetch(\"logs\", args);\n\n              case 48:\n                logs = _context3.sent;\n                // Cache txHash => blockHash\n                blocks = {}; // Add any missing blockHash to the logs\n\n                i = 0;\n\n              case 51:\n                if (!(i < logs.length)) {\n                  _context3.next = 64;\n                  break;\n                }\n\n                log = logs[i];\n\n                if (!(log.blockHash != null)) {\n                  _context3.next = 55;\n                  break;\n                }\n\n                return _context3.abrupt(\"continue\", 61);\n\n              case 55:\n                if (!(blocks[log.blockNumber] == null)) {\n                  _context3.next = 60;\n                  break;\n                }\n\n                _context3.next = 58;\n                return this.getBlock(log.blockNumber);\n\n              case 58:\n                block = _context3.sent;\n\n                if (block) {\n                  blocks[log.blockNumber] = block.hash;\n                }\n\n              case 60:\n                log.blockHash = blocks[log.blockNumber];\n\n              case 61:\n                i++;\n                _context3.next = 51;\n                break;\n\n              case 64:\n                return _context3.abrupt(\"return\", logs);\n\n              case 65:\n                if (!(this.network.name !== \"homestead\")) {\n                  _context3.next = 67;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\", 0.0);\n\n              case 67:\n                _context3.t3 = parseFloat;\n                _context3.next = 70;\n                return this.fetch(\"stats\", {\n                  action: \"ethprice\"\n                });\n\n              case 70:\n                _context3.t4 = _context3.sent.ethusd;\n                return _context3.abrupt(\"return\", (0, _context3.t3)(_context3.t4));\n\n              case 72:\n                return _context3.abrupt(\"break\", 73);\n\n              case 73:\n                return _context3.abrupt(\"return\", _super.perform.call(this, method, params));\n\n              case 74:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[20, 26], [32, 38]]);\n      }));\n    } // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n\n  }, {\n    key: \"getHistory\",\n    value: function getHistory(addressOrName, startBlock, endBlock) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this4 = this;\n\n        var params, result;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.resolveName(addressOrName);\n\n              case 2:\n                _context4.t0 = _context4.sent;\n                _context4.t1 = startBlock == null ? 0 : startBlock;\n                _context4.t2 = endBlock == null ? 99999999 : endBlock;\n                params = {\n                  action: \"txlist\",\n                  address: _context4.t0,\n                  startblock: _context4.t1,\n                  endblock: _context4.t2,\n                  sort: \"asc\"\n                };\n                _context4.next = 8;\n                return this.fetch(\"account\", params);\n\n              case 8:\n                result = _context4.sent;\n                return _context4.abrupt(\"return\", result.map(function (tx) {\n                  [\"contractAddress\", \"to\"].forEach(function (key) {\n                    if (tx[key] == \"\") {\n                      delete tx[key];\n                    }\n                  });\n\n                  if (tx.creates == null && tx.contractAddress != null) {\n                    tx.creates = tx.contractAddress;\n                  }\n\n                  var item = _this4.formatter.transactionResponse(tx);\n\n                  if (tx.timeStamp) {\n                    item.timestamp = parseInt(tx.timeStamp);\n                  }\n\n                  return item;\n                }));\n\n              case 10:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"isCommunityResource\",\n    value: function isCommunityResource() {\n      return this.apiKey === defaultApiKey;\n    }\n  }]);\n\n  return EtherscanProvider;\n}(BaseProvider);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,WAA5B,QAA+C,sBAA/C;AAEA,SAASC,QAAT,EAAmBC,cAAnB,QAAyC,2BAAzC;AACA,SAASC,aAAT,QAA8B,6BAA9B;AACA,SAAyBC,SAAzB,QAA0C,oBAA1C;AAEA,SAASC,mBAAT,QAAoC,aAApC;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,SAASE,YAAT,QAA6B,iBAA7B,C,CAGA;;AACA,SAASC,sBAAT,CAAgCC,WAAhC,EAA+D;AAC3D,MAAMC,MAAM,GAA2B,EAAvC;;AACA,OAAK,IAAIC,GAAT,IAAgBF,WAAhB,EAA6B;AACzB,QAAUA,WAAY,CAACE,GAAD,CAAZ,IAAqB,IAA/B,EAAqC;AAAE;AAAW;;AAClD,QAAIC,KAAK,GAASH,WAAY,CAACE,GAAD,CAA9B;;AACA,QAAIA,GAAG,KAAK,MAAR,IAAkBC,KAAK,KAAK,CAAhC,EAAmC;AAAE;AAAW,KAHvB,CAKzB;;;AACA,QAAU;AAAEC,UAAI,EAAE,IAAR;AAAcC,cAAQ,EAAE,IAAxB;AAA8BC,cAAQ,EAAE,IAAxC;AAA8CC,iBAAW,EAAE,IAA3D;AAAiEC,0BAAoB,EAAE,IAAvF;AAA6FC,WAAK,EAAE,IAApG;AAA0GN,WAAK,EAAE;AAAjH,MAAyHD,GAAzH,CAAV,EAAyI;AACrIC,WAAK,GAAGf,QAAQ,CAACD,OAAO,CAACgB,KAAD,CAAR,CAAhB;AACH,KAFD,MAEO,IAAID,GAAG,KAAK,YAAZ,EAA0B;AAC7BC,WAAK,GAAG,MAAMX,aAAa,CAACW,KAAD,CAAb,CAAqBO,GAArB,CAAyB,UAACC,GAAD,EAAQ;AAC3C,oCAAqBA,GAAG,CAACC,OAAzB,+BAAqDD,GAAG,CAACE,WAAJ,CAAgBC,IAAhB,CAAqB,KAArB,CAArD;AACH,OAFa,EAEXA,IAFW,CAEN,GAFM,CAAN,GAEO,GAFf;AAGH,KAJM,MAIA;AACHX,WAAK,GAAGhB,OAAO,CAACgB,KAAD,CAAf;AACH;;AACDF,UAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AACH;;AACD,SAAOF,MAAP;AACH;;AAED,SAASc,SAAT,CAAmBd,MAAnB,EAA8E;AAC1E;AACA,MAAIA,MAAM,CAACe,MAAP,IAAiB,CAAjB,KAAuBf,MAAM,CAACgB,OAAP,KAAmB,kBAAnB,IAAyChB,MAAM,CAACgB,OAAP,KAAmB,uBAAnF,CAAJ,EAAiH;AAC7G,WAAOhB,MAAM,CAACA,MAAd;AACH;;AAED,MAAIA,MAAM,CAACe,MAAP,IAAiB,CAAjB,IAAsBf,MAAM,CAACgB,OAAP,IAAkB,IAA5C,EAAkD;AAC9C,QAAMC,KAAK,GAAQ,IAAIC,KAAJ,CAAU,kBAAV,CAAnB;AACAD,SAAK,CAACjB,MAAN,GAAemB,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAf;;AACA,QAAI,CAACA,MAAM,CAACA,MAAP,IAAiB,EAAlB,EAAsBqB,WAAtB,GAAoCC,OAApC,CAA4C,YAA5C,KAA6D,CAAjE,EAAoE;AAChEL,WAAK,CAACM,aAAN,GAAsB,IAAtB;AACH;;AACD,UAAMN,KAAN;AACH;;AAED,SAAOjB,MAAM,CAACA,MAAd;AACH;;AAED,SAASwB,aAAT,CAAuBxB,MAAvB,EAAwH;AACpH;AACA,MAAIA,MAAM,IAAUA,MAAO,CAACe,MAAR,IAAkB,CAAlC,IAA6Cf,MAAO,CAACgB,OAAR,IAAmB,OAAhE,IAA2E,CAAChB,MAAM,CAACA,MAAP,IAAiB,EAAlB,EAAsBqB,WAAtB,GAAoCC,OAApC,CAA4C,YAA5C,KAA6D,CAA5I,EAA+I;AAC3I,QAAML,KAAK,GAAQ,IAAIC,KAAJ,CAAU,oBAAV,CAAnB;AACAD,SAAK,CAACjB,MAAN,GAAemB,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAf;AACAiB,SAAK,CAACM,aAAN,GAAsB,IAAtB;AACA,UAAMN,KAAN;AACH;;AAED,MAAIjB,MAAM,CAACyB,OAAP,IAAkB,KAAtB,EAA6B;AACzB;AACA,QAAMR,MAAK,GAAQ,IAAIC,KAAJ,CAAU,kBAAV,CAAnB;;AACAD,UAAK,CAACjB,MAAN,GAAemB,IAAI,CAACC,SAAL,CAAepB,MAAf,CAAf;AACA,UAAMiB,MAAN;AACH;;AAED,MAAIjB,MAAM,CAACiB,KAAX,EAAkB;AACd;AACA,QAAMA,OAAK,GAAQ,IAAIC,KAAJ,CAAUlB,MAAM,CAACiB,KAAP,CAAaD,OAAb,IAAwB,eAAlC,CAAnB;;AACA,QAAIhB,MAAM,CAACiB,KAAP,CAAaS,IAAjB,EAAuB;AAAET,aAAK,CAACS,IAAN,GAAa1B,MAAM,CAACiB,KAAP,CAAaS,IAA1B;AAAiC;;AAC1D,QAAI1B,MAAM,CAACiB,KAAP,CAAaU,IAAjB,EAAuB;AAAEV,aAAK,CAACU,IAAN,GAAa3B,MAAM,CAACiB,KAAP,CAAaU,IAA1B;AAAiC;;AAC1D,UAAMV,OAAN;AACH;;AAED,SAAOjB,MAAM,CAACA,MAAd;AACH,C,CAED;;;AACA,SAAS4B,WAAT,CAAqBC,QAArB,EAAqC;AACjC,MAAIA,QAAQ,KAAK,SAAjB,EAA4B;AAAE,UAAM,IAAIX,KAAJ,CAAU,uBAAV,CAAN;AAA2C;;AACzE,MAAIW,QAAQ,KAAK,QAAjB,EAA2B;AAAE,WAAOA,QAAP;AAAkB;;AAE/C,SAAOC,QAAQ,CAACD,QAAQ,CAACE,SAAT,CAAmB,CAAnB,CAAD,EAAwB,EAAxB,CAAf;AACH;;AAGD,IAAMC,aAAa,GAAG,oCAAtB;;AAEA,SAASC,UAAT,CAAoBC,MAApB,EAAoCjB,KAApC,EAAgDlB,WAAhD,EAAgE;AAC5D;AACA;AACA,MAAImC,MAAM,KAAK,MAAX,IAAqBjB,KAAK,CAACS,IAAN,KAAehC,MAAM,CAACyC,MAAP,CAAcC,YAAtD,EAAoE;AAChE,QAAMC,CAAC,GAAGpB,KAAK,CAACA,KAAhB,CADgE,CAGhE;;AACA,QAAIoB,CAAC,KAAKA,CAAC,CAACrB,OAAF,CAAUsB,KAAV,CAAgB,WAAhB,KAAgCD,CAAC,CAACrB,OAAF,CAAUsB,KAAV,CAAgB,qBAAhB,CAArC,CAAL,EAAmF;AAC/E;AACA,UAAIX,IAAI,GAAGU,CAAC,CAACV,IAAb;;AACA,UAAIA,IAAJ,EAAU;AAAEA,YAAI,GAAG,OAAOA,IAAI,CAACY,OAAL,CAAa,QAAb,EAAuB,EAAvB,CAAd;AAA2C;;AAEvD,UAAInD,WAAW,CAACuC,IAAD,CAAf,EAAuB;AAAE,eAAOA,IAAP;AAAc;;AAEvC/B,YAAM,CAAC4C,UAAP,CAAkB,uCAAlB,EAA2D9C,MAAM,CAACyC,MAAP,CAAcM,cAAzE,EAAyF;AACrFxB,aAAK,EAALA,KADqF;AAC9EU,YAAI,EAAE;AADwE,OAAzF;AAGH;AACJ,GAlB2D,CAoB5D;;;AACA,MAAIX,OAAO,GAAGC,KAAK,CAACD,OAApB;;AACA,MAAIC,KAAK,CAACS,IAAN,KAAehC,MAAM,CAACyC,MAAP,CAAcC,YAAjC,EAA+C;AAC3C,QAAInB,KAAK,CAACA,KAAN,IAAe,OAAOA,KAAK,CAACA,KAAN,CAAYD,OAAnB,KAAgC,QAAnD,EAA6D;AACzDA,aAAO,GAAGC,KAAK,CAACA,KAAN,CAAYD,OAAtB;AACH,KAFD,MAEO,IAAI,OAAOC,KAAK,CAACyB,IAAb,KAAuB,QAA3B,EAAqC;AACxC1B,aAAO,GAAGC,KAAK,CAACyB,IAAhB;AACH,KAFM,MAEA,IAAI,OAAOzB,KAAK,CAAC0B,YAAb,KAA+B,QAAnC,EAA6C;AAChD3B,aAAO,GAAGC,KAAK,CAAC0B,YAAhB;AACH;AACJ;;AACD3B,SAAO,GAAG,CAACA,OAAO,IAAI,EAAZ,EAAgBK,WAAhB,EAAV,CA/B4D,CAiC5D;;AACA,MAAIL,OAAO,CAACsB,KAAR,CAAc,oBAAd,CAAJ,EAAyC;AACrC1C,UAAM,CAAC4C,UAAP,CAAkB,mDAAlB,EAAuE9C,MAAM,CAACyC,MAAP,CAAcS,kBAArF,EAAyG;AACtG3B,WAAK,EAALA,KADsG;AAC/FiB,YAAM,EAANA,MAD+F;AACvFnC,iBAAW,EAAXA;AADuF,KAAzG;AAGH,GAtC2D,CAwC5D;;;AACA,MAAIiB,OAAO,CAACsB,KAAR,CAAc,2EAAd,CAAJ,EAAgG;AAC5F1C,UAAM,CAAC4C,UAAP,CAAkB,6BAAlB,EAAiD9C,MAAM,CAACyC,MAAP,CAAcU,aAA/D,EAA8E;AAC3E5B,WAAK,EAALA,KAD2E;AACpEiB,YAAM,EAANA,MADoE;AAC5DnC,iBAAW,EAAXA;AAD4D,KAA9E;AAGH,GA7C2D,CA+C5D;;;AACA,MAAIiB,OAAO,CAACsB,KAAR,CAAc,qCAAd,CAAJ,EAA0D;AACrD1C,UAAM,CAAC4C,UAAP,CAAkB,yBAAlB,EAA6C9C,MAAM,CAACyC,MAAP,CAAcW,uBAA3D,EAAoF;AACjF7B,WAAK,EAALA,KADiF;AAC1EiB,YAAM,EAANA,MAD0E;AAClEnC,iBAAW,EAAXA;AADkE,KAApF;AAGJ;;AAED,MAAIiB,OAAO,CAACsB,KAAR,CAAc,yDAAd,CAAJ,EAA8E;AAC1E1C,UAAM,CAAC4C,UAAP,CAAkB,2EAAlB,EAA+F9C,MAAM,CAACyC,MAAP,CAAcY,uBAA7G,EAAsI;AAClI9B,WAAK,EAALA,KADkI;AAC3HiB,YAAM,EAANA,MAD2H;AACnHnC,iBAAW,EAAXA;AADmH,KAAtI;AAGH;;AAED,QAAMkB,KAAN;AACH;;AAED,WAAa+B,iBAAb;AAAA;;AAAA;;AAII,6BAAYC,OAAZ,EAAkCC,MAAlC,EAAiD;AAAA;;AAAA;;AAC7CtD,UAAM,CAACuD,QAAP,gEAA4BH,iBAA5B;AAEA,+BAAMC,OAAN;AAEA3D,kBAAc,gCAAO,SAAP,EAAkB,MAAK8D,UAAL,EAAlB,CAAd;AACA9D,kBAAc,gCAAO,QAAP,EAAiB4D,MAAM,IAAIlB,aAA3B,CAAd;AAN6C;AAOhD;;AAXL;AAAA;AAAA,WAaI,sBAAU;AACN,cAAO,KAAKiB,OAAL,GAAe,KAAKA,OAAL,CAAaI,IAA5B,GAAkC,SAAzC;AACI,aAAK,WAAL;AACI,iBAAO,2BAAP;;AACJ,aAAK,SAAL;AACI,iBAAO,mCAAP;;AACJ,aAAK,SAAL;AACI,iBAAO,mCAAP;;AACJ,aAAK,OAAL;AACI,iBAAO,iCAAP;;AACJ,aAAK,QAAL;AACI,iBAAO,kCAAP;;AACJ;AAXJ;;AAcA,aAAOzD,MAAM,CAAC0D,kBAAP,CAA0B,qBAA1B,EAAiD,SAAjD,EAA4DD,IAA5D,CAAP;AACH;AA7BL;AAAA;AAAA,WA+BI,gBAAOE,MAAP,EAAuBC,MAAvB,EAAqD;AACjD,UAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,CAA2B,UAACC,KAAD,EAAQ5D,GAAR,EAAe;AACpD,YAAMC,KAAK,GAAGsD,MAAM,CAACvD,GAAD,CAApB;;AACA,YAAIC,KAAK,IAAI,IAAb,EAAmB;AACf2D,eAAK,eAAS5D,GAAT,cAAkBC,KAAlB,CAAL;AACH;;AACD,eAAO2D,KAAP;AACH,OANa,EAMX,EANW,CAAd;AAOA,UAAMX,MAAM,GAAK,KAAKA,MAAN,qBAA4B,KAAKA,MAAjC,IAA4C,EAA5D;AACA,uBAAW,KAAKY,OAAhB,yBAAwCP,MAAxC,SAAmDE,KAAnD,SAA6DP,MAA7D;AACH;AAzCL;AAAA;AAAA,WA2CI,sBAAU;AACN,uBAAW,KAAKY,OAAhB;AACH;AA7CL;AAAA;AAAA,WA+CI,qBAAYP,MAAZ,EAA4BC,MAA5B,EAAuD;AACnDA,YAAM,CAACD,MAAP,GAAgBA,MAAhB;AACAC,YAAM,CAACO,MAAP,GAAgB,KAAKb,MAArB;AACA,aAAOM,MAAP;AACH;AAnDL;AAAA;AAAA,WAqDU,eAAMD,MAAN,EAAsBC,MAAtB,EAAmDQ,IAAnD,EAAiE;;;;;;;;;AAC7DC,sBAAOD,IAAI,GAAG,KAAKE,UAAL,EAAH,GAAsB,KAAKC,MAAL,CAAYZ,MAAZ,EAAoBC,MAApB;AACjCY,0BAAWJ,IAAI,GAAG,KAAKK,WAAL,CAAiBd,MAAjB,EAAyBC,MAAzB,CAAH,GAAqC;AACpDc,2BAAYf,MAAM,KAAK,OAAZ,GAAuB/B,aAAvB,GAAsCV;AAEvD,qBAAKyD,IAAL,CAAU,OAAV,EAAmB;AACfC,wBAAM,EAAE,SADO;AAEfC,yBAAO,EAAER,GAFM;AAGfS,0BAAQ,EAAE;AAHK,iBAAnB;AAMMC,6BAA6B;AAC/BV,qBAAG,EAAEA,GAD0B;AAE/BW,sCAAoB,EAAE,IAFS;AAG/BC,kCAAgB,EAAE,0BAACC,OAAD,EAAkBb,GAAlB,EAAiC;AAC/C,wBAAI,MAAI,CAACc,mBAAL,EAAJ,EAAgC;AAC5BtF,yCAAmB;AACtB;;AACD,2BAAOuF,OAAO,CAACC,OAAR,CAAgB,IAAhB,CAAP;AACH;AAR8B;AAW/BC,6BAAqB;;AACzB,oBAAId,OAAJ,EAAa;AACTO,4BAAU,CAACQ,OAAX,GAAqB;AAAE,oCAAgB;AAAlB,mBAArB;AACAD,4BAAU,GAAGxB,MAAM,CAACC,IAAP,CAAYS,OAAZ,EAAqB3D,GAArB,CAAyB,UAACR,GAAD,EAAQ;AAC1C,qCAAWA,GAAX,cAAoBmE,OAAO,CAACnE,GAAD,CAA3B;AACH,mBAFY,EAEVY,IAFU,CAEL,GAFK,CAAb;AAGH;;;AAEc,uBAAMrB,SAAS,CAACmF,UAAD,EAAaO,UAAb,EAAyBZ,QAAQ,IAAI9C,aAArC,CAAf;;;AAATxB;AAEN,qBAAKuE,IAAL,CAAU,OAAV,EAAmB;AACfC,wBAAM,EAAE,UADO;AAEfC,yBAAO,EAAER,GAFM;AAGfmB,0BAAQ,EAAE/F,QAAQ,CAACW,MAAD,CAHH;AAIf0E,0BAAQ,EAAE;AAJK,iBAAnB;iDAOO1E;;;;;;;;;AACV;AA7FL;AAAA;AAAA,WA+FU,yBAAa;;;;;;kDACR,KAAKiD;;;;;;;;;AACf;AAjGL;AAAA;AAAA,WAmGU,iBAAQf,MAAR,EAAwBsB,MAAxB,EAAmC;AAAA;;;;;;;;;;;;;;;;;+BAE7BtB;kDACC,wCAGA,qCAGA,oCAQA,6CAOA,iCAOA,sCAQA,yCAQA,mCAUA,yCAMA,gDAMA,+BAgBA,sCAYA,kCAmDA;;;;kDAhJM,KAAKmD,KAAL,CAAW,OAAX,EAAoB;AAAEb,wBAAM,EAAE;AAAV,iBAApB;;;kDAGA,KAAKa,KAAL,CAAW,OAAX,EAAoB;AAAEb,wBAAM,EAAE;AAAV,iBAApB;;;kDAIA,KAAKa,KAAL,CAAW,SAAX,EAAsB;AACzBb,wBAAM,EAAE,SADiB;AAEzB7D,yBAAO,EAAE6C,MAAM,CAAC7C,OAFS;AAGzB2E,qBAAG,EAAE9B,MAAM,CAAC3B;AAHa,iBAAtB;;;kDAOA,KAAKwD,KAAL,CAAW,OAAX,EAAoB;AACvBb,wBAAM,EAAE,yBADe;AAEvB7D,yBAAO,EAAE6C,MAAM,CAAC7C,OAFO;AAGvB2E,qBAAG,EAAE9B,MAAM,CAAC3B;AAHW,iBAApB;;;kDAOA,KAAKwD,KAAL,CAAW,OAAX,EAAoB;AACvBb,wBAAM,EAAE,aADe;AAEvB7D,yBAAO,EAAE6C,MAAM,CAAC7C,OAFO;AAGvB2E,qBAAG,EAAE9B,MAAM,CAAC3B;AAHW,iBAApB;;;kDAOA,KAAKwD,KAAL,CAAW,OAAX,EAAoB;AACvBb,wBAAM,EAAE,kBADe;AAEvB7D,yBAAO,EAAE6C,MAAM,CAAC7C,OAFO;AAGvB4E,0BAAQ,EAAE/B,MAAM,CAAC+B,QAHM;AAIvBD,qBAAG,EAAE9B,MAAM,CAAC3B;AAJW,iBAApB;;;kDAQA,KAAKwD,KAAL,CAAW,OAAX,EAAoB;AACvBb,wBAAM,EAAE,wBADe;AAEvBgB,qBAAG,EAAEhC,MAAM,CAACiC;AAFW,iBAApB,EAGJ,IAHI,EAGEC,KAHF,CAGQ,UAACzE,KAAD,EAAU;AACrB,yBAAOgB,UAAU,CAAC,iBAAD,EAAoBhB,KAApB,EAA2BuC,MAAM,CAACiC,iBAAlC,CAAjB;AACH,iBALM;;;qBAQHjC,MAAM,CAAC3B;;;;;kDACA,KAAKwD,KAAL,CAAW,OAAX,EAAoB;AACvBb,wBAAM,EAAE,sBADe;AAEvBc,qBAAG,EAAE9B,MAAM,CAAC3B,QAFW;AAGvB8D,yBAAO,EAAGnC,MAAM,CAACoC,mBAAP,GAA6B,MAA7B,GAAqC;AAHxB,iBAApB;;;sBAML,IAAI1E,KAAJ,CAAU,uCAAV;;;kDAGC,KAAKmE,KAAL,CAAW,OAAX,EAAoB;AACvBb,wBAAM,EAAE,0BADe;AAEvBqB,wBAAM,EAAErC,MAAM,CAACsC;AAFQ,iBAApB;;;kDAMA,KAAKT,KAAL,CAAW,OAAX,EAAoB;AACvBb,wBAAM,EAAE,2BADe;AAEvBqB,wBAAM,EAAErC,MAAM,CAACsC;AAFQ,iBAApB;;;sBAMHtC,MAAM,CAAC3B,QAAP,KAAoB;;;;;sBACd,IAAIX,KAAJ,CAAU,sDAAV;;;AAGJ6E,2BAAWjG,sBAAsB,CAAC0D,MAAM,CAACzD,WAAR;AACvCgG,wBAAQ,CAACxC,MAAT,GAAkB,OAAlB;AACAwC,wBAAQ,CAACvB,MAAT,GAAkB,UAAlB;;;AAGW,uBAAM,KAAKa,KAAL,CAAW,OAAX,EAAoBU,QAApB,EAA8B,IAA9B,CAAN;;;;;;;;kDAEA9D,UAAU,CAAC,MAAD,gBAAgBuB,MAAM,CAACzD,WAAvB;;;AAKfgG,4BAAWjG,sBAAsB,CAAC0D,MAAM,CAACzD,WAAR;AACvCgG,yBAAQ,CAACxC,MAAT,GAAkB,OAAlB;AACAwC,yBAAQ,CAACvB,MAAT,GAAkB,iBAAlB;;;AAGW,uBAAM,KAAKa,KAAL,CAAW,OAAX,EAAoBU,SAApB,EAA8B,IAA9B,CAAN;;;;;;;;kDAEA9D,UAAU,CAAC,aAAD,gBAAuBuB,MAAM,CAACzD,WAA9B;;;AAKfiG,uBAA4B;AAAExB,wBAAM,EAAE;AAAV;;AAElC,oBAAIhB,MAAM,CAACyC,MAAP,CAAcC,SAAlB,EAA6B;AACzBF,sBAAI,CAACE,SAAL,GAAiBtE,WAAW,CAAC4B,MAAM,CAACyC,MAAP,CAAcC,SAAf,CAA5B;AACH;;AAED,oBAAI1C,MAAM,CAACyC,MAAP,CAAcE,OAAlB,EAA2B;AACvBH,sBAAI,CAACG,OAAL,GAAevE,WAAW,CAAC4B,MAAM,CAACyC,MAAP,CAAcE,OAAf,CAA1B;AACH;;AAED,oBAAI3C,MAAM,CAACyC,MAAP,CAActF,OAAlB,EAA2B;AACvBqF,sBAAI,CAACrF,OAAL,GAAe6C,MAAM,CAACyC,MAAP,CAActF,OAA7B;AACH,kBAED;;;AACA,oBAAI6C,MAAM,CAACyC,MAAP,CAAcG,MAAd,IAAwB5C,MAAM,CAACyC,MAAP,CAAcG,MAAd,CAAqBC,MAArB,GAA8B,CAA1D,EAA6D;AACzD,sBAAI7C,MAAM,CAACyC,MAAP,CAAcG,MAAd,CAAqBC,MAArB,GAA8B,CAAlC,EAAqC;AACjCzG,0BAAM,CAAC4C,UAAP,CAAkB,yBAAlB,EAA6C9C,MAAM,CAACyC,MAAP,CAAcmE,qBAA3D,EAAkF;AAAEF,4BAAM,EAAE5C,MAAM,CAACyC,MAAP,CAAcG;AAAxB,qBAAlF;AACH;;AAED,sBAAI5C,MAAM,CAACyC,MAAP,CAAcG,MAAd,CAAqBC,MAArB,KAAgC,CAApC,EAAuC;AAC7BE,0BAD6B,GACpB/C,MAAM,CAACyC,MAAP,CAAcG,MAAd,CAAqB,CAArB,CADoB;;AAEnC,wBAAI,OAAOG,MAAP,KAAmB,QAAnB,IAA+BA,MAAM,CAACF,MAAP,KAAkB,EAArD,EAAyD;AACrDzG,4BAAM,CAAC4C,UAAP,CAAkB,0BAAlB,EAA8C9C,MAAM,CAACyC,MAAP,CAAcmE,qBAA5D,EAAmF;AAAEC,8BAAM,EAAEA;AAAV,uBAAnF;AACH;;AACDP,wBAAI,CAACO,MAAL,GAAcA,MAAd;AACH;AACJ;;;AAEwB,uBAAM,KAAKlB,KAAL,CAAW,MAAX,EAAmBW,IAAnB,CAAN;;;AAAnBQ;AAEN;AACIC,yBAAoC,IAExC;;AACSC,oBAAI;;;sBAAGA,CAAC,GAAGF,IAAI,CAACH;;;;;AACfM,sBAAMH,IAAI,CAACE,CAAD;;sBACZC,GAAG,CAACC,SAAJ,IAAiB;;;;;;;;sBACjBH,MAAM,CAACE,GAAG,CAACE,WAAL,CAAN,IAA2B;;;;;;AACb,uBAAM,KAAKC,QAAL,CAAcH,GAAG,CAACE,WAAlB,CAAN;;;AAARE;;AACN,oBAAIA,KAAJ,EAAW;AACPN,wBAAM,CAACE,GAAG,CAACE,WAAL,CAAN,GAA0BE,KAAK,CAACC,IAAhC;AACH;;;AAELL,mBAAG,CAACC,SAAJ,GAAgBH,MAAM,CAACE,GAAG,CAACE,WAAL,CAAtB;;;AAT6BH,iBAAC;;;;;kDAY3BF;;;sBAIH,KAAKvD,OAAL,CAAaI,IAAb,KAAsB;;;;;kDAAsB;;;+BACzC4D;;AAAY,uBAAM,KAAK5B,KAAL,CAAW,OAAX,EAAoB;AAAEb,wBAAM,EAAE;AAAV,iBAApB,CAAN;;;8CAAmD0C;;;;;;;kDAMvEC,OAAMC,OAAN,CAAaC,IAAb,CAAa,IAAb,EAAcnF,MAAd,EAAsBsB,MAAtB;;;;;;;;;AACV,KAhQL,CAkQI;AACA;AACA;AACA;;AArQJ;AAAA;AAAA,WAsQU,oBAAW8D,aAAX,EAAoDC,UAApD,EAA2EC,QAA3E,EAA8F;;;;;;;;;;AAGlF,uBAAM,KAAKC,WAAL,CAAiBH,aAAjB,CAAN;;;;+BACIC,UAAU,IAAI,IAAf,GAAuB,CAAvB,GAA0BA;+BAC3BC,QAAQ,IAAI,IAAb,GAAqB,QAArB,GAA+BA;AAJxChE;AACFgB,0BAAQ;AACR7D;AACA+G;AACAC;AACAC,wBAAM;;;AAGK,uBAAM,KAAKvC,KAAL,CAAW,SAAX,EAAsB7B,MAAtB,CAAN;;;AAATxD;kDAECA,MAAM,CAACS,GAAP,CAAW,UAACoH,EAAD,EAAY;AAC1B,mBAAC,iBAAD,EAAoB,IAApB,EAA0BC,OAA1B,CAAkC,UAAS7H,GAAT,EAAY;AAC1C,wBAAI4H,EAAE,CAAC5H,GAAD,CAAF,IAAW,EAAf,EAAmB;AAAE,6BAAO4H,EAAE,CAAC5H,GAAD,CAAT;AAAiB;AACzC,mBAFD;;AAGA,sBAAI4H,EAAE,CAACE,OAAH,IAAc,IAAd,IAAsBF,EAAE,CAACG,eAAH,IAAsB,IAAhD,EAAsD;AAClDH,sBAAE,CAACE,OAAH,GAAaF,EAAE,CAACG,eAAhB;AACH;;AACD,sBAAMC,IAAI,GAAG,MAAI,CAACC,SAAL,CAAeC,mBAAf,CAAmCN,EAAnC,CAAb;;AACA,sBAAIA,EAAE,CAACO,SAAP,EAAkB;AAAEH,wBAAI,CAACI,SAAL,GAAiBvG,QAAQ,CAAC+F,EAAE,CAACO,SAAJ,CAAzB;AAA0C;;AAC9D,yBAAOH,IAAP;AACH,iBAVM;;;;;;;;;AAWV;AA5RL;AAAA;AAAA,WA8RI,+BAAmB;AACf,aAAQ,KAAK/E,MAAL,KAAgBlB,aAAxB;AACH;AAhSL;;AAAA;AAAA,EAAuCnC,YAAvC","names":["hexlify","hexValue","isHexString","deepCopy","defineReadOnly","accessListify","fetchJson","showThrottleMessage","Logger","version","logger","BaseProvider","getTransactionPostData","transaction","result","key","value","type","gasLimit","gasPrice","maxFeePerGs","maxPriorityFeePerGas","nonce","map","set","address","storageKeys","join","getResult","status","message","error","Error","JSON","stringify","toLowerCase","indexOf","throttleRetry","getJsonResult","jsonrpc","code","data","checkLogTag","blockTag","parseInt","substring","defaultApiKey","checkError","method","errors","SERVER_ERROR","e","match","replace","throwError","CALL_EXCEPTION","body","responseText","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","EtherscanProvider","network","apiKey","checkNew","getBaseUrl","name","throwArgumentError","module","params","query","Object","keys","reduce","accum","baseUrl","apikey","post","url","getPostUrl","getUrl","payload","getPostData","procFunc","emit","action","request","provider","connection","throttleSlotInterval","throttleCallback","attempt","isCommunityResource","Promise","resolve","payloadStr","headers","response","fetch","tag","position","hex","signedTransaction","catch","boolean","includeTransactions","txhash","transactionHash","postData","args","filter","fromBlock","toBlock","topics","length","UNSUPPORTED_OPERATION","topic0","logs","blocks","i","log","blockHash","blockNumber","getBlock","block","hash","parseFloat","ethusd","_super","perform","call","addressOrName","startBlock","endBlock","resolveName","startblock","endblock","sort","tx","forEach","creates","contractAddress","item","formatter","transactionResponse","timeStamp","timestamp"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        logger.checkNew(new.target, EtherscanProvider);\n\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}