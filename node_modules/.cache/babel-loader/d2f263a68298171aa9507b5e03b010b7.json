{"ast":null,"code":"var _jsxFileName = \"/Users/michaelyoung/repos/slugsite/src/Wallet.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers'; // import styles from './Wallet.module.css'\n// import simple_token_abi from './Contracts/simple_token_abi.json'\n\nimport Interactions from './Interactions';\nimport token_abi from './contracts/abi.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Wallet = () => {\n  _s();\n\n  const contractAddress = \"0xEC716F18179974bb89062287747651085e122D1C\";\n  const [tokenName, setTokenName] = useState(\"Token\");\n  const [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n  const [defaultAccount, setDefaultAccount] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [balance, setBalance] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [contract, setContract] = useState(null);\n\n  const connectWalletHandler = () => {\n    if (window.ethereum && window.ethereum.isMetaMask) {\n      window.ethereum.request({\n        method: 'eth_requestAccounts'\n      }).then(result => {\n        accountChangedHandler(result[0]);\n        setConnButtonText('Wallet Connected');\n      }).catch(error => {\n        setErrorMessage(error.message);\n      });\n    } else {\n      console.log(\"Please install metamask\");\n      setErrorMessage(\"Please install metamask\");\n    }\n  };\n\n  const accountChangedHandler = newAddress => {\n    setDefaultAccount(newAddress);\n    updateEthers();\n  };\n\n  const updateEthers = () => {\n    let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n    let tempSigner = tempProvider.getSigner();\n    let tempContract = new ethers.Contract(contractAddress, token_abi, tempSigner);\n    setProvider(tempProvider);\n    setSigner(tempSigner);\n    setContract(tempContract);\n  };\n\n  useEffect(() => {\n    if (contract != null) {\n      updateBalance();\n      updateTokenName();\n    }\n  }, [contract]);\n\n  const updateBalance = async () => {\n    let balanceBigN = await contract.balanceOf(defaultAccount);\n    let balanceNumber = balanceBigN;\n    let tokenDecimals = await contract.decimals();\n    let tokenBalance = balanceNumber / Math.pow(10, 18);\n    setBalance(balanceNumber);\n  };\n\n  const updateTokenName = async () => {\n    let name = await contract.name();\n    setTokenName(name);\n  };\n\n  const chainChangedHandler = () => {\n    // reload the page to avoid any errors with chain change mid use of application\n    window.location.reload();\n  }; // listen for account changes\n\n\n  window.ethereum.on('accountsChanged', accountChangedHandler);\n  window.ethereum.on('chainChanged', chainChangedHandler);\n\n  function toFixed(x) {\n    if (Math.abs(x) < 1.0) {\n      var e = parseInt(x.toString().split('e-')[1]);\n\n      if (e) {\n        x *= Math.pow(10, e - 1);\n        x = '0.' + new Array(e).join('0') + x.toString().substring(2);\n      }\n    } else {\n      var e = parseInt(x.toString().split('+')[1]);\n\n      if (e > 20) {\n        e -= 20;\n        x /= Math.pow(10, e);\n        x += new Array(e + 1).join('0');\n      }\n    }\n\n    return x;\n  }\n\n  let props = {\n    contract: contract,\n    defaultAccount: defaultAccount\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      children: \"connect wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Address: \", defaultAccount]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [tokenName, \" Balance: \", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Interactions, {\n        contract: props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Wallet, \"BhInPNKnazv64igjncIfi+ghIko=\");\n\n_c = Wallet;\nexport default Wallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Wallet\");","map":{"version":3,"sources":["/Users/michaelyoung/repos/slugsite/src/Wallet.js"],"names":["React","useState","useEffect","ethers","Interactions","token_abi","Wallet","contractAddress","tokenName","setTokenName","connButtonText","setConnButtonText","defaultAccount","setDefaultAccount","errorMessage","setErrorMessage","balance","setBalance","provider","setProvider","signer","setSigner","contract","setContract","connectWalletHandler","window","ethereum","isMetaMask","request","method","then","result","accountChangedHandler","catch","error","message","console","log","newAddress","updateEthers","tempProvider","providers","Web3Provider","tempSigner","getSigner","tempContract","Contract","updateBalance","updateTokenName","balanceBigN","balanceOf","balanceNumber","tokenDecimals","decimals","tokenBalance","Math","pow","name","chainChangedHandler","location","reload","on","toFixed","x","abs","e","parseInt","toString","split","Array","join","substring","props"],"mappings":"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","sourcesContent":["\nimport {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\n// import styles from './Wallet.module.css'\n// import simple_token_abi from './Contracts/simple_token_abi.json'\nimport Interactions from './Interactions';\nimport token_abi from './contracts/abi.json'\n\nconst Wallet = () => {\n\n    const contractAddress = \"0xEC716F18179974bb89062287747651085e122D1C\";\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n    const [defaultAccount, setDefaultAccount] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [balance, setBalance] = useState(null);\n\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n    \n\n    const connectWalletHandler = () => {\n        if (window.ethereum && window.ethereum.isMetaMask){\n\n            window.ethereum.request({method: 'eth_requestAccounts'})\n            .then(result => {\n                accountChangedHandler(result[0]);\n                setConnButtonText('Wallet Connected');\n            })\n            .catch(error => {\n                setErrorMessage(error.message);\n            })\n\n        } else {\n            console.log(\"Please install metamask\");\n            setErrorMessage(\"Please install metamask\");\n        }\n    }\n\n    const accountChangedHandler = (newAddress) =>\n    {\n        setDefaultAccount(newAddress);\n        updateEthers();\n    }\n\n    const updateEthers = () => {\n        let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n        let tempSigner = tempProvider.getSigner();\n\n        let tempContract = new ethers.Contract(contractAddress, token_abi, tempSigner);\n\n        setProvider(tempProvider);\n        setSigner(tempSigner);\n        setContract(tempContract);\n    }\n\n    useEffect(() => {\n        if (contract != null){\n            updateBalance();\n            updateTokenName();\n        }\n    }, [contract])\n\n    const updateBalance = async () => {\n        let balanceBigN = await contract.balanceOf(defaultAccount);\n\n        let balanceNumber = balanceBigN;\n\n        let tokenDecimals = await contract.decimals();\n\n\t\tlet tokenBalance = balanceNumber / Math.pow(10, 18);\n\n        setBalance(balanceNumber);\n    }\n\n    const updateTokenName = async () => {\n        let name = await contract.name();\n\n        setTokenName(name);\n    }\n    const chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n\n\t// listen for account changes\n\twindow.ethereum.on('accountsChanged', accountChangedHandler);\n\n\twindow.ethereum.on('chainChanged', chainChangedHandler);\n\n    function toFixed(x) {\n        if (Math.abs(x) < 1.0) {\n           var e = parseInt(x.toString().split('e-')[1]);\n           if (e) {\n              x *= Math.pow(10, e - 1);\n              x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\n           }\n        } else {\n           var e = parseInt(x.toString().split('+')[1]);\n           if (e > 20) {\n              e -= 20;\n              x /= Math.pow(10, e);\n              x += (new Array(e + 1)).join('0');\n           }\n        }\n        return x;\n     }\n\n     let props = {\n         contract: contract,\n         defaultAccount: defaultAccount\n     }\n\n    return (\n    <div>\n        <button onClick={connectWalletHandler}>connect wallet</button>\n        <div>\n            <div>\n                <h3>Address: {defaultAccount}</h3>\n            </div>\n            <div>\n                <h3>{tokenName} Balance: {balance}</h3>\n            </div>\n\n            <Interactions contract={props}/>\n            \n            <p>{errorMessage}</p>\n        </div>\n    </div>\n\n    );\n}\n\nexport default Wallet;"]},"metadata":{},"sourceType":"module"}