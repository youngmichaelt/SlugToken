{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var Formatter = /*#__PURE__*/function () {\n  function Formatter() {\n    _classCallCheck(this, Formatter);\n\n    logger.checkNew(this instanceof Formatter ? this.constructor : void 0, Formatter);\n    this.formats = this.getDefaultFormats();\n  }\n\n  _createClass(Formatter, [{\n    key: \"getDefaultFormats\",\n    value: function getDefaultFormats() {\n      var _this = this;\n\n      var formats = {};\n      var address = this.address.bind(this);\n      var bigNumber = this.bigNumber.bind(this);\n      var blockTag = this.blockTag.bind(this);\n      var data = this.data.bind(this);\n      var hash = this.hash.bind(this);\n      var hex = this.hex.bind(this);\n      var number = this.number.bind(this);\n      var type = this.type.bind(this);\n\n      var strictData = function strictData(v) {\n        return _this.data(v, true);\n      };\n\n      formats.transaction = {\n        hash: hash,\n        type: type,\n        accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        blockHash: Formatter.allowNull(hash, null),\n        blockNumber: Formatter.allowNull(number, null),\n        transactionIndex: Formatter.allowNull(number, null),\n        confirmations: Formatter.allowNull(number, null),\n        from: address,\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n        // must be set\n        gasPrice: Formatter.allowNull(bigNumber),\n        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n        maxFeePerGas: Formatter.allowNull(bigNumber),\n        gasLimit: bigNumber,\n        to: Formatter.allowNull(address, null),\n        value: bigNumber,\n        nonce: number,\n        data: data,\n        r: Formatter.allowNull(this.uint256),\n        s: Formatter.allowNull(this.uint256),\n        v: Formatter.allowNull(number),\n        creates: Formatter.allowNull(address, null),\n        raw: Formatter.allowNull(data)\n      };\n      formats.transactionRequest = {\n        from: Formatter.allowNull(address),\n        nonce: Formatter.allowNull(number),\n        gasLimit: Formatter.allowNull(bigNumber),\n        gasPrice: Formatter.allowNull(bigNumber),\n        maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n        maxFeePerGas: Formatter.allowNull(bigNumber),\n        to: Formatter.allowNull(address),\n        value: Formatter.allowNull(bigNumber),\n        data: Formatter.allowNull(strictData),\n        type: Formatter.allowNull(number),\n        accessList: Formatter.allowNull(this.accessList.bind(this), null)\n      };\n      formats.receiptLog = {\n        transactionIndex: number,\n        blockNumber: number,\n        transactionHash: hash,\n        address: address,\n        topics: Formatter.arrayOf(hash),\n        data: data,\n        logIndex: number,\n        blockHash: hash\n      };\n      formats.receipt = {\n        to: Formatter.allowNull(this.address, null),\n        from: Formatter.allowNull(this.address, null),\n        contractAddress: Formatter.allowNull(address, null),\n        transactionIndex: number,\n        // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n        root: Formatter.allowNull(hex),\n        gasUsed: bigNumber,\n        logsBloom: Formatter.allowNull(data),\n        blockHash: hash,\n        transactionHash: hash,\n        logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n        blockNumber: number,\n        confirmations: Formatter.allowNull(number, null),\n        cumulativeGasUsed: bigNumber,\n        effectiveGasPrice: Formatter.allowNull(bigNumber),\n        status: Formatter.allowNull(number),\n        type: type\n      };\n      formats.block = {\n        hash: Formatter.allowNull(hash),\n        parentHash: hash,\n        number: number,\n        timestamp: number,\n        nonce: Formatter.allowNull(hex),\n        difficulty: this.difficulty.bind(this),\n        gasLimit: bigNumber,\n        gasUsed: bigNumber,\n        miner: Formatter.allowNull(address),\n        extraData: data,\n        transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n        baseFeePerGas: Formatter.allowNull(bigNumber)\n      };\n      formats.blockWithTransactions = shallowCopy(formats.block);\n      formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n      formats.filter = {\n        fromBlock: Formatter.allowNull(blockTag, undefined),\n        toBlock: Formatter.allowNull(blockTag, undefined),\n        blockHash: Formatter.allowNull(hash, undefined),\n        address: Formatter.allowNull(address, undefined),\n        topics: Formatter.allowNull(this.topics.bind(this), undefined)\n      };\n      formats.filterLog = {\n        blockNumber: Formatter.allowNull(number),\n        blockHash: Formatter.allowNull(hash),\n        transactionIndex: number,\n        removed: Formatter.allowNull(this.boolean.bind(this)),\n        address: address,\n        data: Formatter.allowFalsish(data, \"0x\"),\n        topics: Formatter.arrayOf(hash),\n        transactionHash: hash,\n        logIndex: number\n      };\n      return formats;\n    }\n  }, {\n    key: \"accessList\",\n    value: function accessList(_accessList) {\n      return accessListify(_accessList || []);\n    } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n\n  }, {\n    key: \"number\",\n    value: function number(_number) {\n      if (_number === \"0x\") {\n        return 0;\n      }\n\n      return BigNumber.from(_number).toNumber();\n    }\n  }, {\n    key: \"type\",\n    value: function type(number) {\n      if (number === \"0x\" || number == null) {\n        return 0;\n      }\n\n      return BigNumber.from(number).toNumber();\n    } // Strict! Used on input.\n\n  }, {\n    key: \"bigNumber\",\n    value: function bigNumber(value) {\n      return BigNumber.from(value);\n    } // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n  }, {\n    key: \"boolean\",\n    value: function boolean(value) {\n      if (typeof value === \"boolean\") {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        value = value.toLowerCase();\n\n        if (value === \"true\") {\n          return true;\n        }\n\n        if (value === \"false\") {\n          return false;\n        }\n      }\n\n      throw new Error(\"invalid boolean - \" + value);\n    }\n  }, {\n    key: \"hex\",\n    value: function hex(value, strict) {\n      if (typeof value === \"string\") {\n        if (!strict && value.substring(0, 2) !== \"0x\") {\n          value = \"0x\" + value;\n        }\n\n        if (isHexString(value)) {\n          return value.toLowerCase();\n        }\n      }\n\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n  }, {\n    key: \"data\",\n    value: function data(value, strict) {\n      var result = this.hex(value, strict);\n\n      if (result.length % 2 !== 0) {\n        throw new Error(\"invalid data; odd-length - \" + value);\n      }\n\n      return result;\n    } // Requires an address\n    // Strict! Used on input.\n\n  }, {\n    key: \"address\",\n    value: function address(value) {\n      return getAddress(value);\n    }\n  }, {\n    key: \"callAddress\",\n    value: function callAddress(value) {\n      if (!isHexString(value, 32)) {\n        return null;\n      }\n\n      var address = getAddress(hexDataSlice(value, 12));\n      return address === AddressZero ? null : address;\n    }\n  }, {\n    key: \"contractAddress\",\n    value: function contractAddress(value) {\n      return getContractAddress(value);\n    } // Strict! Used on input.\n\n  }, {\n    key: \"blockTag\",\n    value: function blockTag(_blockTag) {\n      if (_blockTag == null) {\n        return \"latest\";\n      }\n\n      if (_blockTag === \"earliest\") {\n        return \"0x0\";\n      }\n\n      if (_blockTag === \"latest\" || _blockTag === \"pending\") {\n        return _blockTag;\n      }\n\n      if (typeof _blockTag === \"number\" || isHexString(_blockTag)) {\n        return hexValue(_blockTag);\n      }\n\n      throw new Error(\"invalid blockTag\");\n    } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n  }, {\n    key: \"hash\",\n    value: function hash(value, strict) {\n      var result = this.hex(value, strict);\n\n      if (hexDataLength(result) !== 32) {\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n      }\n\n      return result;\n    } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n  }, {\n    key: \"difficulty\",\n    value: function difficulty(value) {\n      if (value == null) {\n        return null;\n      }\n\n      var v = BigNumber.from(value);\n\n      try {\n        return v.toNumber();\n      } catch (error) {}\n\n      return null;\n    }\n  }, {\n    key: \"uint256\",\n    value: function uint256(value) {\n      if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n      }\n\n      return hexZeroPad(value, 32);\n    }\n  }, {\n    key: \"_block\",\n    value: function _block(value, format) {\n      if (value.author != null && value.miner == null) {\n        value.miner = value.author;\n      } // The difficulty may need to come from _difficulty in recursed blocks\n\n\n      var difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n      var result = Formatter.check(format, value);\n      result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n      return result;\n    }\n  }, {\n    key: \"block\",\n    value: function block(value) {\n      return this._block(value, this.formats.block);\n    }\n  }, {\n    key: \"blockWithTransactions\",\n    value: function blockWithTransactions(value) {\n      return this._block(value, this.formats.blockWithTransactions);\n    } // Strict! Used on input.\n\n  }, {\n    key: \"transactionRequest\",\n    value: function transactionRequest(value) {\n      return Formatter.check(this.formats.transactionRequest, value);\n    }\n  }, {\n    key: \"transactionResponse\",\n    value: function transactionResponse(transaction) {\n      // Rename gas to gasLimit\n      if (transaction.gas != null && transaction.gasLimit == null) {\n        transaction.gasLimit = transaction.gas;\n      } // Some clients (TestRPC) do strange things like return 0x0 for the\n      // 0 address; correct this to be a real address\n\n\n      if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n        transaction.to = \"0x0000000000000000000000000000000000000000\";\n      } // Rename input to data\n\n\n      if (transaction.input != null && transaction.data == null) {\n        transaction.data = transaction.input;\n      } // If to and creates are empty, populate the creates from the transaction\n\n\n      if (transaction.to == null && transaction.creates == null) {\n        transaction.creates = this.contractAddress(transaction);\n      }\n\n      if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n        transaction.accessList = [];\n      }\n\n      var result = Formatter.check(this.formats.transaction, transaction);\n\n      if (transaction.chainId != null) {\n        var chainId = transaction.chainId;\n\n        if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n      } else {\n        var _chainId = transaction.networkId; // geth-etc returns chainId\n\n        if (_chainId == null && result.v == null) {\n          _chainId = transaction.chainId;\n        }\n\n        if (isHexString(_chainId)) {\n          _chainId = BigNumber.from(_chainId).toNumber();\n        }\n\n        if (typeof _chainId !== \"number\" && result.v != null) {\n          _chainId = (result.v - 35) / 2;\n\n          if (_chainId < 0) {\n            _chainId = 0;\n          }\n\n          _chainId = parseInt(_chainId);\n        }\n\n        if (typeof _chainId !== \"number\") {\n          _chainId = 0;\n        }\n\n        result.chainId = _chainId;\n      } // 0x0000... should actually be null\n\n\n      if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n        result.blockHash = null;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(value) {\n      return parseTransaction(value);\n    }\n  }, {\n    key: \"receiptLog\",\n    value: function receiptLog(value) {\n      return Formatter.check(this.formats.receiptLog, value);\n    }\n  }, {\n    key: \"receipt\",\n    value: function receipt(value) {\n      var result = Formatter.check(this.formats.receipt, value); // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n\n      if (result.root != null) {\n        if (result.root.length <= 4) {\n          // Could be 0x00, 0x0, 0x01 or 0x1\n          var _value = BigNumber.from(result.root).toNumber();\n\n          if (_value === 0 || _value === 1) {\n            // Make sure if both are specified, they match\n            if (result.status != null && result.status !== _value) {\n              logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n                root: result.root,\n                status: result.status\n              });\n            }\n\n            result.status = _value;\n            delete result.root;\n          } else {\n            logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n          }\n        } else if (result.root.length !== 66) {\n          // Must be a valid bytes32\n          logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n        }\n      }\n\n      if (result.status != null) {\n        result.byzantium = true;\n      }\n\n      return result;\n    }\n  }, {\n    key: \"topics\",\n    value: function topics(value) {\n      var _this2 = this;\n\n      if (Array.isArray(value)) {\n        return value.map(function (v) {\n          return _this2.topics(v);\n        });\n      } else if (value != null) {\n        return this.hash(value, true);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"filter\",\n    value: function filter(value) {\n      return Formatter.check(this.formats.filter, value);\n    }\n  }, {\n    key: \"filterLog\",\n    value: function filterLog(value) {\n      return Formatter.check(this.formats.filterLog, value);\n    }\n  }], [{\n    key: \"check\",\n    value: function check(format, object) {\n      var result = {};\n\n      for (var key in format) {\n        try {\n          var value = format[key](object[key]);\n\n          if (value !== undefined) {\n            result[key] = value;\n          }\n        } catch (error) {\n          error.checkKey = key;\n          error.checkValue = object[key];\n          throw error;\n        }\n      }\n\n      return result;\n    } // if value is null-ish, nullValue is returned\n\n  }, {\n    key: \"allowNull\",\n    value: function allowNull(format, nullValue) {\n      return function (value) {\n        if (value == null) {\n          return nullValue;\n        }\n\n        return format(value);\n      };\n    } // If value is false-ish, replaceValue is returned\n\n  }, {\n    key: \"allowFalsish\",\n    value: function allowFalsish(format, replaceValue) {\n      return function (value) {\n        if (!value) {\n          return replaceValue;\n        }\n\n        return format(value);\n      };\n    } // Requires an Array satisfying check\n\n  }, {\n    key: \"arrayOf\",\n    value: function arrayOf(format) {\n      return function (array) {\n        if (!Array.isArray(array)) {\n          throw new Error(\"not an array\");\n        }\n\n        var result = [];\n        array.forEach(function (value) {\n          result.push(format(value));\n        });\n        return result;\n      };\n    }\n  }]);\n\n  return Formatter;\n}();\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n} // Show the throttle message only once\n\nvar throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"mappings":"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","names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","accessListify","parse","parseTransaction","Logger","version","logger","Formatter","checkNew","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","strictData","v","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","value","nonce","r","uint256","s","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","Error","strict","substring","throwArgumentError","result","length","error","format","author","_difficulty","check","_block","gas","isZero","input","chainId","networkId","parseInt","replace","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/providers/src.ts/formatter.ts"],"sourcesContent":["\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: Formatter.allowNull(address),\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n"]},"metadata":{},"sourceType":"module"}