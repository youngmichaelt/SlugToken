{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { wordlists } from \"@ethersproject/wordlists\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nvar N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\"); // \"Bitcoin seed\"\n\nvar MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\nvar HardenedBit = 0x80000000; // Returns a byte with the MSB bits set\n\nfunction getUpperMask(bits) {\n  return (1 << bits) - 1 << 8 - bits;\n} // Returns a byte with the LSB bits set\n\n\nfunction getLowerMask(bits) {\n  return (1 << bits) - 1;\n}\n\nfunction bytes32(value) {\n  return hexZeroPad(hexlify(value), 32);\n}\n\nfunction base58check(data) {\n  return Base58.encode(concat([data, hexDataSlice(sha256(sha256(data)), 0, 4)]));\n}\n\nfunction getWordlist(wordlist) {\n  if (wordlist == null) {\n    return wordlists[\"en\"];\n  }\n\n  if (typeof wordlist === \"string\") {\n    var words = wordlists[wordlist];\n\n    if (words == null) {\n      logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n    }\n\n    return words;\n  }\n\n  return wordlist;\n}\n\nvar _constructorGuard = {};\nexport var defaultPath = \"m/44'/60'/0'/0/0\";\n;\nexport var HDNode = /*#__PURE__*/function () {\n  /**\n   *  This constructor should not be called directly.\n   *\n   *  Please use:\n   *   - fromMnemonic\n   *   - fromSeed\n   */\n  function HDNode(constructorGuard, privateKey, publicKey, parentFingerprint, chainCode, index, depth, mnemonicOrPath) {\n    _classCallCheck(this, HDNode);\n\n    logger.checkNew(this instanceof HDNode ? this.constructor : void 0, HDNode);\n    /* istanbul ignore if */\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"HDNode constructor cannot be called directly\");\n    }\n\n    if (privateKey) {\n      var signingKey = new SigningKey(privateKey);\n      defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n      defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n    } else {\n      defineReadOnly(this, \"privateKey\", null);\n      defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n    }\n\n    defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n    defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n    defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n    defineReadOnly(this, \"chainCode\", chainCode);\n    defineReadOnly(this, \"index\", index);\n    defineReadOnly(this, \"depth\", depth);\n\n    if (mnemonicOrPath == null) {\n      // From a source that does not preserve the path (e.g. extended keys)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", null);\n    } else if (typeof mnemonicOrPath === \"string\") {\n      // From a source that does not preserve the mnemonic (e.g. neutered)\n      defineReadOnly(this, \"mnemonic\", null);\n      defineReadOnly(this, \"path\", mnemonicOrPath);\n    } else {\n      // From a fully qualified source\n      defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n      defineReadOnly(this, \"path\", mnemonicOrPath.path);\n    }\n  }\n\n  _createClass(HDNode, [{\n    key: \"extendedKey\",\n    get: function get() {\n      // We only support the mainnet values for now, but if anyone needs\n      // testnet values, let me know. I believe current sentiment is that\n      // we should always use mainnet, and use BIP-44 to derive the network\n      //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n      //   - Testnet: public=0x043587CF, private=0x04358394\n      if (this.depth >= 256) {\n        throw new Error(\"Depth too large!\");\n      }\n\n      return base58check(concat([this.privateKey != null ? \"0x0488ADE4\" : \"0x0488B21E\", hexlify(this.depth), this.parentFingerprint, hexZeroPad(hexlify(this.index), 4), this.chainCode, this.privateKey != null ? concat([\"0x00\", this.privateKey]) : this.publicKey]));\n    }\n  }, {\n    key: \"neuter\",\n    value: function neuter() {\n      return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n  }, {\n    key: \"_derive\",\n    value: function _derive(index) {\n      if (index > 0xffffffff) {\n        throw new Error(\"invalid index - \" + String(index));\n      } // Base path\n\n\n      var path = this.path;\n\n      if (path) {\n        path += \"/\" + (index & ~HardenedBit);\n      }\n\n      var data = new Uint8Array(37);\n\n      if (index & HardenedBit) {\n        if (!this.privateKey) {\n          throw new Error(\"cannot derive child of neutered node\");\n        } // Data = 0x00 || ser_256(k_par)\n\n\n        data.set(arrayify(this.privateKey), 1); // Hardened path\n\n        if (path) {\n          path += \"'\";\n        }\n      } else {\n        // Data = ser_p(point(k_par))\n        data.set(arrayify(this.publicKey));\n      } // Data += ser_32(i)\n\n\n      for (var i = 24; i >= 0; i -= 8) {\n        data[33 + (i >> 3)] = index >> 24 - i & 0xff;\n      }\n\n      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n      var IL = I.slice(0, 32);\n      var IR = I.slice(32); // The private key\n\n      var ki = null; // The public key\n\n      var Ki = null;\n\n      if (this.privateKey) {\n        ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n      } else {\n        var ek = new SigningKey(hexlify(IL));\n        Ki = ek._addPoint(this.publicKey);\n      }\n\n      var mnemonicOrPath = path;\n      var srcMnemonic = this.mnemonic;\n\n      if (srcMnemonic) {\n        mnemonicOrPath = Object.freeze({\n          phrase: srcMnemonic.phrase,\n          path: path,\n          locale: srcMnemonic.locale || \"en\"\n        });\n      }\n\n      return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n  }, {\n    key: \"derivePath\",\n    value: function derivePath(path) {\n      var components = path.split(\"/\");\n\n      if (components.length === 0 || components[0] === \"m\" && this.depth !== 0) {\n        throw new Error(\"invalid path - \" + path);\n      }\n\n      if (components[0] === \"m\") {\n        components.shift();\n      }\n\n      var result = this;\n\n      for (var i = 0; i < components.length; i++) {\n        var component = components[i];\n\n        if (component.match(/^[0-9]+'$/)) {\n          var index = parseInt(component.substring(0, component.length - 1));\n\n          if (index >= HardenedBit) {\n            throw new Error(\"invalid path index - \" + component);\n          }\n\n          result = result._derive(HardenedBit + index);\n        } else if (component.match(/^[0-9]+$/)) {\n          var _index = parseInt(component);\n\n          if (_index >= HardenedBit) {\n            throw new Error(\"invalid path index - \" + component);\n          }\n\n          result = result._derive(_index);\n        } else {\n          throw new Error(\"invalid path component - \" + component);\n        }\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"_fromSeed\",\n    value: function _fromSeed(seed, mnemonic) {\n      var seedArray = arrayify(seed);\n\n      if (seedArray.length < 16 || seedArray.length > 64) {\n        throw new Error(\"invalid seed\");\n      }\n\n      var I = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n      return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n  }, {\n    key: \"fromMnemonic\",\n    value: function fromMnemonic(mnemonic, password, wordlist) {\n      // If a locale name was passed in, find the associated wordlist\n      wordlist = getWordlist(wordlist); // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n\n      mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n      return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n        phrase: mnemonic,\n        path: \"m\",\n        locale: wordlist.locale\n      });\n    }\n  }, {\n    key: \"fromSeed\",\n    value: function fromSeed(seed) {\n      return HDNode._fromSeed(seed, null);\n    }\n  }, {\n    key: \"fromExtendedKey\",\n    value: function fromExtendedKey(extendedKey) {\n      var bytes = Base58.decode(extendedKey);\n\n      if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n        logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n      }\n\n      var depth = bytes[4];\n      var parentFingerprint = hexlify(bytes.slice(5, 9));\n      var index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n      var chainCode = hexlify(bytes.slice(13, 45));\n      var key = bytes.slice(45, 78);\n\n      switch (hexlify(bytes.slice(0, 4))) {\n        // Public Key\n        case \"0x0488b21e\":\n        case \"0x043587cf\":\n          return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n        // Private Key\n\n        case \"0x0488ade4\":\n        case \"0x04358394 \":\n          if (key[0] !== 0) {\n            break;\n          }\n\n          return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n      }\n\n      return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n  }]);\n\n  return HDNode;\n}();\nexport function mnemonicToSeed(mnemonic, password) {\n  if (!password) {\n    password = \"\";\n  }\n\n  var salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n  return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\nexport function mnemonicToEntropy(mnemonic, wordlist) {\n  wordlist = getWordlist(wordlist);\n  logger.checkNormalize();\n  var words = wordlist.split(mnemonic);\n\n  if (words.length % 3 !== 0) {\n    throw new Error(\"invalid mnemonic\");\n  }\n\n  var entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n  var offset = 0;\n\n  for (var i = 0; i < words.length; i++) {\n    var index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n\n    if (index === -1) {\n      throw new Error(\"invalid mnemonic\");\n    }\n\n    for (var bit = 0; bit < 11; bit++) {\n      if (index & 1 << 10 - bit) {\n        entropy[offset >> 3] |= 1 << 7 - offset % 8;\n      }\n\n      offset++;\n    }\n  }\n\n  var entropyBits = 32 * words.length / 3;\n  var checksumBits = words.length / 3;\n  var checksumMask = getUpperMask(checksumBits);\n  var checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n  if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n    throw new Error(\"invalid checksum\");\n  }\n\n  return hexlify(entropy.slice(0, entropyBits / 8));\n}\nexport function entropyToMnemonic(entropy, wordlist) {\n  wordlist = getWordlist(wordlist);\n  entropy = arrayify(entropy);\n\n  if (entropy.length % 4 !== 0 || entropy.length < 16 || entropy.length > 32) {\n    throw new Error(\"invalid entropy\");\n  }\n\n  var indices = [0];\n  var remainingBits = 11;\n\n  for (var i = 0; i < entropy.length; i++) {\n    // Consume the whole byte (with still more to go)\n    if (remainingBits > 8) {\n      indices[indices.length - 1] <<= 8;\n      indices[indices.length - 1] |= entropy[i];\n      remainingBits -= 8; // This byte will complete an 11-bit index\n    } else {\n      indices[indices.length - 1] <<= remainingBits;\n      indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits; // Start the next word\n\n      indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n      remainingBits += 3;\n    }\n  } // Compute the checksum bits\n\n\n  var checksumBits = entropy.length / 4;\n  var checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits); // Shift the checksum into the word indices\n\n  indices[indices.length - 1] <<= checksumBits;\n  indices[indices.length - 1] |= checksum >> 8 - checksumBits;\n  return wordlist.join(indices.map(function (index) {\n    return wordlist.getWord(index);\n  }));\n}\nexport function isValidMnemonic(mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist);\n    return true;\n  } catch (error) {}\n\n  return false;\n}\nexport function getAccountPath(index) {\n  if (typeof index !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n    logger.throwArgumentError(\"invalid account index\", \"index\", index);\n  }\n\n  return \"m/44'/60'/\".concat(index, \"'/0/0\");\n}","map":{"version":3,"mappings":"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","names":["Base58","arrayify","concat","hexDataSlice","hexZeroPad","hexlify","BigNumber","toUtf8Bytes","UnicodeNormalizationForm","pbkdf2","defineReadOnly","SigningKey","computeHmac","ripemd160","sha256","SupportedAlgorithm","computeAddress","wordlists","Logger","version","logger","N","from","MasterSecret","HardenedBit","getUpperMask","bits","getLowerMask","bytes32","value","base58check","data","encode","getWordlist","wordlist","words","throwArgumentError","_constructorGuard","defaultPath","HDNode","constructorGuard","privateKey","publicKey","parentFingerprint","chainCode","index","depth","mnemonicOrPath","checkNew","Error","signingKey","compressedPublicKey","path","String","Uint8Array","set","i","I","sha512","IL","slice","IR","ki","Ki","add","mod","ek","_addPoint","srcMnemonic","mnemonic","Object","freeze","phrase","locale","fingerprint","components","split","length","shift","result","component","match","parseInt","substring","_derive","seed","seedArray","password","entropyToMnemonic","mnemonicToEntropy","_fromSeed","mnemonicToSeed","extendedKey","bytes","decode","key","salt","NFKD","checkNormalize","entropy","Math","ceil","offset","getWordIndex","normalize","bit","entropyBits","checksumBits","checksumMask","checksum","indices","remainingBits","push","join","map","getWord","isValidMnemonic","error","getAccountPath"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/hdnode/src.ts/index.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki\n// See: https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki\n\n\nimport { ExternallyOwnedAccount } from \"@ethersproject/abstract-signer\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { arrayify, BytesLike, concat, hexDataSlice, hexZeroPad, hexlify } from \"@ethersproject/bytes\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { toUtf8Bytes, UnicodeNormalizationForm } from \"@ethersproject/strings\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { SigningKey } from \"@ethersproject/signing-key\";\nimport { computeHmac, ripemd160, sha256, SupportedAlgorithm } from \"@ethersproject/sha2\";\nimport { computeAddress } from \"@ethersproject/transactions\";\nimport { Wordlist, wordlists } from \"@ethersproject/wordlists\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nconst N = BigNumber.from(\"0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\");\n\n\n// \"Bitcoin seed\"\nconst MasterSecret = toUtf8Bytes(\"Bitcoin seed\");\n\nconst HardenedBit = 0x80000000;\n\n// Returns a byte with the MSB bits set\nfunction getUpperMask(bits: number): number {\n   return ((1 << bits) - 1) << (8 - bits);\n}\n\n// Returns a byte with the LSB bits set\nfunction getLowerMask(bits: number): number {\n   return (1 << bits) - 1;\n}\n\nfunction bytes32(value: BigNumber | Uint8Array): string {\n    return hexZeroPad(hexlify(value), 32);\n}\n\nfunction base58check(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nfunction getWordlist(wordlist: string | Wordlist): Wordlist {\n    if (wordlist == null) {\n        return wordlists[\"en\"];\n    }\n\n    if (typeof(wordlist) === \"string\") {\n        const words = wordlists[wordlist];\n        if (words == null) {\n            logger.throwArgumentError(\"unknown locale\", \"wordlist\", wordlist);\n        }\n        return words;\n    }\n\n    return wordlist;\n}\n\nconst _constructorGuard: any = {};\n\nexport const defaultPath = \"m/44'/60'/0'/0/0\";\n\nexport interface Mnemonic {\n    readonly phrase: string;\n    readonly path: string;\n    readonly locale: string;\n};\n\nexport class HDNode implements ExternallyOwnedAccount {\n    readonly privateKey: string;\n    readonly publicKey: string;\n\n    readonly fingerprint: string;\n    readonly parentFingerprint: string;\n\n    readonly address: string;\n\n    readonly mnemonic?: Mnemonic;\n    readonly path: string;\n\n    readonly chainCode: string;\n\n    readonly index: number;\n    readonly depth: number;\n\n    /**\n     *  This constructor should not be called directly.\n     *\n     *  Please use:\n     *   - fromMnemonic\n     *   - fromSeed\n     */\n    constructor(constructorGuard: any, privateKey: string, publicKey: string, parentFingerprint: string, chainCode: string, index: number, depth: number, mnemonicOrPath: Mnemonic | string) {\n        logger.checkNew(new.target, HDNode);\n\n        /* istanbul ignore if */\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"HDNode constructor cannot be called directly\");\n        }\n\n        if (privateKey) {\n            const signingKey = new SigningKey(privateKey);\n            defineReadOnly(this, \"privateKey\", signingKey.privateKey);\n            defineReadOnly(this, \"publicKey\", signingKey.compressedPublicKey);\n        } else {\n            defineReadOnly(this, \"privateKey\", null);\n            defineReadOnly(this, \"publicKey\", hexlify(publicKey));\n        }\n\n        defineReadOnly(this, \"parentFingerprint\", parentFingerprint);\n        defineReadOnly(this, \"fingerprint\", hexDataSlice(ripemd160(sha256(this.publicKey)), 0, 4));\n\n        defineReadOnly(this, \"address\", computeAddress(this.publicKey));\n\n        defineReadOnly(this, \"chainCode\", chainCode);\n\n        defineReadOnly(this, \"index\", index);\n        defineReadOnly(this, \"depth\", depth);\n\n        if (mnemonicOrPath == null) {\n            // From a source that does not preserve the path (e.g. extended keys)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", null);\n\n        } else if (typeof(mnemonicOrPath) === \"string\") {\n            // From a source that does not preserve the mnemonic (e.g. neutered)\n            defineReadOnly(this, \"mnemonic\", null);\n            defineReadOnly(this, \"path\", mnemonicOrPath);\n\n        } else {\n            // From a fully qualified source\n            defineReadOnly(this, \"mnemonic\", mnemonicOrPath);\n            defineReadOnly(this, \"path\", mnemonicOrPath.path);\n        }\n    }\n\n    get extendedKey(): string {\n        // We only support the mainnet values for now, but if anyone needs\n        // testnet values, let me know. I believe current sentiment is that\n        // we should always use mainnet, and use BIP-44 to derive the network\n        //   - Mainnet: public=0x0488B21E, private=0x0488ADE4\n        //   - Testnet: public=0x043587CF, private=0x04358394\n\n        if (this.depth >= 256) { throw new Error(\"Depth too large!\"); }\n\n        return base58check(concat([\n            ((this.privateKey != null) ? \"0x0488ADE4\": \"0x0488B21E\"),\n            hexlify(this.depth),\n            this.parentFingerprint,\n            hexZeroPad(hexlify(this.index), 4),\n            this.chainCode,\n            ((this.privateKey != null) ? concat([ \"0x00\", this.privateKey ]): this.publicKey),\n        ]));\n    }\n\n    neuter(): HDNode {\n        return new HDNode(_constructorGuard, null, this.publicKey, this.parentFingerprint, this.chainCode, this.index, this.depth, this.path);\n    }\n\n    private _derive(index: number): HDNode {\n        if (index > 0xffffffff) { throw new Error(\"invalid index - \" + String(index)); }\n\n        // Base path\n        let path = this.path;\n        if (path) { path += \"/\" + (index & ~HardenedBit); }\n\n        const data = new Uint8Array(37);\n\n        if (index & HardenedBit) {\n            if (!this.privateKey) {\n                throw new Error(\"cannot derive child of neutered node\");\n            }\n\n            // Data = 0x00 || ser_256(k_par)\n            data.set(arrayify(this.privateKey), 1);\n\n            // Hardened path\n            if (path) { path += \"'\"; }\n\n        } else {\n            // Data = ser_p(point(k_par))\n            data.set(arrayify(this.publicKey));\n        }\n\n        // Data += ser_32(i)\n        for (let i = 24; i >= 0; i -= 8) { data[33 + (i >> 3)] = ((index >> (24 - i)) & 0xff); }\n\n        const I = arrayify(computeHmac(SupportedAlgorithm.sha512, this.chainCode, data));\n        const IL = I.slice(0, 32);\n        const IR = I.slice(32);\n\n        // The private key\n        let ki: string = null\n\n        // The public key\n        let Ki: string = null;\n\n        if (this.privateKey) {\n            ki = bytes32(BigNumber.from(IL).add(this.privateKey).mod(N));\n        } else {\n            const ek = new SigningKey(hexlify(IL));\n            Ki = ek._addPoint(this.publicKey);\n        }\n\n        let mnemonicOrPath: Mnemonic | string = path;\n\n        const srcMnemonic =  this.mnemonic;\n        if (srcMnemonic) {\n            mnemonicOrPath = Object.freeze({\n                phrase: srcMnemonic.phrase,\n                path: path,\n                locale: (srcMnemonic.locale || \"en\")\n            });\n        }\n\n        return new HDNode(_constructorGuard, ki, Ki, this.fingerprint, bytes32(IR), index, this.depth + 1, mnemonicOrPath);\n    }\n\n    derivePath(path: string): HDNode {\n        const components = path.split(\"/\");\n\n        if (components.length === 0 || (components[0] === \"m\" && this.depth !== 0)) {\n            throw new Error(\"invalid path - \" + path);\n        }\n\n        if (components[0] === \"m\") { components.shift(); }\n\n        let result: HDNode = this;\n        for (let i = 0; i < components.length; i++) {\n            const component = components[i];\n            if (component.match(/^[0-9]+'$/)) {\n                const index = parseInt(component.substring(0, component.length - 1));\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(HardenedBit + index);\n            } else if (component.match(/^[0-9]+$/)) {\n                const index = parseInt(component);\n                if (index >= HardenedBit) { throw new Error(\"invalid path index - \" + component); }\n                result = result._derive(index);\n            } else {\n                throw new Error(\"invalid path component - \" + component);\n            }\n        }\n\n        return result;\n    }\n\n\n    static _fromSeed(seed: BytesLike, mnemonic: Mnemonic): HDNode {\n        const seedArray: Uint8Array = arrayify(seed);\n        if (seedArray.length < 16 || seedArray.length > 64) { throw new Error(\"invalid seed\"); }\n\n        const I: Uint8Array = arrayify(computeHmac(SupportedAlgorithm.sha512, MasterSecret, seedArray));\n\n        return new HDNode(_constructorGuard, bytes32(I.slice(0, 32)), null, \"0x00000000\", bytes32(I.slice(32)), 0, 0, mnemonic);\n    }\n\n    static fromMnemonic(mnemonic: string, password?: string, wordlist?: string | Wordlist): HDNode {\n\n        // If a locale name was passed in, find the associated wordlist\n        wordlist = getWordlist(wordlist);\n\n        // Normalize the case and spacing in the mnemonic (throws if the mnemonic is invalid)\n        mnemonic = entropyToMnemonic(mnemonicToEntropy(mnemonic, wordlist), wordlist);\n\n        return HDNode._fromSeed(mnemonicToSeed(mnemonic, password), {\n            phrase: mnemonic,\n            path: \"m\",\n            locale: wordlist.locale\n        });\n    }\n\n    static fromSeed(seed: BytesLike): HDNode {\n        return HDNode._fromSeed(seed, null);\n    }\n\n    static fromExtendedKey(extendedKey: string): HDNode {\n        const bytes = Base58.decode(extendedKey);\n\n        if (bytes.length !== 82 || base58check(bytes.slice(0, 78)) !== extendedKey) {\n            logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n        }\n\n        const depth = bytes[4];\n        const parentFingerprint = hexlify(bytes.slice(5, 9));\n        const index = parseInt(hexlify(bytes.slice(9, 13)).substring(2), 16);\n        const chainCode = hexlify(bytes.slice(13, 45));\n        const key = bytes.slice(45, 78);\n\n        switch (hexlify(bytes.slice(0, 4))) {\n            // Public Key\n            case \"0x0488b21e\": case \"0x043587cf\":\n                return new HDNode(_constructorGuard, null, hexlify(key), parentFingerprint, chainCode, index, depth, null);\n\n            // Private Key\n            case \"0x0488ade4\": case \"0x04358394 \":\n                if (key[0] !== 0) { break; }\n                return new HDNode(_constructorGuard, hexlify(key.slice(1)), null, parentFingerprint, chainCode, index, depth, null);\n        }\n\n        return logger.throwArgumentError(\"invalid extended key\", \"extendedKey\", \"[REDACTED]\");\n    }\n}\n\nexport function mnemonicToSeed(mnemonic: string, password?: string): string {\n    if (!password) { password = \"\"; }\n\n    const salt = toUtf8Bytes(\"mnemonic\" + password, UnicodeNormalizationForm.NFKD);\n\n    return pbkdf2(toUtf8Bytes(mnemonic, UnicodeNormalizationForm.NFKD), salt, 2048, 64, \"sha512\");\n}\n\nexport function mnemonicToEntropy(mnemonic: string, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    logger.checkNormalize();\n\n    const words = wordlist.split(mnemonic);\n    if ((words.length % 3) !== 0) { throw new Error(\"invalid mnemonic\"); }\n\n    const entropy = arrayify(new Uint8Array(Math.ceil(11 * words.length / 8)));\n\n    let offset = 0;\n    for (let i = 0; i < words.length; i++) {\n        let index = wordlist.getWordIndex(words[i].normalize(\"NFKD\"));\n        if (index === -1) { throw new Error(\"invalid mnemonic\"); }\n\n        for (let bit = 0; bit < 11; bit++) {\n            if (index & (1 << (10 - bit))) {\n                entropy[offset >> 3] |= (1 << (7 - (offset % 8)));\n            }\n            offset++;\n        }\n    }\n\n    const entropyBits = 32 * words.length / 3;\n\n    const checksumBits = words.length / 3;\n    const checksumMask = getUpperMask(checksumBits);\n\n    const checksum = arrayify(sha256(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;\n\n    if (checksum !== (entropy[entropy.length - 1] & checksumMask)) {\n        throw new Error(\"invalid checksum\");\n    }\n\n    return hexlify(entropy.slice(0, entropyBits / 8));\n}\n\nexport function entropyToMnemonic(entropy: BytesLike, wordlist?: string | Wordlist): string {\n    wordlist = getWordlist(wordlist);\n\n    entropy = arrayify(entropy);\n\n    if ((entropy.length % 4) !== 0 || entropy.length < 16 || entropy.length > 32) {\n        throw new Error(\"invalid entropy\");\n    }\n\n    const indices: Array<number> = [ 0 ];\n\n    let remainingBits = 11;\n    for (let i = 0; i < entropy.length; i++) {\n\n        // Consume the whole byte (with still more to go)\n        if (remainingBits > 8) {\n            indices[indices.length - 1] <<= 8;\n            indices[indices.length - 1] |= entropy[i];\n\n            remainingBits -= 8;\n\n        // This byte will complete an 11-bit index\n        } else {\n            indices[indices.length - 1] <<= remainingBits;\n            indices[indices.length - 1] |= entropy[i] >> (8 - remainingBits);\n\n            // Start the next word\n            indices.push(entropy[i] & getLowerMask(8 - remainingBits));\n\n            remainingBits += 3;\n        }\n    }\n\n    // Compute the checksum bits\n    const checksumBits = entropy.length / 4;\n    const checksum = arrayify(sha256(entropy))[0] & getUpperMask(checksumBits);\n\n    // Shift the checksum into the word indices\n    indices[indices.length - 1] <<= checksumBits;\n    indices[indices.length - 1] |= (checksum >> (8 - checksumBits));\n\n    return wordlist.join(indices.map((index) => (<Wordlist>wordlist).getWord(index)));\n}\n\nexport function isValidMnemonic(mnemonic: string, wordlist?: Wordlist): boolean {\n    try {\n        mnemonicToEntropy(mnemonic, wordlist);\n        return true;\n    } catch (error) { }\n    return false;\n}\n\nexport function getAccountPath(index: number): string {\n    if (typeof(index) !== \"number\" || index < 0 || index >= HardenedBit || index % 1) {\n        logger.throwArgumentError(\"invalid account index\", \"index\", index);\n    }\n    return `m/44'/60'/${ index }'/0/0`;\n}\n"]},"metadata":{},"sourceType":"module"}