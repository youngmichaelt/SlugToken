{"ast":null,"code":"var _jsxFileName = \"/Users/michaelyoung/repos/slugsite/src/Interactions.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Interactions = props => {\n  _s();\n\n  const [txnHash, setTxnHash] = useState();\n  const [allowance, setAllowance] = useState();\n  const [selfAllowance, setSelfAllowance] = useState();\n  const [ApproveOrStake, setApproveOrStake] = useState();\n  const [stakeBalance, setStakeBalance] = useState();\n  const [unstakeValue, setUnstakeValue] = useState();\n  const [txnPending, setTxnPending] = useState();\n  const [tokenName, setTokenName] = useState(\"Token\");\n  const [balance, setBalance] = useState(null);\n  let contract = props.contract.contract;\n  let defaultAccount = props.contract.defaultAccount;\n  let provider = props.contract.provider;\n\n  const approveOrStake = async () => {\n    let contractAddress = await contract.address;\n    let allowance = await contract.allowance(defaultAccount, contractAddress);\n    let allowanceBalance = allowance * Math.pow(10, 18);\n    setAllowance(allowanceBalance);\n    let selfAllowance = await contract.allowance(defaultAccount, defaultAccount);\n    let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n    setSelfAllowance(selfAllowanceBalance);\n\n    if (allowanceBalance > 0 && selfAllowanceBalance > 0) {\n      setApproveOrStake(\"Stake\");\n    } else {\n      setApproveOrStake(\"Approve\");\n    }\n  };\n\n  const getStakeBalance = async () => {\n    let isStakeHolder = false;\n    let stakeId = 0;\n\n    if (defaultAccount instanceof Array) {\n      [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount[0]);\n    } else {\n      [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n    }\n\n    if (isStakeHolder == true) {\n      let stakeAmountBig = 0;\n\n      if (defaultAccount instanceof Array) {\n        stakeAmountBig = await contract.stakedTokens(defaultAccount[0]);\n      } else {\n        stakeAmountBig = await contract.stakedTokens(defaultAccount);\n      }\n\n      let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18);\n      setStakeBalance(stakeAmount);\n    } else {\n      setStakeBalance(0);\n    }\n  };\n\n  const stakeHandler = async e => {\n    e.preventDefault();\n    let contractAddress = await contract.address; // let allowance = await contract.allowance(defaultAccount, contractAddress);\n    // let allowanceBalance = allowance / Math.pow(10, 18);\n    //let stakeAmount = parseInt(e.target.stakeAmount.value) * Math.pow(10, 18);\n    //let stakeAmountBig = ethers.BigNumber.from(e.target.stakeAmount.value);\n    //let stakeAmount = stakeAmountBig.mul(Math.pow(10, 18));\n\n    let stakeAmount = parseInt(e.target.stakeAmount.value);\n    let stakeAmountBig = ethers.utils.parseUnits(e.target.stakeAmount.value, 18); // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n\n    console.log(allowance, selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)));\n\n    if (parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)) <= allowance && parseInt(ethers.utils.formatUnits(stakeAmountBig, 0)) <= selfAllowance) {\n      let txn = await contract.stakeToken(stakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n      pollTransaction(txn.hash);\n    } else {\n      let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n      let txn = await contract.approve(contractAddress, stakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n      pollTransaction(txn.hash);\n    }\n  };\n\n  const unstakeHandler = async e => {\n    e.preventDefault();\n    let contractAddress = await contract.address;\n    let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n    let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n    if (stakeBalance > unstakeAmount) {\n      let txn = await contract.unstakeToken(unstakeAmountBig);\n      console.log(txn);\n      setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n      pollTransaction(txn.hash);\n      balance = 0;\n    } else {\n      window.alert(\"You cannot unstake more tokens than you have staked...\");\n    }\n  };\n\n  const pollTransaction = async txnHash => {\n    setTxnPending(\"Pending transaction...\");\n    let txn = await provider.getTransactionReceipt(txnHash);\n    let time = 0;\n\n    while (txn == null && time < 30) {\n      await new Promise(r => setTimeout(r, 2000));\n      txn = await provider.getTransactionReceipt(txnHash);\n      time += 1;\n    }\n\n    if (time == 30) {\n      setTxnPending(\"Time out error, check your transaction to make sure it went through\");\n    } else {\n      setTxnPending(\"txn complete\");\n    }\n  };\n\n  const updateTokenName = async () => {\n    let name = await contract.name();\n    setTokenName(name);\n  };\n\n  const updateBalance = async () => {\n    let balanceBigN = 0;\n\n    if (defaultAccount instanceof Array) {\n      balanceBigN = await contract.balanceOf(defaultAccount[0]);\n    } else {\n      balanceBigN = await contract.balanceOf(defaultAccount);\n    }\n\n    let balanceNumber = balanceBigN;\n    let tokenDecimals = await contract.decimals();\n    let tokenBalance = balanceNumber / Math.pow(10, 18);\n    console.log(2 * Math.pow(10, 18));\n    setBalance(tokenBalance);\n  };\n\n  useEffect(() => {\n    if (contract != null) {\n      updateBalance();\n      updateTokenName();\n      approveOrStake();\n      getStakeBalance();\n    } else {\n      setApproveOrStake(\"Approve\");\n    }\n  }, [contract, defaultAccount, txnPending]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-white mx-20 rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"stake-detail\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"amount\",\n        className: \"bg-indigo-500 rounded-3xl px-5 py-10 left-0\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"px-15 mb-10 relative\",\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"Max\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [tokenName, \" Balance: \", balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: stakeHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Stake tokens \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"stakeAmount\",\n          min: \"0\",\n          step: \"0.001\",\n          placeholder: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: ApproveOrStake\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Staked balance: \", stakeBalance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: unstakeHandler,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Unstake tokens \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Amount\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          id: \"unstakeAmount\",\n          min: \"0\",\n          step: \"0.001\",\n          placeholder: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Unstake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: txnPending\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: txnHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Interactions, \"exOZDBiJfkf4JQ2GrrgGVJ0jioQ=\");\n\n_c = Interactions;\nexport default Interactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Interactions\");","map":{"version":3,"sources":["/Users/michaelyoung/repos/slugsite/src/Interactions.js"],"names":["React","useState","useEffect","ethers","Interactions","props","txnHash","setTxnHash","allowance","setAllowance","selfAllowance","setSelfAllowance","ApproveOrStake","setApproveOrStake","stakeBalance","setStakeBalance","unstakeValue","setUnstakeValue","txnPending","setTxnPending","tokenName","setTokenName","balance","setBalance","contract","defaultAccount","provider","approveOrStake","contractAddress","address","allowanceBalance","Math","pow","selfAllowanceBalance","getStakeBalance","isStakeHolder","stakeId","Array","isStakeholder","stakeAmountBig","stakedTokens","stakeAmount","utils","formatUnits","stakeHandler","e","preventDefault","parseInt","target","value","parseUnits","console","log","txn","stakeToken","hash","pollTransaction","approveSelftxn","approve","unstakeHandler","unstakeAmount","unstakeAmountBig","unstakeToken","window","alert","getTransactionReceipt","time","Promise","r","setTimeout","updateTokenName","name","updateBalance","balanceBigN","balanceOf","balanceNumber","tokenDecimals","decimals","tokenBalance"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\n\nconst Interactions = (props) => {\n\n    const [txnHash, setTxnHash] = useState();\n\n    const [allowance, setAllowance] = useState();\n    const [selfAllowance, setSelfAllowance] = useState();\n    const [ApproveOrStake, setApproveOrStake] = useState();\n    const [stakeBalance, setStakeBalance] = useState();\n    const [unstakeValue, setUnstakeValue] = useState();\n\n    const [txnPending, setTxnPending] = useState();\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [balance, setBalance] = useState(null);\n\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    \n\n    const approveOrStake = async () => {\n        let contractAddress = await contract.address;\n        let allowance = await contract.allowance(defaultAccount, contractAddress);\n\n        let allowanceBalance = allowance * Math.pow(10, 18);\n        setAllowance(allowanceBalance);\n\n        let selfAllowance = await contract.allowance(defaultAccount, defaultAccount);\n        let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n        setSelfAllowance(selfAllowanceBalance);\n\n        if (allowanceBalance > 0 && selfAllowanceBalance > 0){\n            setApproveOrStake(\"Stake\");\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    }\n\n    const getStakeBalance = async () =>{\n        let isStakeHolder = false;\n        let stakeId = 0;\n        if (defaultAccount instanceof Array){\n            [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount[0]);\n        } else {\n            [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n        }\n        \n        \n        if (isStakeHolder == true){\n            let stakeAmountBig = 0;\n            if (defaultAccount instanceof Array){\n                stakeAmountBig = await contract.stakedTokens(defaultAccount[0]);\n            } else {\n                stakeAmountBig = await contract.stakedTokens(defaultAccount);\n            }\n            \n            let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18)\n            setStakeBalance(stakeAmount);\n        } else {\n            setStakeBalance(0);\n        }\n    }\n\n    const stakeHandler = async (e) => {\n        e.preventDefault();\n        let contractAddress = await contract.address;\n        // let allowance = await contract.allowance(defaultAccount, contractAddress);\n        // let allowanceBalance = allowance / Math.pow(10, 18);\n\n\n        //let stakeAmount = parseInt(e.target.stakeAmount.value) * Math.pow(10, 18);\n        //let stakeAmountBig = ethers.BigNumber.from(e.target.stakeAmount.value);\n        //let stakeAmount = stakeAmountBig.mul(Math.pow(10, 18));\n        let stakeAmount = parseInt(e.target.stakeAmount.value);\n        let stakeAmountBig = ethers.utils.parseUnits(e.target.stakeAmount.value, 18);\n        // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n        console.log(allowance,selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig,0)))\n\n        if (parseInt(ethers.utils.formatUnits(stakeAmountBig,0)) <= allowance && parseInt(ethers.utils.formatUnits(stakeAmountBig,0)) <= selfAllowance){\n\n            let txn = await contract.stakeToken(stakeAmountBig);\n            console.log(txn);\n\t\t    setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n            pollTransaction(txn.hash);\n\n        } else {\n            let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n            let txn = await contract.approve(contractAddress, stakeAmountBig);\n            console.log(txn);\n\t\t    setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n            pollTransaction(txn.hash);\n        }\n    }\n\n    const unstakeHandler = async (e) => {\n        e.preventDefault();\n        let contractAddress = await contract.address;\n        let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n        let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n        if (stakeBalance > unstakeAmount){\n            let txn = await contract.unstakeToken(unstakeAmountBig);\n            console.log(txn);\n            setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n\n            pollTransaction(txn.hash);\n\n            balance = 0;\n            \n        } else {\n            window.alert(\"You cannot unstake more tokens than you have staked...\");\n        }\n        \n    }\n\n    const pollTransaction = async (txnHash) => {\n        setTxnPending(\"Pending transaction...\");\n        let txn = await provider.getTransactionReceipt(txnHash);\n        let time = 0;\n\n        while (txn == null && time < 30){\n            await new Promise(r => setTimeout(r, 2000));\n            txn = await provider.getTransactionReceipt(txnHash);\n            time += 1;\n            \n        }\n        if (time == 30){\n            setTxnPending(\"Time out error, check your transaction to make sure it went through\");\n        } else {\n            setTxnPending(\"txn complete\");\n        }\n\n        \n    }\n    const updateTokenName = async () => {\n        let name = await contract.name();\n\n        setTokenName(name);\n    }\n    const updateBalance = async () => {\n        \n        let balanceBigN = 0;\n\n        if (defaultAccount instanceof Array){\n            balanceBigN = await contract.balanceOf(defaultAccount[0]);\n        } else {\n            balanceBigN = await contract.balanceOf(defaultAccount);\n        }\n\n        let balanceNumber = balanceBigN;\n\n        let tokenDecimals = await contract.decimals();\n\n\t\tlet tokenBalance = balanceNumber / Math.pow(10, 18);\n        console.log(2 * Math.pow(10,18))\n        setBalance(tokenBalance);\n    };\n\n    useEffect(() =>{\n        if (contract != null){\n            updateBalance();\n            updateTokenName();\n            approveOrStake();\n            getStakeBalance();\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    },[contract, defaultAccount, txnPending])\n\n    return (\n        <div className='p-4 bg-white mx-20 rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n            <div id='stake-detail'>\n                <div id='amount' className='bg-indigo-500 rounded-3xl px-5 py-10 left-0'>\n                    <div className='px-15 mb-10 relative'>Amount</div>\n                    <div>\n                        <input type='text' placeholder='0'></input>\n                    </div>\n                    <button>\n                        <span>Max</span>\n                    </button>\n\n\n                </div>\n                <div>\n                    <h3>{tokenName} Balance: {balance}</h3>\n                </div>\n                <form onSubmit={stakeHandler}>\n                    <h3>Stake tokens </h3>\n                    <p>Amount</p>\n                    <input type='number' id='stakeAmount' min='0' step='0.001' placeholder='0'></input>\n                    <button type='submit'>{ApproveOrStake}</button>\n                </form>\n                <div>\n                    <h3>Staked balance: {stakeBalance}</h3>\n                </div>\n                <form onSubmit={unstakeHandler}>\n                    <h3>Unstake tokens </h3>\n                    <p>Amount</p>\n                    <input type='number' id='unstakeAmount' min='0' step='0.001' placeholder='0'></input>\n                    <button type='submit'>Unstake</button>\n                </form>\n            </div>\n            \n            <div>\n                {txnPending}\n            </div>\n            <div>\n\t\t\t\t{txnHash}\n\t\t\t</div>\n\n\n            {/* <div class=\"p-4 max-w-sm bg-white rounded-lg border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700\">\n            <form class=\"space-y-6\" action=\"#\">\n            <h5 class=\"text-xl font-medium text-gray-900 dark:text-white\">Sign in to our platform</h5>\n            <div>\n            <label for=\"email\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" placeholder=\"name@company.com\" required=\"\"/>\n            </div>\n            <div>\n            <label for=\"password\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" required=\"\"/>\n            </div>\n            <div class=\"flex items-start\">\n            <div class=\"flex items-start\">\n            <div class=\"flex items-center h-5\">\n            </div>\n            <label for=\"remember\" class=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Remember me</label>\n            </div>\n            <a href=\"#\" class=\"ml-auto text-sm text-blue-700 hover:underline dark:text-blue-500\">Lost Password?</a>\n            </div>\n            <button type=\"submit\" class=\"w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Login to your account</button>\n            <div class=\"text-sm font-medium text-gray-500 dark:text-gray-300\">\n            Not registered? <a href=\"#\" class=\"text-blue-700 hover:underline dark:text-blue-500\">Create account</a>\n            </div>\n            </form>\n            </div> */}\n\n\n        </div>\n        \n\n    );\n\n}\n\nexport default Interactions;"]},"metadata":{},"sourceType":"module"}