{"ast":null,"code":"\"use strict\";\n\nimport _inherits from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n;\nvar _constructorGuard = {};\nvar ModifiersBytes = {\n  calldata: true,\n  memory: true,\n  storage: true\n};\nvar ModifiersNest = {\n  calldata: true,\n  memory: true\n};\n\nfunction checkModifier(type, name) {\n  if (type === \"bytes\" || type === \"string\") {\n    if (ModifiersBytes[name]) {\n      return true;\n    }\n  } else if (type === \"address\") {\n    if (name === \"payable\") {\n      return true;\n    }\n  } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n    if (ModifiersNest[name]) {\n      return true;\n    }\n  }\n\n  if (ModifiersBytes[name] || name === \"payable\") {\n    logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n  }\n\n  return false;\n} // @TODO: Make sure that children of an indexed tuple are marked with a null indexed\n\n\nfunction parseParamType(param, allowIndexed) {\n  var originalParam = param;\n\n  function throwError(i) {\n    logger.throwArgumentError(\"unexpected character at position \".concat(i), \"param\", param);\n  }\n\n  param = param.replace(/\\s/g, \" \");\n\n  function newNode(parent) {\n    var node = {\n      type: \"\",\n      name: \"\",\n      parent: parent,\n      state: {\n        allowType: true\n      }\n    };\n\n    if (allowIndexed) {\n      node.indexed = false;\n    }\n\n    return node;\n  }\n\n  var parent = {\n    type: \"\",\n    name: \"\",\n    state: {\n      allowType: true\n    }\n  };\n  var node = parent;\n\n  for (var i = 0; i < param.length; i++) {\n    var c = param[i];\n\n    switch (c) {\n      case \"(\":\n        if (node.state.allowType && node.type === \"\") {\n          node.type = \"tuple\";\n        } else if (!node.state.allowParams) {\n          throwError(i);\n        }\n\n        node.state.allowType = false;\n        node.type = verifyType(node.type);\n        node.components = [newNode(node)];\n        node = node.components[0];\n        break;\n\n      case \")\":\n        delete node.state;\n\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n\n          node.indexed = true;\n          node.name = \"\";\n        }\n\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n\n        node.type = verifyType(node.type);\n        var child = node;\n        node = node.parent;\n\n        if (!node) {\n          throwError(i);\n        }\n\n        delete child.parent;\n        node.state.allowParams = false;\n        node.state.allowName = true;\n        node.state.allowArray = true;\n        break;\n\n      case \",\":\n        delete node.state;\n\n        if (node.name === \"indexed\") {\n          if (!allowIndexed) {\n            throwError(i);\n          }\n\n          node.indexed = true;\n          node.name = \"\";\n        }\n\n        if (checkModifier(node.type, node.name)) {\n          node.name = \"\";\n        }\n\n        node.type = verifyType(node.type);\n        var sibling = newNode(node.parent); //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n\n        node.parent.components.push(sibling);\n        delete node.parent;\n        node = sibling;\n        break;\n      // Hit a space...\n\n      case \" \":\n        // If reading type, the type is done and may read a param or name\n        if (node.state.allowType) {\n          if (node.type !== \"\") {\n            node.type = verifyType(node.type);\n            delete node.state.allowType;\n            node.state.allowName = true;\n            node.state.allowParams = true;\n          }\n        } // If reading name, the name is done\n\n\n        if (node.state.allowName) {\n          if (node.name !== \"\") {\n            if (node.name === \"indexed\") {\n              if (!allowIndexed) {\n                throwError(i);\n              }\n\n              if (node.indexed) {\n                throwError(i);\n              }\n\n              node.indexed = true;\n              node.name = \"\";\n            } else if (checkModifier(node.type, node.name)) {\n              node.name = \"\";\n            } else {\n              node.state.allowName = false;\n            }\n          }\n        }\n\n        break;\n\n      case \"[\":\n        if (!node.state.allowArray) {\n          throwError(i);\n        }\n\n        node.type += c;\n        node.state.allowArray = false;\n        node.state.allowName = false;\n        node.state.readArray = true;\n        break;\n\n      case \"]\":\n        if (!node.state.readArray) {\n          throwError(i);\n        }\n\n        node.type += c;\n        node.state.readArray = false;\n        node.state.allowArray = true;\n        node.state.allowName = true;\n        break;\n\n      default:\n        if (node.state.allowType) {\n          node.type += c;\n          node.state.allowParams = true;\n          node.state.allowArray = true;\n        } else if (node.state.allowName) {\n          node.name += c;\n          delete node.state.allowArray;\n        } else if (node.state.readArray) {\n          node.type += c;\n        } else {\n          throwError(i);\n        }\n\n    }\n  }\n\n  if (node.parent) {\n    logger.throwArgumentError(\"unexpected eof\", \"param\", param);\n  }\n\n  delete parent.state;\n\n  if (node.name === \"indexed\") {\n    if (!allowIndexed) {\n      throwError(originalParam.length - 7);\n    }\n\n    if (node.indexed) {\n      throwError(originalParam.length - 7);\n    }\n\n    node.indexed = true;\n    node.name = \"\";\n  } else if (checkModifier(node.type, node.name)) {\n    node.name = \"\";\n  }\n\n  parent.type = verifyType(parent.type);\n  return parent;\n}\n\nfunction populate(object, params) {\n  for (var key in params) {\n    defineReadOnly(object, key, params[key]);\n  }\n}\n\nexport var FormatTypes = Object.freeze({\n  // Bare formatting, as is needed for computing a sighash of an event or function\n  sighash: \"sighash\",\n  // Human-Readable with Minimal spacing and without names (compact human-readable)\n  minimal: \"minimal\",\n  // Human-Readable with nice spacing, including all names\n  full: \"full\",\n  // JSON-format a la Solidity\n  json: \"json\"\n});\nvar paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\nexport var ParamType = /*#__PURE__*/function () {\n  function ParamType(constructorGuard, params) {\n    _classCallCheck(this, ParamType);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new ParamType()\"\n      });\n    }\n\n    populate(this, params);\n    var match = this.type.match(paramTypeArray);\n\n    if (match) {\n      populate(this, {\n        arrayLength: parseInt(match[2] || \"-1\"),\n        arrayChildren: ParamType.fromObject({\n          type: match[1],\n          components: this.components\n        }),\n        baseType: \"array\"\n      });\n    } else {\n      populate(this, {\n        arrayLength: null,\n        arrayChildren: null,\n        baseType: this.components != null ? \"tuple\" : this.type\n      });\n    }\n\n    this._isParamType = true;\n    Object.freeze(this);\n  } // Format the parameter fragment\n  //   - sighash: \"(uint256,address)\"\n  //   - minimal: \"tuple(uint256,address) indexed\"\n  //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n\n\n  _createClass(ParamType, [{\n    key: \"format\",\n    value: function format(_format) {\n      if (!_format) {\n        _format = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format);\n      }\n\n      if (_format === FormatTypes.json) {\n        var _result = {\n          type: this.baseType === \"tuple\" ? \"tuple\" : this.type,\n          name: this.name || undefined\n        };\n\n        if (typeof this.indexed === \"boolean\") {\n          _result.indexed = this.indexed;\n        }\n\n        if (this.components) {\n          _result.components = this.components.map(function (comp) {\n            return JSON.parse(comp.format(_format));\n          });\n        }\n\n        return JSON.stringify(_result);\n      }\n\n      var result = \"\"; // Array\n\n      if (this.baseType === \"array\") {\n        result += this.arrayChildren.format(_format);\n        result += \"[\" + (this.arrayLength < 0 ? \"\" : String(this.arrayLength)) + \"]\";\n      } else {\n        if (this.baseType === \"tuple\") {\n          if (_format !== FormatTypes.sighash) {\n            result += this.type;\n          }\n\n          result += \"(\" + this.components.map(function (comp) {\n            return comp.format(_format);\n          }).join(_format === FormatTypes.full ? \", \" : \",\") + \")\";\n        } else {\n          result += this.type;\n        }\n      }\n\n      if (_format !== FormatTypes.sighash) {\n        if (this.indexed === true) {\n          result += \" indexed\";\n        }\n\n        if (_format === FormatTypes.full && this.name) {\n          result += \" \" + this.name;\n        }\n      }\n\n      return result;\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value, allowIndexed) {\n      if (typeof value === \"string\") {\n        return ParamType.fromString(value, allowIndexed);\n      }\n\n      return ParamType.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ParamType.isParamType(value)) {\n        return value;\n      }\n\n      return new ParamType(_constructorGuard, {\n        name: value.name || null,\n        type: verifyType(value.type),\n        indexed: value.indexed == null ? null : !!value.indexed,\n        components: value.components ? value.components.map(ParamType.fromObject) : null\n      });\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value, allowIndexed) {\n      function ParamTypify(node) {\n        return ParamType.fromObject({\n          name: node.name,\n          type: node.type,\n          indexed: node.indexed,\n          components: node.components\n        });\n      }\n\n      return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n  }, {\n    key: \"isParamType\",\n    value: function isParamType(value) {\n      return !!(value != null && value._isParamType);\n    }\n  }]);\n\n  return ParamType;\n}();\n;\n\nfunction parseParams(value, allowIndex) {\n  return splitNesting(value).map(function (param) {\n    return ParamType.fromString(param, allowIndex);\n  });\n}\n\nexport var Fragment = /*#__PURE__*/function () {\n  function Fragment(constructorGuard, params) {\n    _classCallCheck(this, Fragment);\n\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new Fragment()\"\n      });\n    }\n\n    populate(this, params);\n    this._isFragment = true;\n    Object.freeze(this);\n  }\n\n  _createClass(Fragment, null, [{\n    key: \"from\",\n    value: function from(value) {\n      if (Fragment.isFragment(value)) {\n        return value;\n      }\n\n      if (typeof value === \"string\") {\n        return Fragment.fromString(value);\n      }\n\n      return Fragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (Fragment.isFragment(value)) {\n        return value;\n      }\n\n      switch (value.type) {\n        case \"function\":\n          return FunctionFragment.fromObject(value);\n\n        case \"event\":\n          return EventFragment.fromObject(value);\n\n        case \"constructor\":\n          return ConstructorFragment.fromObject(value);\n\n        case \"error\":\n          return ErrorFragment.fromObject(value);\n\n        case \"fallback\":\n        case \"receive\":\n          // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n          return null;\n      }\n\n      return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n      value = value.replace(/\\s/g, \" \");\n      value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n      value = value.trim();\n\n      if (value.split(\" \")[0] === \"event\") {\n        return EventFragment.fromString(value.substring(5).trim());\n      } else if (value.split(\" \")[0] === \"function\") {\n        return FunctionFragment.fromString(value.substring(8).trim());\n      } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n        return ConstructorFragment.fromString(value.trim());\n      } else if (value.split(\" \")[0] === \"error\") {\n        return ErrorFragment.fromString(value.substring(5).trim());\n      }\n\n      return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n  }, {\n    key: \"isFragment\",\n    value: function isFragment(value) {\n      return !!(value && value._isFragment);\n    }\n  }]);\n\n  return Fragment;\n}();\nexport var EventFragment = /*#__PURE__*/function (_Fragment) {\n  _inherits(EventFragment, _Fragment);\n\n  var _super = _createSuper(EventFragment);\n\n  function EventFragment() {\n    _classCallCheck(this, EventFragment);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(EventFragment, [{\n    key: \"format\",\n    value: function format(_format2) {\n      if (!_format2) {\n        _format2 = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format2]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format2);\n      }\n\n      if (_format2 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"event\",\n          anonymous: this.anonymous,\n          name: this.name,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format2));\n          })\n        });\n      }\n\n      var result = \"\";\n\n      if (_format2 !== FormatTypes.sighash) {\n        result += \"event \";\n      }\n\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format2);\n      }).join(_format2 === FormatTypes.full ? \", \" : \",\") + \") \";\n\n      if (_format2 !== FormatTypes.sighash) {\n        if (this.anonymous) {\n          result += \"anonymous \";\n        }\n      }\n\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return EventFragment.fromString(value);\n      }\n\n      return EventFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (EventFragment.isEventFragment(value)) {\n        return value;\n      }\n\n      if (value.type !== \"event\") {\n        logger.throwArgumentError(\"invalid event object\", \"value\", value);\n      }\n\n      var params = {\n        name: verifyIdentifier(value.name),\n        anonymous: value.anonymous,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        type: \"event\"\n      };\n      return new EventFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var match = value.match(regexParen);\n\n      if (!match) {\n        logger.throwArgumentError(\"invalid event string\", \"value\", value);\n      }\n\n      var anonymous = false;\n      match[3].split(\" \").forEach(function (modifier) {\n        switch (modifier.trim()) {\n          case \"anonymous\":\n            anonymous = true;\n            break;\n\n          case \"\":\n            break;\n\n          default:\n            logger.warn(\"unknown modifier: \" + modifier);\n        }\n      });\n      return EventFragment.fromObject({\n        name: match[1].trim(),\n        anonymous: anonymous,\n        inputs: parseParams(match[2], true),\n        type: \"event\"\n      });\n    }\n  }, {\n    key: \"isEventFragment\",\n    value: function isEventFragment(value) {\n      return value && value._isFragment && value.type === \"event\";\n    }\n  }]);\n\n  return EventFragment;\n}(Fragment);\n\nfunction parseGas(value, params) {\n  params.gas = null;\n  var comps = value.split(\"@\");\n\n  if (comps.length !== 1) {\n    if (comps.length > 2) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n    }\n\n    if (!comps[1].match(/^[0-9]+$/)) {\n      logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n    }\n\n    params.gas = BigNumber.from(comps[1]);\n    return comps[0];\n  }\n\n  return value;\n}\n\nfunction parseModifiers(value, params) {\n  params.constant = false;\n  params.payable = false;\n  params.stateMutability = \"nonpayable\";\n  value.split(\" \").forEach(function (modifier) {\n    switch (modifier.trim()) {\n      case \"constant\":\n        params.constant = true;\n        break;\n\n      case \"payable\":\n        params.payable = true;\n        params.stateMutability = \"payable\";\n        break;\n\n      case \"nonpayable\":\n        params.payable = false;\n        params.stateMutability = \"nonpayable\";\n        break;\n\n      case \"pure\":\n        params.constant = true;\n        params.stateMutability = \"pure\";\n        break;\n\n      case \"view\":\n        params.constant = true;\n        params.stateMutability = \"view\";\n        break;\n\n      case \"external\":\n      case \"public\":\n      case \"\":\n        break;\n\n      default:\n        console.log(\"unknown modifier: \" + modifier);\n    }\n  });\n}\n\nfunction verifyState(value) {\n  var result = {\n    constant: false,\n    payable: true,\n    stateMutability: \"payable\"\n  };\n\n  if (value.stateMutability != null) {\n    result.stateMutability = value.stateMutability; // Set (and check things are consistent) the constant property\n\n    result.constant = result.stateMutability === \"view\" || result.stateMutability === \"pure\";\n\n    if (value.constant != null) {\n      if (!!value.constant !== result.constant) {\n        logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    } // Set (and check things are consistent) the payable property\n\n\n    result.payable = result.stateMutability === \"payable\";\n\n    if (value.payable != null) {\n      if (!!value.payable !== result.payable) {\n        logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n      }\n    }\n  } else if (value.payable != null) {\n    result.payable = !!value.payable; // If payable we can assume non-constant; otherwise we can't assume\n\n    if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n      logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    result.constant = !!value.constant;\n\n    if (result.constant) {\n      result.stateMutability = \"view\";\n    } else {\n      result.stateMutability = result.payable ? \"payable\" : \"nonpayable\";\n    }\n\n    if (result.payable && result.constant) {\n      logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n    }\n  } else if (value.constant != null) {\n    result.constant = !!value.constant;\n    result.payable = !result.constant;\n    result.stateMutability = result.constant ? \"view\" : \"payable\";\n  } else if (value.type !== \"constructor\") {\n    logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n  }\n\n  return result;\n}\n\nexport var ConstructorFragment = /*#__PURE__*/function (_Fragment2) {\n  _inherits(ConstructorFragment, _Fragment2);\n\n  var _super2 = _createSuper(ConstructorFragment);\n\n  function ConstructorFragment() {\n    _classCallCheck(this, ConstructorFragment);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(ConstructorFragment, [{\n    key: \"format\",\n    value: function format(_format3) {\n      if (!_format3) {\n        _format3 = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format3]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format3);\n      }\n\n      if (_format3 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"constructor\",\n          stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n          payable: this.payable,\n          gas: this.gas ? this.gas.toNumber() : undefined,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format3));\n          })\n        });\n      }\n\n      if (_format3 === FormatTypes.sighash) {\n        logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"format(sighash)\"\n        });\n      }\n\n      var result = \"constructor(\" + this.inputs.map(function (input) {\n        return input.format(_format3);\n      }).join(_format3 === FormatTypes.full ? \", \" : \",\") + \") \";\n\n      if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n        result += this.stateMutability + \" \";\n      }\n\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return ConstructorFragment.fromString(value);\n      }\n\n      return ConstructorFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ConstructorFragment.isConstructorFragment(value)) {\n        return value;\n      }\n\n      if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n      }\n\n      var state = verifyState(value);\n\n      if (state.constant) {\n        logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n      }\n\n      var params = {\n        name: null,\n        type: value.type,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        payable: state.payable,\n        stateMutability: state.stateMutability,\n        gas: value.gas ? BigNumber.from(value.gas) : null\n      };\n      return new ConstructorFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"constructor\"\n      };\n      value = parseGas(value, params);\n      var parens = value.match(regexParen);\n\n      if (!parens || parens[1].trim() !== \"constructor\") {\n        logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n      }\n\n      params.inputs = parseParams(parens[2].trim(), false);\n      parseModifiers(parens[3].trim(), params);\n      return ConstructorFragment.fromObject(params);\n    }\n  }, {\n    key: \"isConstructorFragment\",\n    value: function isConstructorFragment(value) {\n      return value && value._isFragment && value.type === \"constructor\";\n    }\n  }]);\n\n  return ConstructorFragment;\n}(Fragment);\nexport var FunctionFragment = /*#__PURE__*/function (_ConstructorFragment) {\n  _inherits(FunctionFragment, _ConstructorFragment);\n\n  var _super3 = _createSuper(FunctionFragment);\n\n  function FunctionFragment() {\n    _classCallCheck(this, FunctionFragment);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(FunctionFragment, [{\n    key: \"format\",\n    value: function format(_format4) {\n      if (!_format4) {\n        _format4 = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format4]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format4);\n      }\n\n      if (_format4 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"function\",\n          name: this.name,\n          constant: this.constant,\n          stateMutability: this.stateMutability !== \"nonpayable\" ? this.stateMutability : undefined,\n          payable: this.payable,\n          gas: this.gas ? this.gas.toNumber() : undefined,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format4));\n          }),\n          outputs: this.outputs.map(function (output) {\n            return JSON.parse(output.format(_format4));\n          })\n        });\n      }\n\n      var result = \"\";\n\n      if (_format4 !== FormatTypes.sighash) {\n        result += \"function \";\n      }\n\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format4);\n      }).join(_format4 === FormatTypes.full ? \", \" : \",\") + \") \";\n\n      if (_format4 !== FormatTypes.sighash) {\n        if (this.stateMutability) {\n          if (this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n          }\n        } else if (this.constant) {\n          result += \"view \";\n        }\n\n        if (this.outputs && this.outputs.length) {\n          result += \"returns (\" + this.outputs.map(function (output) {\n            return output.format(_format4);\n          }).join(\", \") + \") \";\n        }\n\n        if (this.gas != null) {\n          result += \"@\" + this.gas.toString() + \" \";\n        }\n      }\n\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return FunctionFragment.fromString(value);\n      }\n\n      return FunctionFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (FunctionFragment.isFunctionFragment(value)) {\n        return value;\n      }\n\n      if (value.type !== \"function\") {\n        logger.throwArgumentError(\"invalid function object\", \"value\", value);\n      }\n\n      var state = verifyState(value);\n      var params = {\n        type: value.type,\n        name: verifyIdentifier(value.name),\n        constant: state.constant,\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : [],\n        outputs: value.outputs ? value.outputs.map(ParamType.fromObject) : [],\n        payable: state.payable,\n        stateMutability: state.stateMutability,\n        gas: value.gas ? BigNumber.from(value.gas) : null\n      };\n      return new FunctionFragment(_constructorGuard, params);\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"function\"\n      };\n      value = parseGas(value, params);\n      var comps = value.split(\" returns \");\n\n      if (comps.length > 2) {\n        logger.throwArgumentError(\"invalid function string\", \"value\", value);\n      }\n\n      var parens = comps[0].match(regexParen);\n\n      if (!parens) {\n        logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n      }\n\n      params.name = parens[1].trim();\n\n      if (params.name) {\n        verifyIdentifier(params.name);\n      }\n\n      params.inputs = parseParams(parens[2], false);\n      parseModifiers(parens[3].trim(), params); // We have outputs\n\n      if (comps.length > 1) {\n        var returns = comps[1].match(regexParen);\n\n        if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n          logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n        }\n\n        params.outputs = parseParams(returns[2], false);\n      } else {\n        params.outputs = [];\n      }\n\n      return FunctionFragment.fromObject(params);\n    }\n  }, {\n    key: \"isFunctionFragment\",\n    value: function isFunctionFragment(value) {\n      return value && value._isFragment && value.type === \"function\";\n    }\n  }]);\n\n  return FunctionFragment;\n}(ConstructorFragment); //export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment) {\n  var sig = fragment.format();\n\n  if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n    logger.throwArgumentError(\"cannot specify user defined \".concat(sig, \" error\"), \"fragment\", fragment);\n  }\n\n  return fragment;\n}\n\nexport var ErrorFragment = /*#__PURE__*/function (_Fragment3) {\n  _inherits(ErrorFragment, _Fragment3);\n\n  var _super4 = _createSuper(ErrorFragment);\n\n  function ErrorFragment() {\n    _classCallCheck(this, ErrorFragment);\n\n    return _super4.apply(this, arguments);\n  }\n\n  _createClass(ErrorFragment, [{\n    key: \"format\",\n    value: function format(_format5) {\n      if (!_format5) {\n        _format5 = FormatTypes.sighash;\n      }\n\n      if (!FormatTypes[_format5]) {\n        logger.throwArgumentError(\"invalid format type\", \"format\", _format5);\n      }\n\n      if (_format5 === FormatTypes.json) {\n        return JSON.stringify({\n          type: \"error\",\n          name: this.name,\n          inputs: this.inputs.map(function (input) {\n            return JSON.parse(input.format(_format5));\n          })\n        });\n      }\n\n      var result = \"\";\n\n      if (_format5 !== FormatTypes.sighash) {\n        result += \"error \";\n      }\n\n      result += this.name + \"(\" + this.inputs.map(function (input) {\n        return input.format(_format5);\n      }).join(_format5 === FormatTypes.full ? \", \" : \",\") + \") \";\n      return result.trim();\n    }\n  }], [{\n    key: \"from\",\n    value: function from(value) {\n      if (typeof value === \"string\") {\n        return ErrorFragment.fromString(value);\n      }\n\n      return ErrorFragment.fromObject(value);\n    }\n  }, {\n    key: \"fromObject\",\n    value: function fromObject(value) {\n      if (ErrorFragment.isErrorFragment(value)) {\n        return value;\n      }\n\n      if (value.type !== \"error\") {\n        logger.throwArgumentError(\"invalid error object\", \"value\", value);\n      }\n\n      var params = {\n        type: value.type,\n        name: verifyIdentifier(value.name),\n        inputs: value.inputs ? value.inputs.map(ParamType.fromObject) : []\n      };\n      return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n  }, {\n    key: \"fromString\",\n    value: function fromString(value) {\n      var params = {\n        type: \"error\"\n      };\n      var parens = value.match(regexParen);\n\n      if (!parens) {\n        logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n      }\n\n      params.name = parens[1].trim();\n\n      if (params.name) {\n        verifyIdentifier(params.name);\n      }\n\n      params.inputs = parseParams(parens[2], false);\n      return checkForbidden(ErrorFragment.fromObject(params));\n    }\n  }, {\n    key: \"isErrorFragment\",\n    value: function isErrorFragment(value) {\n      return value && value._isFragment && value.type === \"error\";\n    }\n  }]);\n\n  return ErrorFragment;\n}(Fragment);\n\nfunction verifyType(type) {\n  // These need to be transformed to their full description\n  if (type.match(/^uint($|[^1-9])/)) {\n    type = \"uint256\" + type.substring(4);\n  } else if (type.match(/^int($|[^1-9])/)) {\n    type = \"int256\" + type.substring(3);\n  } // @TODO: more verification\n\n\n  return type;\n} // See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\n\n\nvar regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\n\nfunction verifyIdentifier(value) {\n  if (!value || !value.match(regexIdentifier)) {\n    logger.throwArgumentError(\"invalid identifier \\\"\".concat(value, \"\\\"\"), \"value\", value);\n  }\n\n  return value;\n}\n\nvar regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value) {\n  value = value.trim();\n  var result = [];\n  var accum = \"\";\n  var depth = 0;\n\n  for (var offset = 0; offset < value.length; offset++) {\n    var c = value[offset];\n\n    if (c === \",\" && depth === 0) {\n      result.push(accum);\n      accum = \"\";\n    } else {\n      accum += c;\n\n      if (c === \"(\") {\n        depth++;\n      } else if (c === \")\") {\n        depth--;\n\n        if (depth === -1) {\n          logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n        }\n      }\n    }\n  }\n\n  if (accum) {\n    result.push(accum);\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["BigNumber","defineReadOnly","Logger","version","logger","_constructorGuard","ModifiersBytes","calldata","memory","storage","ModifiersNest","checkModifier","type","name","indexOf","throwArgumentError","parseParamType","param","allowIndexed","originalParam","throwError","i","replace","newNode","parent","node","state","allowType","indexed","length","c","allowParams","verifyType","components","child","allowName","allowArray","sibling","push","readArray","populate","object","params","key","FormatTypes","Object","freeze","sighash","minimal","full","json","paramTypeArray","RegExp","ParamType","constructorGuard","errors","UNSUPPORTED_OPERATION","operation","match","arrayLength","parseInt","arrayChildren","fromObject","baseType","_isParamType","format","result","undefined","map","comp","JSON","parse","stringify","String","join","value","fromString","isParamType","ParamTypify","parseParams","allowIndex","splitNesting","Fragment","_isFragment","isFragment","FunctionFragment","EventFragment","ConstructorFragment","ErrorFragment","trim","split","substring","anonymous","inputs","input","isEventFragment","verifyIdentifier","regexParen","forEach","modifier","warn","parseGas","gas","comps","from","parseModifiers","constant","payable","stateMutability","console","log","verifyState","toNumber","isConstructorFragment","parens","outputs","output","toString","isFunctionFragment","returns","checkForbidden","fragment","sig","isErrorFragment","regexIdentifier","accum","depth","offset"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/abi/src.ts/fragments.ts"],"sourcesContent":["\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport interface JsonFragmentType {\n    readonly name?: string;\n    readonly indexed?: boolean;\n    readonly type?: string;\n    readonly internalType?: any; // @TODO: in v6 reduce type\n    readonly components?: ReadonlyArray<JsonFragmentType>;\n}\n\nexport interface JsonFragment {\n    readonly name?: string;\n    readonly type?: string;\n\n    readonly anonymous?: boolean;\n\n    readonly payable?: boolean;\n    readonly constant?: boolean;\n    readonly stateMutability?: string;\n\n    readonly inputs?: ReadonlyArray<JsonFragmentType>;\n    readonly outputs?: ReadonlyArray<JsonFragmentType>;\n\n    readonly gas?: string;\n};\n\nconst _constructorGuard = { };\n\n// AST Node parser state\ntype ParseState = {\n    allowArray?: boolean,\n    allowName?: boolean,\n    allowParams?: boolean,\n    allowType?: boolean,\n    readArray?: boolean,\n};\n\n// AST Node\ntype ParseNode = {\n    parent?: any,\n    type?: string,\n    name?: string,\n    state?: ParseState,\n    indexed?: boolean,\n    components?: Array<ParseNode>\n};\n\nlet ModifiersBytes: { [ name: string ]: boolean } = { calldata: true, memory: true, storage: true };\nlet ModifiersNest: { [ name: string ]: boolean } = { calldata: true, memory: true };\nfunction checkModifier(type: string, name: string): boolean {\n    if (type === \"bytes\" || type === \"string\") {\n        if (ModifiersBytes[name]) { return true; }\n    } else if (type === \"address\") {\n        if (name === \"payable\") { return true; }\n    } else if (type.indexOf(\"[\") >= 0 || type === \"tuple\") {\n        if (ModifiersNest[name]) { return true; }\n    }\n    if (ModifiersBytes[name] || name === \"payable\") {\n        logger.throwArgumentError(\"invalid modifier\", \"name\", name);\n    }\n    return false;\n}\n\n// @TODO: Make sure that children of an indexed tuple are marked with a null indexed\nfunction parseParamType(param: string, allowIndexed: boolean): ParseNode {\n\n    let originalParam = param;\n    function throwError(i: number) {\n        logger.throwArgumentError(`unexpected character at position ${ i }`, \"param\", param);\n    }\n    param = param.replace(/\\s/g, \" \");\n\n    function newNode(parent: ParseNode): ParseNode {\n        let node: ParseNode = { type: \"\", name: \"\", parent: parent, state: { allowType: true } };\n        if (allowIndexed) { node.indexed = false; }\n        return node\n    }\n\n    let parent: ParseNode = { type: \"\", name: \"\", state: { allowType: true } };\n    let node = parent;\n\n    for (let i = 0; i < param.length; i++) {\n        let c = param[i];\n        switch (c) {\n            case \"(\":\n                if (node.state.allowType && node.type === \"\") {\n                    node.type = \"tuple\";\n                } else if (!node.state.allowParams) {\n                    throwError(i);\n                }\n                node.state.allowType = false;\n                node.type = verifyType(node.type);\n                node.components = [ newNode(node) ];\n                node = node.components[0];\n                break;\n\n            case \")\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let child = node;\n                node = node.parent;\n                if (!node) { throwError(i); }\n                delete child.parent;\n                node.state.allowParams = false;\n                node.state.allowName = true;\n                node.state.allowArray = true;\n                break;\n\n            case \",\":\n                delete node.state;\n\n                if (node.name === \"indexed\") {\n                    if (!allowIndexed) { throwError(i); }\n                    node.indexed = true;\n                    node.name = \"\";\n                }\n\n                if (checkModifier(node.type, node.name)) { node.name = \"\"; }\n\n                node.type = verifyType(node.type);\n\n                let sibling: ParseNode = newNode(node.parent);\n                 //{ type: \"\", name: \"\", parent: node.parent, state: { allowType: true } };\n                node.parent.components.push(sibling);\n                delete node.parent;\n                node = sibling;\n                break;\n\n            // Hit a space...\n            case \" \":\n\n                // If reading type, the type is done and may read a param or name\n                if (node.state.allowType) {\n                    if (node.type !== \"\") {\n                        node.type = verifyType(node.type);\n                        delete node.state.allowType;\n                        node.state.allowName = true;\n                        node.state.allowParams = true;\n                    }\n                }\n\n                // If reading name, the name is done\n                if (node.state.allowName) {\n                    if (node.name !== \"\") {\n                        if (node.name === \"indexed\") {\n                            if (!allowIndexed) { throwError(i); }\n                            if (node.indexed) { throwError(i); }\n                            node.indexed = true;\n                            node.name = \"\";\n                        } else if (checkModifier(node.type, node.name)) {\n                            node.name = \"\";\n                        } else {\n                            node.state.allowName = false;\n                        }\n                    }\n                }\n\n                break;\n\n            case \"[\":\n                if (!node.state.allowArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.allowArray = false;\n                node.state.allowName = false;\n                node.state.readArray = true;\n                break;\n\n            case \"]\":\n                if (!node.state.readArray) { throwError(i); }\n\n                node.type += c;\n\n                node.state.readArray = false;\n                node.state.allowArray = true;\n                node.state.allowName = true;\n                break;\n\n            default:\n                if (node.state.allowType) {\n                    node.type += c;\n                    node.state.allowParams = true;\n                    node.state.allowArray = true;\n                } else if (node.state.allowName) {\n                    node.name += c;\n                    delete node.state.allowArray;\n                } else if (node.state.readArray) {\n                    node.type += c;\n                } else {\n                    throwError(i);\n               }\n        }\n    }\n\n    if (node.parent) { logger.throwArgumentError(\"unexpected eof\", \"param\", param); }\n\n    delete parent.state;\n\n    if (node.name === \"indexed\") {\n        if (!allowIndexed) { throwError(originalParam.length - 7); }\n        if (node.indexed) { throwError(originalParam.length - 7); }\n        node.indexed = true;\n        node.name = \"\";\n    } else if (checkModifier(node.type, node.name)) {\n        node.name = \"\";\n    }\n\n    parent.type = verifyType(parent.type);\n\n    return parent;\n}\n\nfunction populate(object: any, params: any) {\n    for (let key in params) { defineReadOnly(object, key, params[key]); }\n}\n\nexport const FormatTypes: { [ name: string ]: string } = Object.freeze({\n    // Bare formatting, as is needed for computing a sighash of an event or function\n    sighash: \"sighash\",\n\n    // Human-Readable with Minimal spacing and without names (compact human-readable)\n    minimal: \"minimal\",\n\n    // Human-Readable with nice spacing, including all names\n    full: \"full\",\n\n    // JSON-format a la Solidity\n    json: \"json\"\n});\n\nconst paramTypeArray = new RegExp(/^(.*)\\[([0-9]*)\\]$/);\n\nexport class ParamType {\n\n    // The local name of the parameter (of null if unbound)\n    readonly name: string;\n\n    // The fully qualified type (e.g. \"address\", \"tuple(address)\", \"uint256[3][]\"\n    readonly type: string;\n\n    // The base type (e.g. \"address\", \"tuple\", \"array\")\n    readonly baseType: string;\n\n    // Indexable Paramters ONLY (otherwise null)\n    readonly indexed: boolean;\n\n    // Tuples ONLY: (otherwise null)\n    //  - sub-components\n    readonly components: Array<ParamType>;\n\n    // Arrays ONLY: (otherwise null)\n    //  - length of the array (-1 for dynamic length)\n    //  - child type\n    readonly arrayLength: number;\n    readonly arrayChildren: ParamType;\n\n    readonly _isParamType: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) { logger.throwError(\"use fromString\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new ParamType()\"\n        }); }\n        populate(this, params);\n\n        let match = this.type.match(paramTypeArray);\n        if (match) {\n            populate(this, {\n                arrayLength: parseInt(match[2] || \"-1\"),\n                arrayChildren: ParamType.fromObject({\n                    type: match[1],\n                    components: this.components\n                }),\n                baseType: \"array\"\n            });\n        } else {\n            populate(this, {\n                arrayLength: null,\n                arrayChildren: null,\n                baseType: ((this.components != null) ? \"tuple\": this.type)\n            });\n        }\n\n        this._isParamType = true;\n\n        Object.freeze(this);\n    }\n\n    // Format the parameter fragment\n    //   - sighash: \"(uint256,address)\"\n    //   - minimal: \"tuple(uint256,address) indexed\"\n    //   - full:    \"tuple(uint256 foo, address bar) indexed baz\"\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            let result: any = {\n                type: ((this.baseType === \"tuple\") ? \"tuple\": this.type),\n                name: (this.name || undefined)\n            };\n            if (typeof(this.indexed) === \"boolean\") { result.indexed = this.indexed; }\n            if (this.components) {\n                result.components = this.components.map((comp) => JSON.parse(comp.format(format)));\n            }\n            return JSON.stringify(result);\n        }\n\n        let result = \"\";\n\n        // Array\n        if (this.baseType === \"array\") {\n            result += this.arrayChildren.format(format);\n            result += \"[\" + (this.arrayLength < 0 ? \"\": String(this.arrayLength)) + \"]\";\n        } else {\n            if (this.baseType === \"tuple\") {\n                if (format !== FormatTypes.sighash) {\n                    result += this.type;\n                }\n                result += \"(\" + this.components.map(\n                    (comp) => comp.format(format)\n                ).join((format === FormatTypes.full) ? \", \": \",\") + \")\";\n            } else {\n                result += this.type;\n            }\n        }\n\n        if (format !== FormatTypes.sighash) {\n            if (this.indexed === true) { result += \" indexed\"; }\n            if (format === FormatTypes.full && this.name) {\n                result += \" \" + this.name;\n            }\n        }\n\n        return result;\n    }\n\n    static from(value: string | JsonFragmentType | ParamType, allowIndexed?: boolean): ParamType {\n        if (typeof(value) === \"string\") {\n            return ParamType.fromString(value, allowIndexed);\n        }\n        return ParamType.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragmentType | ParamType): ParamType {\n        if (ParamType.isParamType(value)) { return value; }\n\n        return new ParamType(_constructorGuard, {\n            name: (value.name || null),\n            type: verifyType(value.type),\n            indexed: ((value.indexed == null) ? null: !!value.indexed),\n            components: (value.components ? value.components.map(ParamType.fromObject): null)\n        });\n    }\n\n    static fromString(value: string, allowIndexed?: boolean): ParamType {\n        function ParamTypify(node: ParseNode): ParamType {\n            return ParamType.fromObject({\n                name: node.name,\n                type: node.type,\n                indexed: node.indexed,\n                components: node.components\n            });\n        }\n\n        return ParamTypify(parseParamType(value, !!allowIndexed));\n    }\n\n    static isParamType(value: any): value is ParamType {\n        return !!(value != null && value._isParamType);\n    }\n};\n\nfunction parseParams(value: string, allowIndex: boolean): Array<ParamType> {\n    return splitNesting(value).map((param) => ParamType.fromString(param, allowIndex));\n}\n\ntype TypeCheck<T> = { -readonly [ K in keyof T ]: T[K] };\n\ninterface _Fragment {\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: ReadonlyArray<ParamType>;\n}\n\nexport abstract class Fragment {\n\n    readonly type: string;\n    readonly name: string;\n    readonly inputs: Array<ParamType>;\n\n    readonly _isFragment: boolean;\n\n    constructor(constructorGuard: any, params: any) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"use a static from method\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new Fragment()\"\n            });\n        }\n        populate(this, params);\n\n        this._isFragment = true;\n\n        Object.freeze(this);\n    }\n\n    abstract format(format?: string): string;\n\n    static from(value: Fragment | JsonFragment | string): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        if (typeof(value) === \"string\") {\n            return Fragment.fromString(value);\n        }\n\n        return Fragment.fromObject(value);\n    }\n\n    static fromObject(value: Fragment | JsonFragment): Fragment {\n        if (Fragment.isFragment(value)) { return value; }\n\n        switch (value.type) {\n            case \"function\":\n                return FunctionFragment.fromObject(value);\n            case \"event\":\n                return EventFragment.fromObject(value);\n            case \"constructor\":\n                return ConstructorFragment.fromObject(value);\n            case \"error\":\n                return ErrorFragment.fromObject(value);\n            case \"fallback\":\n            case \"receive\":\n                // @TODO: Something? Maybe return a FunctionFragment? A custom DefaultFunctionFragment?\n                return null;\n        }\n\n        return logger.throwArgumentError(\"invalid fragment object\", \"value\", value);\n    }\n\n    static fromString(value: string): Fragment {\n        // Make sure the \"returns\" is surrounded by a space and all whitespace is exactly one space\n        value = value.replace(/\\s/g, \" \");\n        value = value.replace(/\\(/g, \" (\").replace(/\\)/g, \") \").replace(/\\s+/g, \" \");\n        value = value.trim();\n\n        if (value.split(\" \")[0] === \"event\") {\n           return EventFragment.fromString(value.substring(5).trim());\n        } else if (value.split(\" \")[0] === \"function\") {\n            return FunctionFragment.fromString(value.substring(8).trim());\n        } else if (value.split(\"(\")[0].trim() === \"constructor\") {\n            return ConstructorFragment.fromString(value.trim());\n        } else if (value.split(\" \")[0] === \"error\") {\n           return ErrorFragment.fromString(value.substring(5).trim());\n        }\n\n        return logger.throwArgumentError(\"unsupported fragment\", \"value\", value);\n    }\n\n    static isFragment(value: any): value is Fragment {\n        return !!(value && value._isFragment);\n    }\n}\n\ninterface _EventFragment extends _Fragment {\n    readonly anonymous: boolean;\n}\n\nexport class EventFragment extends Fragment {\n    readonly anonymous: boolean;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"event\",\n                anonymous: this.anonymous,\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"event \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.anonymous) {\n                result += \"anonymous \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: EventFragment | JsonFragment | string): EventFragment {\n        if (typeof(value) === \"string\") {\n            return EventFragment.fromString(value);\n        }\n        return EventFragment.fromObject(value);\n    }\n\n    static fromObject(value: JsonFragment | EventFragment): EventFragment {\n        if (EventFragment.isEventFragment(value)) { return value; }\n\n        if (value.type !== \"event\") {\n            logger.throwArgumentError(\"invalid event object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_EventFragment> = {\n            name: verifyIdentifier(value.name),\n            anonymous: value.anonymous,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject) : []),\n            type: \"event\"\n        };\n\n        return new EventFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): EventFragment {\n\n        let match = value.match(regexParen);\n        if (!match) {\n            logger.throwArgumentError(\"invalid event string\", \"value\", value);\n        }\n\n        let anonymous = false;\n        match[3].split(\" \").forEach((modifier) => {\n            switch(modifier.trim()) {\n                case \"anonymous\":\n                    anonymous = true;\n                    break;\n                case \"\":\n                    break;\n                default:\n                    logger.warn(\"unknown modifier: \" + modifier);\n            }\n        });\n\n        return EventFragment.fromObject({\n            name: match[1].trim(),\n            anonymous: anonymous,\n            inputs: parseParams(match[2], true),\n            type: \"event\"\n        });\n    }\n\n    static isEventFragment(value: any): value is EventFragment {\n        return (value && value._isFragment && value.type === \"event\");\n    }\n}\n\nfunction parseGas(value: string, params: any): string {\n    params.gas = null;\n\n    let comps = value.split(\"@\");\n    if (comps.length !== 1) {\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature\", \"value\", value);\n        }\n        if (!comps[1].match(/^[0-9]+$/)) {\n            logger.throwArgumentError(\"invalid human-readable ABI signature gas\", \"value\", value);\n        }\n        params.gas = BigNumber.from(comps[1]);\n        return comps[0];\n    }\n\n    return value;\n}\n\nfunction parseModifiers(value: string, params: any): void {\n    params.constant = false;\n    params.payable = false;\n    params.stateMutability = \"nonpayable\";\n\n    value.split(\" \").forEach((modifier) => {\n        switch (modifier.trim()) {\n            case \"constant\":\n                params.constant = true;\n                break;\n            case \"payable\":\n                params.payable = true;\n                params.stateMutability = \"payable\";\n                break;\n            case \"nonpayable\":\n                params.payable = false;\n                params.stateMutability = \"nonpayable\";\n                break;\n            case \"pure\":\n                params.constant = true;\n                params.stateMutability = \"pure\";\n                break;\n            case \"view\":\n                params.constant = true;\n                params.stateMutability = \"view\";\n                break;\n            case \"external\":\n            case \"public\":\n            case \"\":\n                break;\n            default:\n                console.log(\"unknown modifier: \" + modifier);\n        }\n    });\n}\n\ntype StateInputValue = {\n    constant?: boolean;\n    payable?: boolean;\n    stateMutability?: string;\n    type?: string;\n};\n\ntype StateOutputValue = {\n    constant: boolean;\n    payable: boolean;\n    stateMutability: string;\n};\n\nfunction verifyState(value: StateInputValue): StateOutputValue {\n    let result: any = {\n        constant: false,\n        payable: true,\n        stateMutability: \"payable\"\n    };\n\n    if (value.stateMutability != null) {\n        result.stateMutability = value.stateMutability;\n\n        // Set (and check things are consistent) the constant property\n        result.constant = (result.stateMutability === \"view\" || result.stateMutability === \"pure\");\n        if (value.constant != null) {\n            if ((!!value.constant) !== result.constant) {\n                logger.throwArgumentError(\"cannot have constant function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n        // Set (and check things are consistent) the payable property\n        result.payable = (result.stateMutability === \"payable\");\n        if (value.payable != null) {\n            if ((!!value.payable) !== result.payable) {\n                logger.throwArgumentError(\"cannot have payable function with mutability \" + result.stateMutability, \"value\", value);\n            }\n        }\n\n    } else if (value.payable != null) {\n        result.payable = !!value.payable;\n\n        // If payable we can assume non-constant; otherwise we can't assume\n        if (value.constant == null && !result.payable && value.type !== \"constructor\") {\n            logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n        }\n\n        result.constant = !!value.constant;\n\n        if (result.constant) {\n            result.stateMutability = \"view\";\n        } else {\n            result.stateMutability = (result.payable ? \"payable\": \"nonpayable\");\n        }\n\n        if (result.payable && result.constant) {\n            logger.throwArgumentError(\"cannot have constant payable function\", \"value\", value);\n        }\n\n    } else if (value.constant != null) {\n        result.constant = !!value.constant;\n        result.payable = !result.constant;\n        result.stateMutability = (result.constant ? \"view\": \"payable\");\n\n    } else if (value.type !== \"constructor\") {\n        logger.throwArgumentError(\"unable to determine stateMutability\", \"value\", value);\n    }\n\n    return result;\n}\n\ninterface _ConstructorFragment extends _Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n}\n\nexport class ConstructorFragment extends Fragment {\n    stateMutability: string;\n    payable: boolean;\n    gas?: BigNumber;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"constructor\",\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format)))\n            });\n        }\n\n        if (format === FormatTypes.sighash) {\n            logger.throwError(\"cannot format a constructor for sighash\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"format(sighash)\"\n            });\n        }\n\n        let result = \"constructor(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (this.stateMutability && this.stateMutability !== \"nonpayable\") {\n            result += this.stateMutability + \" \";\n        }\n\n        return result.trim();\n    }\n\n    static from(value: ConstructorFragment | JsonFragment | string): ConstructorFragment {\n        if (typeof(value) === \"string\") {\n            return ConstructorFragment.fromString(value);\n        }\n        return ConstructorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ConstructorFragment | JsonFragment): ConstructorFragment {\n        if (ConstructorFragment.isConstructorFragment(value)) { return value; }\n\n        if (value.type !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n        if (state.constant) {\n            logger.throwArgumentError(\"constructor cannot be constant\", \"value\", value);\n        }\n\n        const params: TypeCheck<_ConstructorFragment> = {\n            name: null,\n            type: value.type,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new ConstructorFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): ConstructorFragment {\n        let params: any = { type: \"constructor\" };\n\n        value = parseGas(value, params);\n\n        let parens = value.match(regexParen);\n        if (!parens || parens[1].trim() !== \"constructor\") {\n            logger.throwArgumentError(\"invalid constructor string\", \"value\", value);\n        }\n\n        params.inputs = parseParams(parens[2].trim(), false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        return ConstructorFragment.fromObject(params);\n    }\n\n    static isConstructorFragment(value: any): value is ConstructorFragment {\n        return (value && value._isFragment && value.type === \"constructor\");\n    }\n}\n\ninterface _FunctionFragment extends _ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n}\n\nexport class FunctionFragment extends ConstructorFragment {\n    constant: boolean;\n    outputs?: Array<ParamType>;\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"function\",\n                name: this.name,\n                constant: this.constant,\n                stateMutability: ((this.stateMutability !== \"nonpayable\") ? this.stateMutability: undefined),\n                payable: this.payable,\n                gas: (this.gas ? this.gas.toNumber(): undefined),\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n                outputs: this.outputs.map((output) => JSON.parse(output.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"function \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        if (format !== FormatTypes.sighash) {\n            if (this.stateMutability) {\n                if (this.stateMutability !== \"nonpayable\") {\n                    result += (this.stateMutability + \" \");\n                }\n            } else if (this.constant) {\n                result += \"view \";\n            }\n\n            if (this.outputs && this.outputs.length) {\n                result += \"returns (\" + this.outputs.map(\n                    (output) => output.format(format)\n                ).join(\", \") + \") \";\n            }\n\n            if (this.gas != null) {\n                result += \"@\" + this.gas.toString() + \" \";\n            }\n        }\n\n        return result.trim();\n    }\n\n    static from(value: FunctionFragment | JsonFragment | string): FunctionFragment {\n        if (typeof(value) === \"string\") {\n            return FunctionFragment.fromString(value);\n        }\n        return FunctionFragment.fromObject(value);\n    }\n\n    static fromObject(value: FunctionFragment | JsonFragment): FunctionFragment {\n        if (FunctionFragment.isFunctionFragment(value)) { return value; }\n\n        if (value.type !== \"function\") {\n            logger.throwArgumentError(\"invalid function object\", \"value\", value);\n        }\n\n        let state = verifyState(value);\n\n        const params: TypeCheck<_FunctionFragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            constant: state.constant,\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): []),\n            outputs: (value.outputs ? value.outputs.map(ParamType.fromObject): [ ]),\n            payable: state.payable,\n            stateMutability: state.stateMutability,\n            gas: (value.gas ? BigNumber.from(value.gas): null)\n        };\n\n        return new FunctionFragment(_constructorGuard, params);\n    }\n\n    static fromString(value: string): FunctionFragment {\n        let params: any = { type: \"function\" };\n        value = parseGas(value, params);\n\n        let comps = value.split(\" returns \");\n        if (comps.length > 2) {\n            logger.throwArgumentError(\"invalid function string\", \"value\", value);\n        }\n\n        let parens = comps[0].match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid function signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        parseModifiers(parens[3].trim(), params);\n\n        // We have outputs\n        if (comps.length > 1) {\n           let returns = comps[1].match(regexParen);\n            if (returns[1].trim() != \"\" || returns[3].trim() != \"\") {\n                logger.throwArgumentError(\"unexpected tokens\", \"value\", value);\n            }\n            params.outputs = parseParams(returns[2], false);\n        } else {\n            params.outputs = [ ];\n        }\n\n        return FunctionFragment.fromObject(params);\n    }\n\n    static isFunctionFragment(value: any): value is FunctionFragment {\n        return (value && value._isFragment && value.type === \"function\");\n    }\n}\n\n//export class StructFragment extends Fragment {\n//}\n\nfunction checkForbidden(fragment: ErrorFragment): ErrorFragment {\n    const sig = fragment.format();\n    if (sig === \"Error(string)\" || sig === \"Panic(uint256)\") {\n        logger.throwArgumentError(`cannot specify user defined ${ sig } error`, \"fragment\", fragment);\n    }\n    return fragment;\n}\n\nexport class ErrorFragment extends Fragment {\n\n    format(format?: string): string {\n        if (!format) { format = FormatTypes.sighash; }\n        if (!FormatTypes[format]) {\n            logger.throwArgumentError(\"invalid format type\", \"format\", format);\n        }\n\n        if (format === FormatTypes.json) {\n            return JSON.stringify({\n                type: \"error\",\n                name: this.name,\n                inputs: this.inputs.map((input) => JSON.parse(input.format(format))),\n            });\n        }\n\n        let result = \"\";\n\n        if (format !== FormatTypes.sighash) {\n            result += \"error \";\n        }\n\n        result += this.name + \"(\" + this.inputs.map(\n            (input) => input.format(format)\n        ).join((format === FormatTypes.full) ? \", \": \",\") + \") \";\n\n        return result.trim();\n    }\n\n    static from(value: ErrorFragment | JsonFragment | string): ErrorFragment {\n        if (typeof(value) === \"string\") {\n            return ErrorFragment.fromString(value);\n        }\n        return ErrorFragment.fromObject(value);\n    }\n\n    static fromObject(value: ErrorFragment | JsonFragment): ErrorFragment {\n        if (ErrorFragment.isErrorFragment(value)) { return value; }\n\n        if (value.type !== \"error\") {\n            logger.throwArgumentError(\"invalid error object\", \"value\", value);\n        }\n\n        const params: TypeCheck<_Fragment> = {\n            type: value.type,\n            name: verifyIdentifier(value.name),\n            inputs: (value.inputs ? value.inputs.map(ParamType.fromObject): [])\n        };\n\n        return checkForbidden(new ErrorFragment(_constructorGuard, params));\n    }\n\n    static fromString(value: string): ErrorFragment {\n        let params: any = { type: \"error\" };\n\n        let parens = value.match(regexParen);\n        if (!parens) {\n            logger.throwArgumentError(\"invalid error signature\", \"value\", value);\n        }\n\n        params.name = parens[1].trim();\n        if (params.name) { verifyIdentifier(params.name); }\n\n        params.inputs = parseParams(parens[2], false);\n\n        return checkForbidden(ErrorFragment.fromObject(params));\n    }\n\n    static isErrorFragment(value: any): value is ErrorFragment {\n        return (value && value._isFragment && value.type === \"error\");\n    }\n}\n\nfunction verifyType(type: string): string {\n\n    // These need to be transformed to their full description\n    if (type.match(/^uint($|[^1-9])/)) {\n        type = \"uint256\" + type.substring(4);\n    } else if (type.match(/^int($|[^1-9])/)) {\n        type = \"int256\" + type.substring(3);\n    }\n\n    // @TODO: more verification\n\n    return type;\n}\n\n// See: https://github.com/ethereum/solidity/blob/1f8f1a3db93a548d0555e3e14cfc55a10e25b60e/docs/grammar/SolidityLexer.g4#L234\nconst regexIdentifier = new RegExp(\"^[a-zA-Z$_][a-zA-Z0-9$_]*$\");\nfunction verifyIdentifier(value: string): string {\n    if (!value || !value.match(regexIdentifier)) {\n        logger.throwArgumentError(`invalid identifier \"${ value }\"`, \"value\", value);\n    }\n    return value;\n}\n\nconst regexParen = new RegExp(\"^([^)(]*)\\\\((.*)\\\\)([^)(]*)$\");\n\nfunction splitNesting(value: string): Array<any> {\n    value = value.trim();\n\n    let result = [];\n    let accum = \"\";\n    let depth = 0;\n    for (let offset = 0; offset < value.length; offset++) {\n        let c = value[offset];\n        if (c === \",\" && depth === 0) {\n            result.push(accum);\n            accum = \"\";\n        } else {\n            accum += c;\n            if (c === \"(\") {\n                depth++;\n            } else if (c === \")\") {\n                depth--;\n                if (depth === -1) {\n                    logger.throwArgumentError(\"unbalanced parenthesis\", \"value\", value);\n                }\n            }\n        }\n    }\n    if (accum) { result.push(accum); }\n\n    return result;\n}\n\n"]},"metadata":{},"sourceType":"module"}