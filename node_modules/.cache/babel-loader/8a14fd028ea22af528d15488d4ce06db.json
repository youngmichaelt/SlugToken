{"ast":null,"code":"\"use strict\";\n\nimport _regeneratorRuntime from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { arrayify } from \"@ethersproject/bytes\";\nexport function getUrl(href, options) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var request, response, body, headers;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (options == null) {\n              options = {};\n            }\n\n            request = {\n              method: options.method || \"GET\",\n              headers: options.headers || {},\n              body: options.body || undefined\n            };\n\n            if (options.skipFetchSetup !== true) {\n              request.mode = \"cors\"; // no-cors, cors, *same-origin\n\n              request.cache = \"no-cache\"; // *default, no-cache, reload, force-cache, only-if-cached\n\n              request.credentials = \"same-origin\"; // include, *same-origin, omit\n\n              request.redirect = \"follow\"; // manual, *follow, error\n\n              request.referrer = \"client\"; // no-referrer, *client\n            }\n\n            ;\n            _context.next = 6;\n            return fetch(href, request);\n\n          case 6:\n            response = _context.sent;\n            _context.next = 9;\n            return response.arrayBuffer();\n\n          case 9:\n            body = _context.sent;\n            headers = {};\n\n            if (response.headers.forEach) {\n              response.headers.forEach(function (value, key) {\n                headers[key.toLowerCase()] = value;\n              });\n            } else {\n              response.headers.keys().forEach(function (key) {\n                headers[key.toLowerCase()] = response.headers.get(key);\n              });\n            }\n\n            return _context.abrupt(\"return\", {\n              headers: headers,\n              statusCode: response.status,\n              statusMessage: response.statusText,\n              body: arrayify(new Uint8Array(body))\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,QAAT,QAAyB,sBAAzB;AAMA,OAAM,SAAgBC,MAAhB,CAAuBC,IAAvB,EAAqCC,OAArC,EAAsD;;;;;;;AACxD,gBAAIA,OAAO,IAAI,IAAf,EAAqB;AAAEA,qBAAO,GAAG,EAAV;AAAgB;;AAEjCC,sBAAuB;AACzBC,oBAAM,EAAGF,OAAO,CAACE,MAAR,IAAkB,KADF;AAEzBC,qBAAO,EAAGH,OAAO,CAACG,OAAR,IAAmB,EAFJ;AAGzBC,kBAAI,EAAGJ,OAAO,CAACI,IAAR,IAAgBC;AAHE;;AAM7B,gBAAIL,OAAO,CAACM,cAAR,KAA2B,IAA/B,EAAqC;AACjCL,qBAAO,CAACM,IAAR,GAA4B,MAA5B,CADiC,CACgB;;AACjDN,qBAAO,CAACO,KAAR,GAA8B,UAA9B,CAFiC,CAEgB;;AACjDP,qBAAO,CAACQ,WAAR,GAA0C,aAA1C,CAHiC,CAGyB;;AAC1DR,qBAAO,CAACS,QAAR,GAAoC,QAApC,CAJiC,CAIgB;;AACjDT,qBAAO,CAACU,QAAR,GAAmB,QAAnB,CALiC,CAKgB;AACpD;;AAAA;;AAEgB,mBAAMC,KAAK,CAACb,IAAD,EAAOE,OAAP,CAAX;;;AAAXY;;AACO,mBAAMA,QAAQ,CAACC,WAAT,EAAN;;;AAAPV;AAEAD,sBAAwC;;AAC9C,gBAAIU,QAAQ,CAACV,OAAT,CAAiBY,OAArB,EAA8B;AAC1BF,sBAAQ,CAACV,OAAT,CAAiBY,OAAjB,CAAyB,UAACC,KAAD,EAAQC,GAAR,EAAe;AACpCd,uBAAO,CAACc,GAAG,CAACC,WAAJ,EAAD,CAAP,GAA6BF,KAA7B;AACH,eAFD;AAGH,aAJD,MAIO;AAC2BH,sBAAQ,CAACV,OAAV,CAAoBgB,IAA3B,GAAoCJ,OAApC,CAA4C,UAACE,GAAD,EAAQ;AACtEd,uBAAO,CAACc,GAAG,CAACC,WAAJ,EAAD,CAAP,GAA6BL,QAAQ,CAACV,OAAT,CAAiBiB,GAAjB,CAAqBH,GAArB,CAA7B;AACH,eAFqB;AAGzB;;6CAEM;AACHd,qBAAO,EAAEA,OADN;AAEHkB,wBAAU,EAAER,QAAQ,CAACS,MAFlB;AAGHC,2BAAa,EAAEV,QAAQ,CAACW,UAHrB;AAIHpB,kBAAI,EAAEP,QAAQ,CAAC,IAAI4B,UAAJ,CAAerB,IAAf,CAAD;AAJX;;;;;;;;;AAMV","names":["arrayify","getUrl","href","options","request","method","headers","body","undefined","skipFetchSetup","mode","cache","credentials","redirect","referrer","fetch","response","arrayBuffer","forEach","value","key","toLowerCase","keys","get","statusCode","status","statusMessage","statusText","Uint8Array"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/web/src.ts/browser-geturl.ts"],"sourcesContent":["\"use strict\";\n\nimport { arrayify } from \"@ethersproject/bytes\";\n\nimport type { GetUrlResponse, Options } from \"./types\";\n\nexport { GetUrlResponse, Options };\n\nexport async function getUrl(href: string, options?: Options): Promise<GetUrlResponse> {\n    if (options == null) { options = { }; }\n\n    const request: RequestInit = {\n        method: (options.method || \"GET\"),\n        headers: (options.headers || { }),\n        body: (options.body || undefined),\n    };\n\n    if (options.skipFetchSetup !== true) {\n        request.mode = <RequestMode>\"cors\";              // no-cors, cors, *same-origin\n        request.cache = <RequestCache>\"no-cache\";        // *default, no-cache, reload, force-cache, only-if-cached\n        request.credentials = <RequestCredentials>\"same-origin\";  // include, *same-origin, omit\n        request.redirect = <RequestRedirect>\"follow\";    // manual, *follow, error\n        request.referrer = \"client\";                     // no-referrer, *client\n    };\n\n    const response = await fetch(href, request);\n    const body = await response.arrayBuffer();\n\n    const headers: { [ name: string ]: string } = { };\n    if (response.headers.forEach) {\n        response.headers.forEach((value, key) => {\n            headers[key.toLowerCase()] = value;\n        });\n    } else {\n        (<() => Array<string>>((<any>(response.headers)).keys))().forEach((key) => {\n            headers[key.toLowerCase()] = response.headers.get(key);\n        });\n    }\n\n    return {\n        headers: headers,\n        statusCode: response.status,\n        statusMessage: response.statusText,\n        body: arrayify(new Uint8Array(body)),\n    }\n}\n"]},"metadata":{},"sourceType":"module"}