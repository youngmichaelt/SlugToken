{"ast":null,"code":"\"use strict\";\n\nimport _get from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nvar errorGas = [\"call\", \"estimateGas\"];\n\nfunction spelunk(value) {\n  if (value == null) {\n    return null;\n  } // These *are* the droids we're looking for.\n\n\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\") && isHexString(value.data)) {\n    return {\n      message: value.message,\n      data: value.data\n    };\n  } // Spelunk further...\n\n\n  if (typeof value === \"object\") {\n    for (var key in value) {\n      var result = spelunk(value[key]);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return null;\n  } // Might be a JSON string we can further descend...\n\n\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value));\n    } catch (error) {}\n  }\n\n  return null;\n}\n\nfunction checkError(method, error, params) {\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\") {\n    var result = spelunk(error);\n\n    if (result) {\n      return result.data;\n    }\n\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      error: error,\n      data: \"0x\"\n    });\n  } // @TODO: Should we spelunk for message too?\n\n\n  var message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase();\n  var transaction = params.transaction || params.signedTransaction; // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce (is )?too low/)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced/)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/only replay-protected/)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error: error,\n      method: method,\n      transaction: transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    var error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nvar _constructorGuard = {};\nexport var JsonRpcSigner = /*#__PURE__*/function (_Signer) {\n  _inherits(JsonRpcSigner, _Signer);\n\n  var _super = _createSuper(JsonRpcSigner);\n\n  function JsonRpcSigner(constructorGuard, provider, addressOrIndex) {\n    var _this;\n\n    _classCallCheck(this, JsonRpcSigner);\n\n    logger.checkNew(this instanceof JsonRpcSigner ? this.constructor : void 0, JsonRpcSigner);\n    _this = _super.call(this);\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(_assertThisInitialized(_this), \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this), \"_address\", _this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(_assertThisInitialized(_this), \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(_assertThisInitialized(_this), \"_index\", addressOrIndex);\n      defineReadOnly(_assertThisInitialized(_this), \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n\n    return _this;\n  }\n\n  _createClass(JsonRpcSigner, [{\n    key: \"connect\",\n    value: function connect(provider) {\n      return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"connect\"\n      });\n    }\n  }, {\n    key: \"connectUnchecked\",\n    value: function connectUnchecked() {\n      return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n  }, {\n    key: \"getAddress\",\n    value: function getAddress() {\n      var _this2 = this;\n\n      if (this._address) {\n        return Promise.resolve(this._address);\n      }\n\n      return this.provider.send(\"eth_accounts\", []).then(function (accounts) {\n        if (accounts.length <= _this2._index) {\n          logger.throwError(\"unknown account #\" + _this2._index, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getAddress\"\n          });\n        }\n\n        return _this2.provider.formatter.address(accounts[_this2._index]);\n      });\n    }\n  }, {\n    key: \"sendUncheckedTransaction\",\n    value: function sendUncheckedTransaction(transaction) {\n      var _this3 = this;\n\n      transaction = shallowCopy(transaction);\n      var fromAddress = this.getAddress().then(function (address) {\n        if (address) {\n          address = address.toLowerCase();\n        }\n\n        return address;\n      }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n      // wishes to use this, it is easy to specify explicitly, otherwise\n      // we look it up for them.\n\n      if (transaction.gasLimit == null) {\n        var estimate = shallowCopy(transaction);\n        estimate.from = fromAddress;\n        transaction.gasLimit = this.provider.estimateGas(estimate);\n      }\n\n      if (transaction.to != null) {\n        transaction.to = Promise.resolve(transaction.to).then(function (to) {\n          return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n            var address;\n            return _regeneratorRuntime.wrap(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    if (!(to == null)) {\n                      _context.next = 2;\n                      break;\n                    }\n\n                    return _context.abrupt(\"return\", null);\n\n                  case 2:\n                    _context.next = 4;\n                    return this.provider.resolveName(to);\n\n                  case 4:\n                    address = _context.sent;\n\n                    if (address == null) {\n                      logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                    }\n\n                    return _context.abrupt(\"return\", address);\n\n                  case 7:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, _callee, this);\n          }));\n        });\n      }\n\n      return resolveProperties({\n        tx: resolveProperties(transaction),\n        sender: fromAddress\n      }).then(function (_ref) {\n        var tx = _ref.tx,\n            sender = _ref.sender;\n\n        if (tx.from != null) {\n          if (tx.from.toLowerCase() !== sender) {\n            logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n          }\n        } else {\n          tx.from = sender;\n        }\n\n        var hexTx = _this3.provider.constructor.hexlifyTransaction(tx, {\n          from: true\n        });\n\n        return _this3.provider.send(\"eth_sendTransaction\", [hexTx]).then(function (hash) {\n          return hash;\n        }, function (error) {\n          return checkError(\"sendTransaction\", error, hexTx);\n        });\n      });\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"signTransaction\"\n      });\n    }\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this4 = this;\n\n        var blockNumber, hash;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n              case 2:\n                blockNumber = _context3.sent;\n                _context3.next = 5;\n                return this.sendUncheckedTransaction(transaction);\n\n              case 5:\n                hash = _context3.sent;\n                _context3.prev = 6;\n                _context3.next = 9;\n                return poll(function () {\n                  return __awaiter(_this4, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                    var tx;\n                    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                      while (1) {\n                        switch (_context2.prev = _context2.next) {\n                          case 0:\n                            _context2.next = 2;\n                            return this.provider.getTransaction(hash);\n\n                          case 2:\n                            tx = _context2.sent;\n\n                            if (!(tx === null)) {\n                              _context2.next = 5;\n                              break;\n                            }\n\n                            return _context2.abrupt(\"return\", undefined);\n\n                          case 5:\n                            return _context2.abrupt(\"return\", this.provider._wrapTransaction(tx, hash, blockNumber));\n\n                          case 6:\n                          case \"end\":\n                            return _context2.stop();\n                        }\n                      }\n                    }, _callee2, this);\n                  }));\n                }, {\n                  oncePoll: this.provider\n                });\n\n              case 9:\n                return _context3.abrupt(\"return\", _context3.sent);\n\n              case 12:\n                _context3.prev = 12;\n                _context3.t0 = _context3[\"catch\"](6);\n                _context3.t0.transactionHash = hash;\n                throw _context3.t0;\n\n              case 16:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[6, 12]]);\n      }));\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var data, address;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n                _context4.next = 3;\n                return this.getAddress();\n\n              case 3:\n                address = _context4.sent;\n                _context4.next = 6;\n                return this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n\n              case 6:\n                return _context4.abrupt(\"return\", _context4.sent);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"_legacySignMessage\",\n    value: function _legacySignMessage(message) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var data, address;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n                _context5.next = 3;\n                return this.getAddress();\n\n              case 3:\n                address = _context5.sent;\n                _context5.next = 6;\n                return this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n\n              case 6:\n                return _context5.abrupt(\"return\", _context5.sent);\n\n              case 7:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"_signTypedData\",\n    value: function _signTypedData(domain, types, value) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _this5 = this;\n\n        var populated, address;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return _TypedDataEncoder.resolveNames(domain, types, value, function (name) {\n                  return _this5.provider.resolveName(name);\n                });\n\n              case 2:\n                populated = _context6.sent;\n                _context6.next = 5;\n                return this.getAddress();\n\n              case 5:\n                address = _context6.sent;\n                _context6.next = 8;\n                return this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n\n              case 8:\n                return _context6.abrupt(\"return\", _context6.sent);\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n    }\n  }, {\n    key: \"unlock\",\n    value: function unlock(password) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        var provider, address;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                provider = this.provider;\n                _context7.next = 3;\n                return this.getAddress();\n\n              case 3:\n                address = _context7.sent;\n                return _context7.abrupt(\"return\", provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]));\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n    }\n  }]);\n\n  return JsonRpcSigner;\n}(Signer);\n\nvar UncheckedJsonRpcSigner = /*#__PURE__*/function (_JsonRpcSigner) {\n  _inherits(UncheckedJsonRpcSigner, _JsonRpcSigner);\n\n  var _super2 = _createSuper(UncheckedJsonRpcSigner);\n\n  function UncheckedJsonRpcSigner() {\n    _classCallCheck(this, UncheckedJsonRpcSigner);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(UncheckedJsonRpcSigner, [{\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      var _this6 = this;\n\n      return this.sendUncheckedTransaction(transaction).then(function (hash) {\n        return {\n          hash: hash,\n          nonce: null,\n          gasLimit: null,\n          gasPrice: null,\n          data: null,\n          value: null,\n          chainId: null,\n          confirmations: 0,\n          from: null,\n          wait: function wait(confirmations) {\n            return _this6.provider.waitForTransaction(hash, confirmations);\n          }\n        };\n      });\n    }\n  }]);\n\n  return UncheckedJsonRpcSigner;\n}(JsonRpcSigner);\n\nvar allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport var JsonRpcProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(JsonRpcProvider, _BaseProvider);\n\n  var _super3 = _createSuper(JsonRpcProvider);\n\n  function JsonRpcProvider(url, network) {\n    var _this7;\n\n    _classCallCheck(this, JsonRpcProvider);\n\n    logger.checkNew(this instanceof JsonRpcProvider ? this.constructor : void 0, JsonRpcProvider);\n    var networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise(function (resolve, reject) {\n        setTimeout(function () {\n          _this7.detectNetwork().then(function (network) {\n            resolve(network);\n          }, function (error) {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    _this7 = _super3.call(this, networkOrReady); // Default URL\n\n    if (!url) {\n      url = getStatic(_this7.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this7), \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(_assertThisInitialized(_this7), \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    _this7._nextId = 42;\n    return _this7;\n  }\n\n  _createClass(JsonRpcProvider, [{\n    key: \"_cache\",\n    get: function get() {\n      if (this._eventLoopCache == null) {\n        this._eventLoopCache = {};\n      }\n\n      return this._eventLoopCache;\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      var _this8 = this;\n\n      if (!this._cache[\"detectNetwork\"]) {\n        this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop\n\n        setTimeout(function () {\n          _this8._cache[\"detectNetwork\"] = null;\n        }, 0);\n      }\n\n      return this._cache[\"detectNetwork\"];\n    }\n  }, {\n    key: \"_uncachedDetectNetwork\",\n    value: function _uncachedDetectNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var chainId, getNetwork;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return timer(0);\n\n              case 2:\n                chainId = null;\n                _context8.prev = 3;\n                _context8.next = 6;\n                return this.send(\"eth_chainId\", []);\n\n              case 6:\n                chainId = _context8.sent;\n                _context8.next = 19;\n                break;\n\n              case 9:\n                _context8.prev = 9;\n                _context8.t0 = _context8[\"catch\"](3);\n                _context8.prev = 11;\n                _context8.next = 14;\n                return this.send(\"net_version\", []);\n\n              case 14:\n                chainId = _context8.sent;\n                _context8.next = 19;\n                break;\n\n              case 17:\n                _context8.prev = 17;\n                _context8.t1 = _context8[\"catch\"](11);\n\n              case 19:\n                if (!(chainId != null)) {\n                  _context8.next = 28;\n                  break;\n                }\n\n                getNetwork = getStatic(this.constructor, \"getNetwork\");\n                _context8.prev = 21;\n                return _context8.abrupt(\"return\", getNetwork(BigNumber.from(chainId).toNumber()));\n\n              case 25:\n                _context8.prev = 25;\n                _context8.t2 = _context8[\"catch\"](21);\n                return _context8.abrupt(\"return\", logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  chainId: chainId,\n                  event: \"invalidNetwork\",\n                  serverError: _context8.t2\n                }));\n\n              case 28:\n                return _context8.abrupt(\"return\", logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                  event: \"noNetwork\"\n                }));\n\n              case 29:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this, [[3, 9], [11, 17], [21, 25]]);\n      }));\n    }\n  }, {\n    key: \"getSigner\",\n    value: function getSigner(addressOrIndex) {\n      return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n  }, {\n    key: \"getUncheckedSigner\",\n    value: function getUncheckedSigner(addressOrIndex) {\n      return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n  }, {\n    key: \"listAccounts\",\n    value: function listAccounts() {\n      var _this9 = this;\n\n      return this.send(\"eth_accounts\", []).then(function (accounts) {\n        return accounts.map(function (a) {\n          return _this9.formatter.address(a);\n        });\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this10 = this;\n\n      var request = {\n        method: method,\n        params: params,\n        id: this._nextId++,\n        jsonrpc: \"2.0\"\n      };\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: deepCopy(request),\n        provider: this\n      }); // We can expand this in the future to any call, but for now these\n      // are the biggest wins and do not require any serializing parameters.\n\n      var cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n\n      if (cache && this._cache[method]) {\n        return this._cache[method];\n      }\n\n      var result = fetchJson(this.connection, JSON.stringify(request), getResult).then(function (result) {\n        _this10.emit(\"debug\", {\n          action: \"response\",\n          request: request,\n          response: result,\n          provider: _this10\n        });\n\n        return result;\n      }, function (error) {\n        _this10.emit(\"debug\", {\n          action: \"response\",\n          error: error,\n          request: request,\n          provider: _this10\n        });\n\n        throw error;\n      }); // Cache the fetch, but clear it on the next event loop\n\n      if (cache) {\n        this._cache[method] = result;\n        setTimeout(function () {\n          _this10._cache[method] = null;\n        }, 0);\n      }\n\n      return result;\n    }\n  }, {\n    key: \"prepareRequest\",\n    value: function prepareRequest(method, params) {\n      switch (method) {\n        case \"getBlockNumber\":\n          return [\"eth_blockNumber\", []];\n\n        case \"getGasPrice\":\n          return [\"eth_gasPrice\", []];\n\n        case \"getBalance\":\n          return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getTransactionCount\":\n          return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getCode\":\n          return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n        case \"getStorageAt\":\n          return [\"eth_getStorageAt\", [getLowerCase(params.address), params.position, params.blockTag]];\n\n        case \"sendTransaction\":\n          return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n        case \"getBlock\":\n          if (params.blockTag) {\n            return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n          } else if (params.blockHash) {\n            return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n          }\n\n          return null;\n\n        case \"getTransaction\":\n          return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n        case \"getTransactionReceipt\":\n          return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n        case \"call\":\n          {\n            var hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n            return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n              from: true\n            }), params.blockTag]];\n          }\n\n        case \"estimateGas\":\n          {\n            var _hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n\n            return [\"eth_estimateGas\", [_hexlifyTransaction(params.transaction, {\n              from: true\n            })]];\n          }\n\n        case \"getLogs\":\n          if (params.filter && params.filter.address != null) {\n            params.filter.address = getLowerCase(params.filter.address);\n          }\n\n          return [\"eth_getLogs\", [params.filter]];\n\n        default:\n          break;\n      }\n\n      return null;\n    }\n  }, {\n    key: \"perform\",\n    value: function perform(method, params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        var tx, feeData, args;\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(method === \"call\" || method === \"estimateGas\")) {\n                  _context9.next = 8;\n                  break;\n                }\n\n                tx = params.transaction;\n\n                if (!(tx && tx.type != null && BigNumber.from(tx.type).isZero())) {\n                  _context9.next = 8;\n                  break;\n                }\n\n                if (!(tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null)) {\n                  _context9.next = 8;\n                  break;\n                }\n\n                _context9.next = 6;\n                return this.getFeeData();\n\n              case 6:\n                feeData = _context9.sent;\n\n                if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                  // Network doesn't know about EIP-1559 (and hence type)\n                  params = shallowCopy(params);\n                  params.transaction = shallowCopy(tx);\n                  delete params.transaction.type;\n                }\n\n              case 8:\n                args = this.prepareRequest(method, params);\n\n                if (args == null) {\n                  logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n                    operation: method\n                  });\n                }\n\n                _context9.prev = 10;\n                _context9.next = 13;\n                return this.send(args[0], args[1]);\n\n              case 13:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 16:\n                _context9.prev = 16;\n                _context9.t0 = _context9[\"catch\"](10);\n                return _context9.abrupt(\"return\", checkError(method, _context9.t0, params));\n\n              case 19:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this, [[10, 16]]);\n      }));\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      if (event.tag === \"pending\") {\n        this._startPending();\n      }\n\n      _get(_getPrototypeOf(JsonRpcProvider.prototype), \"_startEvent\", this).call(this, event);\n    }\n  }, {\n    key: \"_startPending\",\n    value: function _startPending() {\n      if (this._pendingFilter != null) {\n        return;\n      }\n\n      var self = this;\n      var pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n      this._pendingFilter = pendingFilter;\n      pendingFilter.then(function (filterId) {\n        function poll() {\n          self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n            if (self._pendingFilter != pendingFilter) {\n              return null;\n            }\n\n            var seq = Promise.resolve();\n            hashes.forEach(function (hash) {\n              // @TODO: This should be garbage collected at some point... How? When?\n              self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n              seq = seq.then(function () {\n                return self.getTransaction(hash).then(function (tx) {\n                  self.emit(\"pending\", tx);\n                  return null;\n                });\n              });\n            });\n            return seq.then(function () {\n              return timer(1000);\n            });\n          }).then(function () {\n            if (self._pendingFilter != pendingFilter) {\n              self.send(\"eth_uninstallFilter\", [filterId]);\n              return;\n            }\n\n            setTimeout(function () {\n              poll();\n            }, 0);\n            return null;\n          }).catch(function (error) {});\n        }\n\n        poll();\n        return filterId;\n      }).catch(function (error) {});\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n        this._pendingFilter = null;\n      }\n\n      _get(_getPrototypeOf(JsonRpcProvider.prototype), \"_stopEvent\", this).call(this, event);\n    } // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n\n  }], [{\n    key: \"defaultUrl\",\n    value: function defaultUrl() {\n      return \"http:/\\/localhost:8545\";\n    }\n  }, {\n    key: \"hexlifyTransaction\",\n    value: function hexlifyTransaction(transaction, allowExtra) {\n      // Check only allowed properties are given\n      var allowed = shallowCopy(allowedTransactionKeys);\n\n      if (allowExtra) {\n        for (var key in allowExtra) {\n          if (allowExtra[key]) {\n            allowed[key] = true;\n          }\n        }\n      }\n\n      checkProperties(transaction, allowed);\n      var result = {}; // JSON-RPC now requires numeric values to be \"quantity\" values\n\n      [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n        if (transaction[key] == null) {\n          return;\n        }\n\n        var value = hexValue(transaction[key]);\n\n        if (key === \"gasLimit\") {\n          key = \"gas\";\n        }\n\n        result[key] = value;\n      });\n      [\"from\", \"to\", \"data\"].forEach(function (key) {\n        if (transaction[key] == null) {\n          return;\n        }\n\n        result[key] = hexlify(transaction[key]);\n      });\n\n      if (transaction.accessList) {\n        result[\"accessList\"] = accessListify(transaction.accessList);\n      }\n\n      return result;\n    }\n  }]);\n\n  return JsonRpcProvider;\n}(BaseProvider);","map":{"version":3,"mappings":"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","names":["Signer","BigNumber","hexlify","hexValue","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","value","message","match","data","key","result","JSON","parse","error","checkError","method","params","throwError","errors","CALL_EXCEPTION","code","SERVER_ERROR","body","responseText","toLowerCase","transaction","signedTransaction","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","UNPREDICTABLE_GAS_LIMIT","timer","timeout","Promise","resolve","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","provider","addressOrIndex","checkNew","formatter","address","throwArgumentError","operation","UncheckedJsonRpcSigner","_address","_index","send","then","accounts","length","fromAddress","getAddress","gasLimit","estimate","from","estimateGas","to","__awaiter","resolveName","tx","sender","hexTx","constructor","hexlifyTransaction","hash","_getInternalBlockNumber","pollingInterval","blockNumber","sendUncheckedTransaction","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","domain","types","resolveNames","name","populated","stringify","getPayload","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","reject","detectNetwork","Object","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","connectUnchecked","map","a","request","id","jsonrpc","emit","action","cache","connection","response","blockTag","position","includeTransactions","blockHash","filter","isZero","getFeeData","feeData","args","prepareRequest","NOT_IMPLEMENTED","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","listenerCount","allowExtra","allowed"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any): null | { message: string, data: string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\") && isHexString(value.data)) {\n        return { message: value.message, data: value.data };\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key]);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value));\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error);\n        if (result) { return result.data; }\n\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        logger.checkNew(new.target, JsonRpcSigner);\n\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        logger.checkNew(new.target, JsonRpcProvider);\n\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), params.position, params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue((<any>transaction)[key]);\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}