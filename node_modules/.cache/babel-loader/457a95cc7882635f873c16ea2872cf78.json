{"ast":null,"code":"var _jsxFileName = \"/Users/michaelyoung/repos/slugsite/src/Interactions.js\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Interactions = props => {\n  _s();\n\n  const [txnHash, setTxnHash] = useState();\n  const [allowance, setAllowance] = useState();\n  const [ApproveOrStake, setApproveOrStake] = useState();\n  const [stakeBalance, setStakeBalance] = useState();\n  let contract = props.contract.contract;\n  let defaultAccount = props.contract.defaultAccount;\n\n  const approveOrStake = async () => {\n    let contractAddress = await contract.address;\n    let allowance = await contract.allowance(defaultAccount, contractAddress);\n    let allowanceBalance = allowance / Math.pow(10, 18);\n    setAllowance(allowanceBalance);\n\n    if (allowanceBalance > 0) {\n      setApproveOrStake(\"Stake\");\n    } else {\n      setApproveOrStake(\"Approve\");\n    }\n  };\n\n  const getStakeBalance = async () => {\n    let [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n\n    if (isStakeHolder == true) {\n      let stakeAmountBig = await contract.stakedTokens(defaultAccount);\n      let stakeAmount = stakeAmountBig / Math.pow(10, 18);\n      setStakeBalance(stakeAmount);\n    } else {\n      setStakeBalance(0);\n    }\n  };\n\n  const stakeHandler = async e => {\n    let contractAddress = await contract.address; // let allowance = await contract.allowance(defaultAccount, contractAddress);\n    // let allowanceBalance = allowance / Math.pow(10, 18);\n\n    let stakeAmount = e.target.stakeAmount.value;\n    console.log(allowanceBalance, stakeAmount);\n\n    if (allowanceBalance > stakeAmount) {\n      let txn = await contract.stakeToken(stakeAmount);\n      console.log(txn);\n      setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n    } else {\n      let txn = await contract.approve(contractAddress, stakeAmount);\n      console.log(txn);\n      setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n    }\n  };\n\n  useEffect(() => {\n    if (contract != null) {\n      approveOrStake();\n      getStakeBalance();\n    } else {\n      setApproveOrStake(\"Approve\");\n    }\n  }, [contract]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: stakeHandler,\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Stake tokens \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Amount\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"stakeAmount\",\n        min: \"0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: ApproveOrStake\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Staked balance: \", stakeBalance]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: txnHash\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Interactions, \"o7nscfGUOYa5DC8ilKDMqo0n1pU=\");\n\n_c = Interactions;\nexport default Interactions;\n\nvar _c;\n\n$RefreshReg$(_c, \"Interactions\");","map":{"version":3,"sources":["/Users/michaelyoung/repos/slugsite/src/Interactions.js"],"names":["React","useState","useEffect","ethers","Interactions","props","txnHash","setTxnHash","allowance","setAllowance","ApproveOrStake","setApproveOrStake","stakeBalance","setStakeBalance","contract","defaultAccount","approveOrStake","contractAddress","address","allowanceBalance","Math","pow","getStakeBalance","isStakeHolder","stakeId","isStakeholder","stakeAmountBig","stakedTokens","stakeAmount","stakeHandler","e","target","value","console","log","txn","stakeToken","hash","approve"],"mappings":"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","sourcesContent":["import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\n\nconst Interactions = (props) => {\n\n    const [txnHash, setTxnHash] = useState();\n\n    const [allowance, setAllowance] = useState();\n    const [ApproveOrStake, setApproveOrStake] = useState();\n    const [stakeBalance, setStakeBalance] = useState();\n\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    \n\n    const approveOrStake = async () => {\n        let contractAddress = await contract.address;\n        let allowance = await contract.allowance(defaultAccount, contractAddress);\n\n        let allowanceBalance = allowance / Math.pow(10, 18);\n        setAllowance(allowanceBalance);\n\n        if (allowanceBalance > 0){\n            setApproveOrStake(\"Stake\");\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    }\n\n    const getStakeBalance = async () =>{\n        let [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n        \n        if (isStakeHolder == true){\n            let stakeAmountBig = await contract.stakedTokens(defaultAccount);\n            let stakeAmount = stakeAmountBig / Math.pow(10, 18);\n            setStakeBalance(stakeAmount);\n        } else {\n            setStakeBalance(0);\n        }\n    }\n\n    const stakeHandler = async (e) => {\n        let contractAddress = await contract.address;\n        // let allowance = await contract.allowance(defaultAccount, contractAddress);\n        // let allowanceBalance = allowance / Math.pow(10, 18);\n        \n\n        let stakeAmount = e.target.stakeAmount.value;\n        console.log(allowanceBalance, stakeAmount)\n\n        if (allowanceBalance > stakeAmount){\n\n            let txn = await contract.stakeToken(stakeAmount);\n            console.log(txn);\n\t\t    setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n\n        } else {\n            let txn = await contract.approve(contractAddress, stakeAmount);\n            console.log(txn);\n\t\t    setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n        }\n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            approveOrStake();\n            getStakeBalance();\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    },[contract])\n\n    return (\n        <div>\n            <form onSubmit={stakeHandler}>\n                <h3>Stake tokens </h3>\n                <p>Amount</p>\n                <input type='number' id='stakeAmount' min='0'></input>\n                <button type='submit'>{ApproveOrStake}</button>\n            </form>\n            <div>\n                <h3>Staked balance: {stakeBalance}</h3>\n            </div>\n            <div>\n\t\t\t\t{txnHash}\n\t\t\t</div>\n        </div>\n\n    );\n\n}\n\nexport default Interactions;"]},"metadata":{},"sourceType":"module"}