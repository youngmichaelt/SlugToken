{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _possibleConstructorReturn from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\";\nimport _assertThisInitialized from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _inherits from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _get from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _regeneratorRuntime from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nvar NextId = 1; // For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport var WebSocketProvider = /*#__PURE__*/function (_JsonRpcProvider) {\n  _inherits(WebSocketProvider, _JsonRpcProvider);\n\n  var _super = _createSuper(WebSocketProvider);\n\n  function WebSocketProvider(url, network) {\n    var _thisSuper, _this;\n\n    _classCallCheck(this, WebSocketProvider);\n\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n\n    if (typeof url === \"string\") {\n      _this = _super.call(this, url, network);\n    } else {\n      _this = _super.call(this, \"_websocket\", network);\n    }\n\n    _this._pollingInterval = -1;\n    _this._wsReady = false;\n\n    if (typeof url === \"string\") {\n      defineReadOnly(_assertThisInitialized(_this), \"_websocket\", new WebSocket(_this.connection.url));\n    } else {\n      defineReadOnly(_assertThisInitialized(_this), \"_websocket\", url);\n    }\n\n    defineReadOnly(_assertThisInitialized(_this), \"_requests\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_subs\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_subIds\", {});\n    defineReadOnly(_assertThisInitialized(_this), \"_detectNetwork\", _get((_thisSuper = _assertThisInitialized(_this), _getPrototypeOf(WebSocketProvider.prototype)), \"detectNetwork\", _thisSuper).call(_thisSuper)); // Stall sending requests until the socket is open...\n\n    _this.websocket.onopen = function () {\n      _this._wsReady = true;\n      Object.keys(_this._requests).forEach(function (id) {\n        _this.websocket.send(_this._requests[id].payload);\n      });\n    };\n\n    _this.websocket.onmessage = function (messageEvent) {\n      var data = messageEvent.data;\n      var result = JSON.parse(data);\n\n      if (result.id != null) {\n        var id = String(result.id);\n        var request = _this._requests[id];\n        delete _this._requests[id];\n\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n\n          _this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: _assertThisInitialized(_this)\n          });\n        } else {\n          var error = null;\n\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n\n          request.callback(error, undefined);\n\n          _this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: _assertThisInitialized(_this)\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        var sub = _this._subs[result.params.subscription];\n\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    }; // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n\n\n    var fauxPoll = setInterval(function () {\n      _this.emit(\"poll\");\n    }, 1000);\n\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n\n    return _possibleConstructorReturn(_this);\n  } // Cannot narrow the type of _websocket, as that is not backwards compatible\n  // so we add a getter and let the WebSocket be a public API.\n\n\n  _createClass(WebSocketProvider, [{\n    key: \"websocket\",\n    get: function get() {\n      return this._websocket;\n    }\n  }, {\n    key: \"detectNetwork\",\n    value: function detectNetwork() {\n      return this._detectNetwork;\n    }\n  }, {\n    key: \"pollingInterval\",\n    get: function get() {\n      return 0;\n    },\n    set: function set(value) {\n      logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setPollingInterval\"\n      });\n    }\n  }, {\n    key: \"resetEventsBlock\",\n    value: function resetEventsBlock(blockNumber) {\n      logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"resetEventBlock\"\n      });\n    }\n  }, {\n    key: \"poll\",\n    value: function poll() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                return _context.abrupt(\"return\", null);\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n    }\n  }, {\n    key: \"polling\",\n    set: function set(value) {\n      if (!value) {\n        return;\n      }\n\n      logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setPolling\"\n      });\n    }\n  }, {\n    key: \"send\",\n    value: function send(method, params) {\n      var _this2 = this;\n\n      var rid = NextId++;\n      return new Promise(function (resolve, reject) {\n        function callback(error, result) {\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve(result);\n        }\n\n        var payload = JSON.stringify({\n          method: method,\n          params: params,\n          id: rid,\n          jsonrpc: \"2.0\"\n        });\n\n        _this2.emit(\"debug\", {\n          action: \"request\",\n          request: JSON.parse(payload),\n          provider: _this2\n        });\n\n        _this2._requests[String(rid)] = {\n          callback: callback,\n          payload: payload\n        };\n\n        if (_this2._wsReady) {\n          _this2.websocket.send(payload);\n        }\n      });\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(tag, param, processFunc) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var subIdPromise, subId;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                subIdPromise = this._subIds[tag];\n\n                if (subIdPromise == null) {\n                  subIdPromise = Promise.all(param).then(function (param) {\n                    return _this3.send(\"eth_subscribe\", param);\n                  });\n                  this._subIds[tag] = subIdPromise;\n                }\n\n                _context2.next = 4;\n                return subIdPromise;\n\n              case 4:\n                subId = _context2.sent;\n                this._subs[subId] = {\n                  tag: tag,\n                  processFunc: processFunc\n                };\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_startEvent\",\n    value: function _startEvent(event) {\n      var _this4 = this;\n\n      switch (event.type) {\n        case \"block\":\n          this._subscribe(\"block\", [\"newHeads\"], function (result) {\n            var blockNumber = BigNumber.from(result.number).toNumber();\n            _this4._emitted.block = blockNumber;\n\n            _this4.emit(\"block\", blockNumber);\n          });\n\n          break;\n\n        case \"pending\":\n          this._subscribe(\"pending\", [\"newPendingTransactions\"], function (result) {\n            _this4.emit(\"pending\", result);\n          });\n\n          break;\n\n        case \"filter\":\n          this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], function (result) {\n            if (result.removed == null) {\n              result.removed = false;\n            }\n\n            _this4.emit(event.filter, _this4.formatter.filterLog(result));\n          });\n\n          break;\n\n        case \"tx\":\n          {\n            var emitReceipt = function emitReceipt(event) {\n              var hash = event.hash;\n\n              _this4.getTransactionReceipt(hash).then(function (receipt) {\n                if (!receipt) {\n                  return;\n                }\n\n                _this4.emit(hash, receipt);\n              });\n            }; // In case it is already mined\n\n\n            emitReceipt(event); // To keep things simple, we start up a single newHeads subscription\n            // to keep an eye out for transactions we are watching for.\n            // Starting a subscription for an event (i.e. \"tx\") that is already\n            // running is (basically) a nop.\n\n            this._subscribe(\"tx\", [\"newHeads\"], function (result) {\n              _this4._events.filter(function (e) {\n                return e.type === \"tx\";\n              }).forEach(emitReceipt);\n            });\n\n            break;\n          }\n        // Nothing is needed\n\n        case \"debug\":\n        case \"poll\":\n        case \"willPoll\":\n        case \"didPoll\":\n        case \"error\":\n          break;\n\n        default:\n          console.log(\"unhandled:\", event);\n          break;\n      }\n    }\n  }, {\n    key: \"_stopEvent\",\n    value: function _stopEvent(event) {\n      var _this5 = this;\n\n      var tag = event.tag;\n\n      if (event.type === \"tx\") {\n        // There are remaining transaction event listeners\n        if (this._events.filter(function (e) {\n          return e.type === \"tx\";\n        }).length) {\n          return;\n        }\n\n        tag = \"tx\";\n      } else if (this.listenerCount(event.event)) {\n        // There are remaining event listeners\n        return;\n      }\n\n      var subId = this._subIds[tag];\n\n      if (!subId) {\n        return;\n      }\n\n      delete this._subIds[tag];\n      subId.then(function (subId) {\n        if (!_this5._subs[subId]) {\n          return;\n        }\n\n        delete _this5._subs[subId];\n\n        _this5.send(\"eth_unsubscribe\", [subId]);\n      });\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var _this6 = this;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!(this.websocket.readyState === WebSocket.CONNECTING)) {\n                  _context3.next = 3;\n                  break;\n                }\n\n                _context3.next = 3;\n                return new Promise(function (resolve) {\n                  _this6.websocket.onopen = function () {\n                    resolve(true);\n                  };\n\n                  _this6.websocket.onerror = function () {\n                    resolve(false);\n                  };\n                });\n\n              case 3:\n                // Hangup\n                // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n                this.websocket.close(1000);\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n    }\n  }], [{\n    key: \"defaultUrl\",\n    value: function defaultUrl() {\n      return \"ws:/\\/localhost:8546\";\n    }\n  }]);\n\n  return WebSocketProvider;\n}(JsonRpcProvider);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,SAASA,SAAT,QAA0B,0BAA1B;AAEA,SAASC,cAAT,QAA+B,2BAA/B;AAGA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,SAAT,QAA0B,MAA1B;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA;;;;;;;;;;;;;;;AAeA,IAAIE,MAAM,GAAG,CAAb,C,CAuBA;AACA;;AAEA,WAAaC,iBAAb;AAAA;;AAAA;;AAaI,6BAAYC,GAAZ,EAAyCC,OAAzC,EAA6D;AAAA;;AAAA;;AAEzD;AACA,QAAIA,OAAO,KAAK,KAAhB,EAAuB;AACnBJ,YAAM,CAACK,UAAP,CAAkB,sDAAlB,EAA0EP,MAAM,CAACQ,MAAP,CAAcC,qBAAxF,EAA+G;AAC3GC,iBAAS,EAAE;AADgG,OAA/G;AAGH;;AAED,QAAI,OAAOL,GAAP,KAAgB,QAApB,EAA8B;AAC1B,gCAAMA,GAAN,EAAWC,OAAX;AACH,KAFD,MAEO;AACH,gCAAM,YAAN,EAAoBA,OAApB;AACH;;AAED,UAAKK,gBAAL,GAAwB,CAAC,CAAzB;AAEA,UAAKC,QAAL,GAAgB,KAAhB;;AAEA,QAAI,OAAOP,GAAP,KAAgB,QAApB,EAA8B;AAC1BR,oBAAc,gCAAO,YAAP,EAAqB,IAAIE,SAAJ,CAAc,MAAKc,UAAL,CAAgBR,GAA9B,CAArB,CAAd;AACH,KAFD,MAEO;AACHR,oBAAc,gCAAO,YAAP,EAAqBQ,GAArB,CAAd;AACH;;AAEDR,kBAAc,gCAAO,WAAP,EAAoB,EAApB,CAAd;AACAA,kBAAc,gCAAO,OAAP,EAAgB,EAAhB,CAAd;AACAA,kBAAc,gCAAO,SAAP,EAAkB,EAAlB,CAAd;AACAA,kBAAc,gCAAO,gBAAP,iJAAd,CA5ByD,CA8BzD;;AACA,UAAKiB,SAAL,CAAeC,MAAf,GAAwB,YAAK;AACzB,YAAKH,QAAL,GAAgB,IAAhB;AACAI,YAAM,CAACC,IAAP,CAAY,MAAKC,SAAjB,EAA4BC,OAA5B,CAAoC,UAACC,EAAD,EAAO;AACvC,cAAKN,SAAL,CAAeO,IAAf,CAAoB,MAAKH,SAAL,CAAeE,EAAf,EAAmBE,OAAvC;AACH,OAFD;AAGH,KALD;;AAOA,UAAKR,SAAL,CAAeS,SAAf,GAA2B,UAACC,YAAD,EAAmC;AAC1D,UAAMC,IAAI,GAAGD,YAAY,CAACC,IAA1B;AACA,UAAMC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAf;;AACA,UAAIC,MAAM,CAACN,EAAP,IAAa,IAAjB,EAAuB;AACnB,YAAMA,EAAE,GAAGS,MAAM,CAACH,MAAM,CAACN,EAAR,CAAjB;AACA,YAAMU,OAAO,GAAG,MAAKZ,SAAL,CAAeE,EAAf,CAAhB;AACA,eAAO,MAAKF,SAAL,CAAeE,EAAf,CAAP;;AAEA,YAAIM,MAAM,CAACA,MAAP,KAAkBK,SAAtB,EAAiC;AAC7BD,iBAAO,CAACE,QAAR,CAAiB,IAAjB,EAAuBN,MAAM,CAACA,MAA9B;;AAEA,gBAAKO,IAAL,CAAU,OAAV,EAAmB;AACfC,kBAAM,EAAE,UADO;AAEfJ,mBAAO,EAAEH,IAAI,CAACC,KAAL,CAAWE,OAAO,CAACR,OAAnB,CAFM;AAGfa,oBAAQ,EAAET,MAAM,CAACA,MAHF;AAIfU,oBAAQ;AAJO,WAAnB;AAOH,SAVD,MAUO;AACH,cAAIC,KAAK,GAAU,IAAnB;;AACA,cAAIX,MAAM,CAACW,KAAX,EAAkB;AACdA,iBAAK,GAAG,IAAIC,KAAJ,CAAUZ,MAAM,CAACW,KAAP,CAAaE,OAAb,IAAwB,eAAlC,CAAR;AACA1C,0BAAc,CAAMwC,KAAN,EAAa,MAAb,EAAqBX,MAAM,CAACW,KAAP,CAAaG,IAAb,IAAqB,IAA1C,CAAd;AACA3C,0BAAc,CAAMwC,KAAN,EAAa,UAAb,EAAyBZ,IAAzB,CAAd;AACH,WAJD,MAIO;AACHY,iBAAK,GAAG,IAAIC,KAAJ,CAAU,eAAV,CAAR;AACH;;AAEDR,iBAAO,CAACE,QAAR,CAAiBK,KAAjB,EAAwBN,SAAxB;;AAEA,gBAAKE,IAAL,CAAU,OAAV,EAAmB;AACfC,kBAAM,EAAE,UADO;AAEfG,iBAAK,EAAEA,KAFQ;AAGfP,mBAAO,EAAEH,IAAI,CAACC,KAAL,CAAWE,OAAO,CAACR,OAAnB,CAHM;AAIfc,oBAAQ;AAJO,WAAnB;AAOH;AAEJ,OApCD,MAoCO,IAAIV,MAAM,CAACe,MAAP,KAAkB,kBAAtB,EAA0C;AAC7C;AACA,YAAMC,GAAG,GAAG,MAAKC,KAAL,CAAWjB,MAAM,CAACkB,MAAP,CAAcC,YAAzB,CAAZ;;AACA,YAAIH,GAAJ,EAAS;AACL;AACAA,aAAG,CAACI,WAAJ,CAAgBpB,MAAM,CAACkB,MAAP,CAAclB,MAA9B;AACH;AAEJ,OARM,MAQA;AACHqB,eAAO,CAACC,IAAR,CAAa,wBAAb;AACH;AACJ,KAlDD,CAtCyD,CA0FzD;AACA;AACA;;;AACA,QAAMC,QAAQ,GAAGC,WAAW,CAAC,YAAK;AAC9B,YAAKjB,IAAL,CAAU,MAAV;AACH,KAF2B,EAEzB,IAFyB,CAA5B;;AAGA,QAAIgB,QAAQ,CAACE,KAAb,EAAoB;AAAEF,cAAQ,CAACE,KAAT;AAAmB;;AAhGgB;AAiG5D,GA9GL,CAgHI;AACA;;;AAjHJ;AAAA;AAAA,SAkHI,eAAa;AAAoB,aAAO,KAAKC,UAAZ;AAAyB;AAlH9D;AAAA;AAAA,WAoHI,yBAAa;AACT,aAAO,KAAKC,cAAZ;AACH;AAtHL;AAAA;AAAA,SAwHI,eAAmB;AACf,aAAO,CAAP;AACH,KA1HL;AAAA,SAkII,aAAoBC,KAApB,EAAiC;AAC7BpD,YAAM,CAACK,UAAP,CAAkB,kDAAlB,EAAsEP,MAAM,CAACQ,MAAP,CAAcC,qBAApF,EAA2G;AACvGC,iBAAS,EAAE;AAD4F,OAA3G;AAGH;AAtIL;AAAA;AAAA,WA4HI,0BAAiB6C,WAAjB,EAAoC;AAChCrD,YAAM,CAACK,UAAP,CAAkB,gDAAlB,EAAoEP,MAAM,CAACQ,MAAP,CAAcC,qBAAlF,EAAyG;AACrGC,iBAAS,EAAE;AAD0F,OAAzG;AAGH;AAhIL;AAAA;AAAA,WAwIU,gBAAI;;;;;;iDACC;;;;;;;;;AACV;AA1IL;AAAA;AAAA,SA4II,aAAY4C,KAAZ,EAA0B;AACtB,UAAI,CAACA,KAAL,EAAY;AAAE;AAAS;;AAEvBpD,YAAM,CAACK,UAAP,CAAkB,yCAAlB,EAA6DP,MAAM,CAACQ,MAAP,CAAcC,qBAA3E,EAAkG;AAC9FC,iBAAS,EAAE;AADmF,OAAlG;AAGH;AAlJL;AAAA;AAAA,WAoJI,cAAK+B,MAAL,EAAqBG,MAArB,EAAwC;AAAA;;AACpC,UAAMY,GAAG,GAAGrD,MAAM,EAAlB;AAEA,aAAO,IAAIsD,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,iBAAS3B,QAAT,CAAkBK,KAAlB,EAAgCX,MAAhC,EAA2C;AACvC,cAAIW,KAAJ,EAAW;AAAE,mBAAOsB,MAAM,CAACtB,KAAD,CAAb;AAAuB;;AACpC,iBAAOqB,OAAO,CAAChC,MAAD,CAAd;AACH;;AAED,YAAMJ,OAAO,GAAGK,IAAI,CAACiC,SAAL,CAAe;AAC3BnB,gBAAM,EAAEA,MADmB;AAE3BG,gBAAM,EAAEA,MAFmB;AAG3BxB,YAAE,EAAEoC,GAHuB;AAI3BK,iBAAO,EAAE;AAJkB,SAAf,CAAhB;;AAOA,cAAI,CAAC5B,IAAL,CAAU,OAAV,EAAmB;AACfC,gBAAM,EAAE,SADO;AAEfJ,iBAAO,EAAEH,IAAI,CAACC,KAAL,CAAWN,OAAX,CAFM;AAGfc,kBAAQ,EAAE;AAHK,SAAnB;;AAMA,cAAI,CAAClB,SAAL,CAAeW,MAAM,CAAC2B,GAAD,CAArB,IAA8B;AAAExB,kBAAQ,EAARA,QAAF;AAAYV,iBAAO,EAAPA;AAAZ,SAA9B;;AAEA,YAAI,MAAI,CAACV,QAAT,EAAmB;AAAE,gBAAI,CAACE,SAAL,CAAeO,IAAf,CAAoBC,OAApB;AAA+B;AACvD,OAtBM,CAAP;AAuBH;AA9KL;AAAA;AAAA,WAoLU,oBAAWwC,GAAX,EAAwBC,KAAxB,EAA2CjB,WAA3C,EAA6E;;;;;;;;;AAC3EkB,+BAAe,KAAKC,OAAL,CAAaH,GAAb;;AACnB,oBAAIE,YAAY,IAAI,IAApB,EAA0B;AACtBA,8BAAY,GAAGP,OAAO,CAACS,GAAR,CAAYH,KAAZ,EAAmBI,IAAnB,CAAwB,UAACJ,KAAD,EAAU;AAC7C,2BAAO,MAAI,CAAC1C,IAAL,CAAU,eAAV,EAA2B0C,KAA3B,CAAP;AACH,mBAFc,CAAf;AAGA,uBAAKE,OAAL,CAAaH,GAAb,IAAoBE,YAApB;AACH;;;AACa,uBAAMA,YAAN;;;AAARI;AACN,qBAAKzB,KAAL,CAAWyB,KAAX,IAAoB;AAAEN,qBAAG,EAAHA,GAAF;AAAOhB,6BAAW,EAAXA;AAAP,iBAApB;;;;;;;;;AACH;AA9LL;AAAA;AAAA,WAgMI,qBAAYuB,KAAZ,EAAwB;AAAA;;AACpB,cAAQA,KAAK,CAACC,IAAd;AACI,aAAK,OAAL;AACI,eAAKC,UAAL,CAAgB,OAAhB,EAAyB,CAAE,UAAF,CAAzB,EAAyC,UAAC7C,MAAD,EAAgB;AACrD,gBAAM6B,WAAW,GAAG3D,SAAS,CAAC4E,IAAV,CAAe9C,MAAM,CAAC+C,MAAtB,EAA8BC,QAA9B,EAApB;AACA,kBAAI,CAACC,QAAL,CAAcC,KAAd,GAAsBrB,WAAtB;;AACA,kBAAI,CAACtB,IAAL,CAAU,OAAV,EAAmBsB,WAAnB;AACH,WAJD;;AAKA;;AAEJ,aAAK,SAAL;AACI,eAAKgB,UAAL,CAAgB,SAAhB,EAA2B,CAAE,wBAAF,CAA3B,EAAyD,UAAC7C,MAAD,EAAgB;AACrE,kBAAI,CAACO,IAAL,CAAU,SAAV,EAAqBP,MAArB;AACH,WAFD;;AAGA;;AAEJ,aAAK,QAAL;AACI,eAAK6C,UAAL,CAAgBF,KAAK,CAACP,GAAtB,EAA2B,CAAE,MAAF,EAAU,KAAKe,UAAL,CAAgBR,KAAK,CAACS,MAAtB,CAAV,CAA3B,EAAsE,UAACpD,MAAD,EAAgB;AAClF,gBAAIA,MAAM,CAACqD,OAAP,IAAkB,IAAtB,EAA4B;AAAErD,oBAAM,CAACqD,OAAP,GAAiB,KAAjB;AAAyB;;AACvD,kBAAI,CAAC9C,IAAL,CAAUoC,KAAK,CAACS,MAAhB,EAAwB,MAAI,CAACE,SAAL,CAAeC,SAAf,CAAyBvD,MAAzB,CAAxB;AACH,WAHD;;AAIA;;AAEJ,aAAK,IAAL;AAAW;AACP,gBAAMwD,WAAW,GAAG,SAAdA,WAAc,CAACb,KAAD,EAAiB;AACjC,kBAAMc,IAAI,GAAGd,KAAK,CAACc,IAAnB;;AACA,oBAAI,CAACC,qBAAL,CAA2BD,IAA3B,EAAiChB,IAAjC,CAAsC,UAACkB,OAAD,EAAY;AAC9C,oBAAI,CAACA,OAAL,EAAc;AAAE;AAAS;;AACzB,sBAAI,CAACpD,IAAL,CAAUkD,IAAV,EAAgBE,OAAhB;AACH,eAHD;AAIH,aAND,CADO,CASP;;;AACAH,uBAAW,CAACb,KAAD,CAAX,CAVO,CAYP;AACA;AACA;AACA;;AACA,iBAAKE,UAAL,CAAgB,IAAhB,EAAsB,CAAE,UAAF,CAAtB,EAAsC,UAAC7C,MAAD,EAAgB;AAClD,oBAAI,CAAC4D,OAAL,CAAaR,MAAb,CAAoB,UAACS,CAAD;AAAA,uBAAQA,CAAC,CAACjB,IAAF,KAAW,IAAnB;AAAA,eAApB,EAA8CnD,OAA9C,CAAsD+D,WAAtD;AACH,aAFD;;AAGA;AACH;AAED;;AACA,aAAK,OAAL;AACA,aAAK,MAAL;AACA,aAAK,UAAL;AACA,aAAK,SAAL;AACA,aAAK,OAAL;AACI;;AAEJ;AACInC,iBAAO,CAACyC,GAAR,CAAY,YAAZ,EAA0BnB,KAA1B;AACA;AAtDR;AAwDH;AAzPL;AAAA;AAAA,WA2PI,oBAAWA,KAAX,EAAuB;AAAA;;AACnB,UAAIP,GAAG,GAAGO,KAAK,CAACP,GAAhB;;AAEA,UAAIO,KAAK,CAACC,IAAN,KAAe,IAAnB,EAAyB;AACrB;AACA,YAAI,KAAKgB,OAAL,CAAaR,MAAb,CAAoB,UAACS,CAAD;AAAA,iBAAQA,CAAC,CAACjB,IAAF,KAAW,IAAnB;AAAA,SAApB,EAA8CmB,MAAlD,EAA0D;AACtD;AACH;;AACD3B,WAAG,GAAG,IAAN;AACH,OAND,MAMO,IAAI,KAAK4B,aAAL,CAAmBrB,KAAK,CAACA,KAAzB,CAAJ,EAAqC;AACxC;AACA;AACH;;AAED,UAAMD,KAAK,GAAG,KAAKH,OAAL,CAAaH,GAAb,CAAd;;AACA,UAAI,CAACM,KAAL,EAAY;AAAE;AAAS;;AAExB,aAAO,KAAKH,OAAL,CAAaH,GAAb,CAAP;AACAM,WAAK,CAACD,IAAN,CAAW,UAACC,KAAD,EAAU;AAChB,YAAI,CAAC,MAAI,CAACzB,KAAL,CAAWyB,KAAX,CAAL,EAAwB;AAAE;AAAS;;AACnC,eAAO,MAAI,CAACzB,KAAL,CAAWyB,KAAX,CAAP;;AACA,cAAI,CAAC/C,IAAL,CAAU,iBAAV,EAA6B,CAAE+C,KAAF,CAA7B;AACH,OAJF;AAKF;AAlRL;AAAA;AAAA,WAoRU,mBAAO;;;;;;;;sBAEL,KAAKtD,SAAL,CAAe6E,UAAf,KAA8B5F,SAAS,CAAC6F;;;;;;AACxC,uBAAO,IAAInC,OAAJ,CAAY,UAACC,OAAD,EAAY;AAC3B,wBAAI,CAAC5C,SAAL,CAAeC,MAAf,GAAwB;AACpB2C,2BAAO,CAAC,IAAD,CAAP;AACH,mBAFD;;AAIA,wBAAI,CAAC5C,SAAL,CAAe+E,OAAf,GAAyB;AACrBnC,2BAAO,CAAC,KAAD,CAAP;AACH,mBAFD;AAGH,iBARM,CAAP;;;AAWJ;AACA;AACA,qBAAK5C,SAAL,CAAegF,KAAf,CAAqB,IAArB;;;;;;;;;AACH;AArSL;AAAA;AAAA,WAgLI,sBAAiB;AACb,aAAO,sBAAP;AACH;AAlLL;;AAAA;AAAA,EAAuChG,eAAvC","names":["BigNumber","defineReadOnly","JsonRpcProvider","WebSocket","Logger","version","logger","NextId","WebSocketProvider","url","network","throwError","errors","UNSUPPORTED_OPERATION","operation","_pollingInterval","_wsReady","connection","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","result","JSON","parse","String","request","undefined","callback","emit","action","response","provider","error","Error","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","value","blockNumber","rid","Promise","resolve","reject","stringify","jsonrpc","tag","param","subIdPromise","_subIds","all","then","subId","event","type","_subscribe","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","e","log","length","listenerCount","readyState","CONNECTING","onerror","close"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/providers/src.ts/websocket-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\nexport interface WebSocketLike {\n    onopen: (...args: Array<any>) => any;\n    onmessage: (...args: Array<any>) => any;\n    onerror: (...args: Array<any>) => any;\n\n    readyState: number;\n\n    send(payload: any): void;\n    close(code?: number, reason?: string): void;\n}\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string | WebSocketLike, network?: Networkish) {\n\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        if (typeof(url) === \"string\") {\n            super(url, network);\n        } else {\n            super(\"_websocket\", network);\n        }\n\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        } else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this.websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket(): WebSocketLike { return this._websocket; }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this.websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this.websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this.websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this.websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this.websocket.close(1000);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}