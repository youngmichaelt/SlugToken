{"ast":null,"code":"\"use strict\";\n\nimport _classCallCheck from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _regeneratorRuntime from \"/Users/michaelyoung/repos/SlugToken/node_modules/@babel/runtime/regenerator/index.js\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nvar logger = new Logger(version);\nexport var CloudflareProvider = /*#__PURE__*/function (_UrlJsonRpcProvider) {\n  _inherits(CloudflareProvider, _UrlJsonRpcProvider);\n\n  var _super2 = _createSuper(CloudflareProvider);\n\n  function CloudflareProvider() {\n    _classCallCheck(this, CloudflareProvider);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(CloudflareProvider, [{\n    key: \"perform\",\n    value: function perform(method, params) {\n      var _this = this;\n\n      var _super = Object.create(null, {\n        perform: {\n          get: function get() {\n            return _get(_getPrototypeOf(CloudflareProvider.prototype), \"perform\", _this);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var block;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!(method === \"getBlockNumber\")) {\n                  _context.next = 5;\n                  break;\n                }\n\n                _context.next = 3;\n                return _super.perform.call(this, \"getBlock\", {\n                  blockTag: \"latest\"\n                });\n\n              case 3:\n                block = _context.sent;\n                return _context.abrupt(\"return\", block.number);\n\n              case 5:\n                return _context.abrupt(\"return\", _super.perform.call(this, method, params));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }], [{\n    key: \"getApiKey\",\n    value: function getApiKey(apiKey) {\n      if (apiKey != null) {\n        logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getUrl\",\n    value: function getUrl(network, apiKey) {\n      var host = null;\n\n      switch (network.name) {\n        case \"homestead\":\n          host = \"https://cloudflare-eth.com/\";\n          break;\n\n        default:\n          logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n      }\n\n      return host;\n    }\n  }]);\n\n  return CloudflareProvider;\n}(UrlJsonRpcProvider);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,SAASA,kBAAT,QAAmC,yBAAnC;AAEA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,IAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AAEA,WAAaE,kBAAb;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA,WAsBU,iBAAQC,MAAR,EAAwBC,MAAxB,EAAmC;AAAA;;;;;;;;;;;;;;;;sBAGjCD,MAAM,KAAK;;;;;;AACG,uBAAME,OAAMC,OAAN,CAAaC,IAAb,CAAa,IAAb,EAAc,UAAd,EAA0B;AAAEC,0BAAQ,EAAE;AAAZ,iBAA1B,CAAN;;;AAARC;iDACCA,KAAK,CAACC;;;iDAGVL,OAAMC,OAAN,CAAaC,IAAb,CAAa,IAAb,EAAcJ,MAAd,EAAsBC,MAAtB;;;;;;;;;AACV;AA/BL;AAAA;AAAA,WAEI,mBAAiBO,MAAjB,EAA4B;AACxB,UAAIA,MAAM,IAAI,IAAd,EAAoB;AAChBV,cAAM,CAACW,kBAAP,CAA0B,qCAA1B,EAAiE,QAAjE,EAA2ED,MAA3E;AACH;;AACD,aAAO,IAAP;AACH;AAPL;AAAA;AAAA,WASI,gBAAcE,OAAd,EAAgCF,MAAhC,EAA4C;AACxC,UAAIG,IAAI,GAAG,IAAX;;AACA,cAAQD,OAAO,CAACE,IAAhB;AACI,aAAK,WAAL;AACID,cAAI,GAAG,6BAAP;AACA;;AACJ;AACGb,gBAAM,CAACW,kBAAP,CAA0B,qBAA1B,EAAiD,SAAjD,EAA4DI,SAAS,CAAC,CAAD,CAArE;AALP;;AAQA,aAAOF,IAAP;AACH;AApBL;;AAAA;AAAA,EAAwChB,kBAAxC","names":["UrlJsonRpcProvider","Logger","version","logger","CloudflareProvider","method","params","_super","perform","call","blockTag","block","number","apiKey","throwArgumentError","network","host","name","arguments"],"sources":["/Users/michaelyoung/repos/SlugToken/node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}