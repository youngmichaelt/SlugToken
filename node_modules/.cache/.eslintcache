[{"/Users/michaelyoung/repos/slugsite/src/index.js":"1","/Users/michaelyoung/repos/slugsite/src/reportWebVitals.js":"2","/Users/michaelyoung/repos/slugsite/src/App.js":"3","/Users/michaelyoung/repos/slugsite/src/Wallet.js":"4","/Users/michaelyoung/repos/slugsite/src/Interactions.js":"5","/Users/michaelyoung/repos/slugsite/src/EventTable.js":"6","/Users/michaelyoung/repos/slugsite/src/ErrorModal.js":"7","/Users/michaelyoung/repos/SlugToken/src/index.js":"8","/Users/michaelyoung/repos/SlugToken/src/reportWebVitals.js":"9","/Users/michaelyoung/repos/SlugToken/src/App.js":"10","/Users/michaelyoung/repos/SlugToken/src/Wallet.js":"11","/Users/michaelyoung/repos/SlugToken/src/EventTable.js":"12","/Users/michaelyoung/repos/SlugToken/src/ErrorModal.js":"13","/Users/michaelyoung/repos/SlugToken/src/Interactions.js":"14"},{"size":586,"mtime":1651103820104,"results":"15","hashOfConfig":"16"},{"size":362,"mtime":1650495266991,"results":"17","hashOfConfig":"16"},{"size":280,"mtime":1651098720309,"results":"18","hashOfConfig":"16"},{"size":6185,"mtime":1651184858884,"results":"19","hashOfConfig":"16"},{"size":14183,"mtime":1651171801304,"results":"20","hashOfConfig":"16"},{"size":3051,"mtime":1651101840606,"results":"21","hashOfConfig":"16"},{"size":1338,"mtime":1651184512831,"results":"22","hashOfConfig":"16"},{"size":586,"mtime":1651103820104,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1650495266991,"results":"25","hashOfConfig":"24"},{"size":280,"mtime":1651098720309,"results":"26","hashOfConfig":"24"},{"size":6488,"mtime":1651266789170,"results":"27","hashOfConfig":"24"},{"size":3146,"mtime":1651264977991,"results":"28","hashOfConfig":"24"},{"size":1345,"mtime":1651265171715,"results":"29","hashOfConfig":"24"},{"size":15855,"mtime":1651266967869,"results":"30","hashOfConfig":"24"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"7lwdm4",{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1dnrgf0",{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"74"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},"/Users/michaelyoung/repos/slugsite/src/index.js",[],[],[],"/Users/michaelyoung/repos/slugsite/src/reportWebVitals.js",[],[],"/Users/michaelyoung/repos/slugsite/src/App.js",["83"],[],"import logo from './logo.svg';\nimport './App.css';\nimport Wallet from './Wallet';\n\n\nfunction App() {\n  return (\n    \n    <div className=\"App font-mono\">\n      <script src=\"../node_modules/flowbite/dist/flowbite.js\"></script>\n      <Wallet/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/michaelyoung/repos/slugsite/src/Wallet.js",["84","85","86","87","88","89","90","91"],[],"\nimport {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './Wallet.module.css'\n// import simple_token_abi from './Contracts/simple_token_abi.json'\nimport Interactions from './Interactions';\nimport ErrorModal from './ErrorModal';\nimport token_abi from './contracts/abi.json'\n\nimport EventTable from './EventTable';\n\nconst Wallet = () => {\n\n    const contractAddress = \"0x290Aa71b3e2A0ce00CeD0b2178985114a66B8e36\";\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n    const [defaultAccount, setDefaultAccount] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [balance, setBalance] = useState();\n\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n\n    const [modalOpen, setModalOpen] = useState();\n\n    \n    const checkIfWalletIsConnected = async () => {\n        try{\n            const { ethereum } = window;\n      \n            if(!ethereum){\n              console.log(\"Use Metamask!\");\n            } else{\n              console.log(\"Ethereum object found\", ethereum);\n            //   detailsOn();\n            }\n      \n            const accounts = await ethereum.request({method: 'eth_accounts'});\n            console.log(accounts[0])\n            if(accounts !== 0){\n                // if(accounts[0] != defaultAccount){\n                //     setConnButtonText('Not Connected');\n                // } else {\n                    const account = accounts[0];\n                    console.log(\"Found an authorized account \", account);\n                    setDefaultAccount(account);\n                    updateEthers();\n                    setConnButtonText('Connected');\n                // }\n              \n            //   detailsOn();\n    \n            } else{\n              console.log(\"Could not find an authorized account\");\n              setConnButtonText('Not Connected');\n            }\n          } catch(error){\n            console.log(error);\n          }\n    }\n\n    const connectWalletHandler = () => {\n        if (window.ethereum && window.ethereum.isMetaMask){\n\n            window.ethereum.request({method: 'eth_requestAccounts'})\n            .then(result => {\n                // console.log(result)\n                accountChangedHandler(result[0]);\n                setConnButtonText('Connected');\n            })\n            .catch(error => {\n                setErrorMessage(error.message);\n                setModalOpen(true);\n            })\n\n        } else {\n            console.log(\"Please install metamask\");\n            setErrorMessage(\"Please install metamask\");\n            setModalOpen(true);\n        }\n    }\n\n    const accountChangedHandler = (newAddress) =>\n    {\n        setDefaultAccount(newAddress);\n        updateEthers();\n    }\n\n    const updateEthers = () => {\n        let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n        let tempSigner = tempProvider.getSigner();\n\n        let tempContract = new ethers.Contract(contractAddress, token_abi, tempSigner);\n\n        setProvider(tempProvider);\n        setSigner(tempSigner);\n        setContract(tempContract);\n    }\n\n    \n\n    \n    const chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n    if (window.ethereum){\n        // listen for account changes\n        window.ethereum.on('accountsChanged', accountChangedHandler);\n\n        window.ethereum.on('chainChanged', chainChangedHandler);\n    }\n\t\n\n    function toFixed(x) {\n        if (Math.abs(x) < 1.0) {\n           var e = parseInt(x.toString().split('e-')[1]);\n           if (e) {\n              x *= Math.pow(10, e - 1);\n              x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\n           }\n        } else {\n           var e = parseInt(x.toString().split('+')[1]);\n           if (e > 20) {\n              e -= 20;\n              x /= Math.pow(10, e);\n              x += (new Array(e + 1)).join('0');\n           }\n        }\n        return x;\n     }\n\n     useEffect(() => {\n        if (defaultAccount == null){\n            checkIfWalletIsConnected();\n        }\n        //checkIfWalletIsConnected();\n        // if (contract != null){\n            \n        //     updateBalance();\n        //     updateTokenName();\n        // } \n    }, [contract, defaultAccount, window.ethereum])\n\n     let props = {\n         contract: contract,\n         defaultAccount: defaultAccount,\n         provider: provider\n     }\n\n     let modal_props = {\n        contract: contract,\n        defaultAccount: defaultAccount,\n        provider: provider,\n        setOpenModal: (x) => {setModalOpen(x)},\n        ErrorMessage: errorMessage\n     }\n\n    return (\n    <div>\n        <button id={styles.connectWalletButton} onClick={connectWalletHandler}>{connButtonText}</button>\n        <div>\n            <h3 className='pt-5'>Slug Token</h3>\n            {/* <div>\n                <h3>Address: {defaultAccount}</h3>\n            </div> */}                \n\n\n            <div className='mt-[50px]'>\n\n                <div className='flex items-center justify-center mb-7'>\n                    \n                <Interactions contract={props}/>\n                </div>\n                <div className='flex items-center justify-center mb-3'>\n                    {modalOpen && <ErrorModal setOpenModal={modal_props}></ErrorModal>}\n\n                </div>\n\n\n                <hr className='my-10'/>\n                <h3 className='mb-5'>Recent Taxes Collected</h3>\n                <div className='mt-2 mb-[150px] flex items-center justify-center'>\n                <EventTable contract={props}/>\n                </div>\n                \n\n\n\n                {/* <EventTable contract={props}/> */}\n            </div>\n\n            <button\n        className=\"openModalBtn\"\n        onClick={() => {\n          setModalOpen(true);\n        }}\n      >\n        ERROR TEST\n      </button>\n          \n\n            \n            \n            <p>{errorMessage}</p>\n        </div>\n\n    </div>\n\n    );\n}\n\nexport default Wallet;\n","/Users/michaelyoung/repos/slugsite/src/Interactions.js",["92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport Spinner from 'react-bootstrap/Spinner';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport * as Loader from 'react-loader-spinner';\n\nconst Interactions = (props) => {\n\n    const [txnHash, setTxnHash] = useState();\n\n    const [allowance, setAllowance] = useState();\n    const [selfAllowance, setSelfAllowance] = useState();\n    const [ApproveOrStake, setApproveOrStake] = useState();\n    const [stakeBalance, setStakeBalance] = useState(0);\n    const [unstakeBalance, setUnstakeBalance] = useState();\n\n    const [stakeAmountState, setStakeAmount] = useState();\n    const [stakeState, setStakeState] = useState();\n\n    const [txnPending, setTxnPending] = useState();\n    const [txnComplete, setTxnComplete] = useState();\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [balance, setBalance] = useState(0);\n\n    const [maxStakeAmount, setMaxStakeAmount] = useState(null);\n\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    \n\n    const approveOrStake = async () => {\n        let contractAddress = await contract.address;\n        let allowance = await contract.allowance(defaultAccount, contractAddress);\n\n        let allowanceBalance = allowance * Math.pow(10, 18);\n        setAllowance(ethers.utils.formatUnits(allowance,18));\n        console.log(ethers.utils.formatUnits(allowance,18))\n\n        let selfAllowance = await contract.allowance(defaultAccount, defaultAccount);\n        let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n        setSelfAllowance(ethers.utils.formatUnits(selfAllowance,18));\n\n        if (allowanceBalance > 0 && selfAllowanceBalance > 0){\n            setApproveOrStake(\"Stake\");\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    }\n\n    const getStakeBalance = async () =>{\n        let isStakeHolder = false;\n        let stakeId = 0;\n        if (defaultAccount instanceof Array){\n            [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount[0]);\n        } else {\n            [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n        }\n        \n        \n        if (isStakeHolder == true){\n            let stakeAmountBig = 0;\n            if (defaultAccount instanceof Array){\n                stakeAmountBig = await contract.stakedTokens(defaultAccount[0]);\n            } else {\n                stakeAmountBig = await contract.stakedTokens(defaultAccount);\n            }\n            \n            let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18)\n            setStakeBalance(stakeAmount);\n        } else {\n            setStakeBalance(0);\n        }\n    }\n\n    const stakeStateHandler = () => {\n        if (stakeState == \"Unstake\"){\n            setApproveOrStake(\"Unstake\")\n\n\n        } else {\n            approveOrStake();\n        }\n    }\n\n    const approveStakeHandler = (e) => {\n\n        let stakeAmount = e;\n        if (stakeState != \"Unstake\"){\n            if (stakeAmount <= parseInt(allowance) && stakeAmount <= parseInt(selfAllowance)){\n                setApproveOrStake(\"Stake\");\n            }\n            else if (stakeAmount == 0){\n                setApproveOrStake(\"Stake\");\n            }\n            else {\n                setApproveOrStake(\"Approve\");\n            }\n        }\n    }\n\n    \n\n    \n\n    const stakeHandler = async (e) => {\n        e.preventDefault();\n\n        console.log(stakeState);\n\n        if (stakeState == \"Unstake\"){\n            let contractAddress = await contract.address;\n            let unstakeAmount = parseInt(stakeAmountState);\n            let unstakeAmountBig = ethers.utils.parseUnits(stakeAmountState, 18);\n\n            if (stakeBalance > unstakeAmount){\n                let txn = await contract.unstakeToken(unstakeAmountBig);\n                console.log(txn);\n                setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n\n                pollTransaction(txn.hash);\n\n                // let balance = 0;\n                \n            } else {\n                window.alert(\"You cannot unstake more tokens than you have staked...\");\n            }\n        } else {\n            let contractAddress = await contract.address;\n           \n            let stakeAmount = parseInt(stakeAmountState);\n            let stakeAmountBig = ethers.utils.parseUnits(stakeAmountState, 18);\n            // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n            console.log(parseInt(allowance),selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig,0)), stakeAmount)\n\n            if (stakeAmount <= parseInt(allowance) && stakeAmount <= parseInt(selfAllowance)){\n\n                let txn = await contract.stakeToken(stakeAmountBig);\n                console.log(txn);\n                setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n                pollTransaction(txn.hash);\n\n            } else {\n                let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n                let txn = await contract.approve(contractAddress, stakeAmountBig);\n                console.log(txn);\n                setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n                pollTransaction(txn.hash);\n            }\n        }\n        \n    }\n\n    const unstakeHandler = async (e) => {\n        e.preventDefault();\n        let contractAddress = await contract.address;\n        let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n        let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n        if (stakeBalance > unstakeAmount){\n            let txn = await contract.unstakeToken(unstakeAmountBig);\n            console.log(txn);\n            setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n\n            pollTransaction(txn.hash);\n\n            balance = 0;\n            \n        } else {\n            window.alert(\"You cannot unstake more tokens than you have staked...\");\n        }\n        \n    }\n\n    const pollTransaction = async (txnHash) => {\n        // setTxnPending(\"Pending transaction...\");\n        let txn = await provider.getTransactionReceipt(txnHash);\n        let time = 0;\n        setApproveOrStake(<span className='justify-center flex'>                \n        <Loader.Oval className='' type=\"Circles\" color=\"#00BFFF\" height={30} width={30}/>\n    </span>);\n    \n\n        while (txn == null && time < 30){\n            await new Promise(r => setTimeout(r, 2000));\n            txn = await provider.getTransactionReceipt(txnHash);\n            time += 1;\n            \n        }\n        if (time == 30){\n            setTxnPending(\"Time out error, check your transaction to make sure it went through\");\n        } else {\n            setTxnPending(\"txn complete\");\n        }\n        setTxnComplete(txnHash);\n        stakeStateHandler();\n\n        \n    }\n    const updateTokenName = async () => {\n        let name = await contract.name();\n\n        setTokenName(name);\n    }\n    const updateBalance = async () => {\n        \n        let balanceBigN = 0;\n\n        if (defaultAccount instanceof Array){\n            balanceBigN = await contract.balanceOf(defaultAccount[0]);\n        } else {\n            balanceBigN = await contract.balanceOf(defaultAccount);\n        }\n\n        let balanceNumber = balanceBigN;\n\n        let tokenDecimals = await contract.decimals();\n\n\t\tlet tokenBalance = balanceNumber / Math.pow(10, 18);\n        console.log(2 * Math.pow(10,18))\n        setBalance(tokenBalance.toFixed(3));\n    };\n\n    const maxStakeAmountHandler = () => {\n\n        if (stakeState == \"Unstake\"){   \n            setStakeAmount(stakeBalance);\n        } else {\n            setStakeAmount(balance);\n        }\n        \n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            updateBalance();\n            updateTokenName();\n            // approveOrStake();\n            stakeStateHandler();\n            getStakeBalance();\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    },[contract, defaultAccount, stakeState, txnComplete])\n    //contract, defaultAccount, txnPending, stakeState]\n\n    return (\n        <div className='p-4 bg-white mx-20 rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700 font-mono'>\n            <div className=''>\n                <button className='mx-5 mb-5 px-4 py-2 bg-indigo-300 hover:bg-indigo-400 rounded-2xl text-center' onClick={() => setStakeState(\"Stake\")}>\n                    <span>Stake</span>\n                </button>\n                <button className='mx-5 mb-5 px-4 py-2 bg-indigo-300 hover:bg-indigo-400 rounded-2xl text-center' onClick={() => setStakeState(\"Unstake\")}>\n                    <span>Unstake</span>\n                </button>\n                <hr className='pb-5'></hr>\n            </div>\n            <div id='stake-detail' className=''>\n                <div id='amount' className='bg-indigo-400 rounded-3xl px-5 py-10 relative'>\n                        <div className='px-15 mb-2 text-left text-black'>Amount</div>\n                        <div className='flex'>\n                            {/* <form className='flex' onSubmit={stakeHandler}> */}\n                            <div className='ml-10 mr-4'>\n                                <input className='rounded-xl' onChange= {(e) => {setStakeAmount(e.target.value);approveStakeHandler(e.target.value)}} id='stakeAmount' type='number' min='0' step='0.001' placeholder='0' value={stakeAmountState}></input>\n                            </div>\n                            <button className='rounded-3xl bg-indigo-300 w-16 hover:bg-indigo-500' onClick={(e) => {maxStakeAmountHandler()}}>\n                                <span>Max</span>\n                            </button>\n                            {/* </form> */}\n                        </div>\n                        \n                    \n\n\n                </div>\n                \n                {/* <form onSubmit={unstakeHandler}>\n                    <h3>Unstake tokens </h3>\n                    <p>Amount</p>\n                    <input type='number' id='unstakeAmount' min='0' step='0.001' placeholder='0'></input>\n                    <button type='submit'>Unstake</button>\n                </form> */}\n            </div>\n\n            <div className='mt-10 mb-10 mr-3 ml-3'>\n                    <div className='flex pb-10 relative'>\n                        <p className='left-0 absolute'>Balance: </p>\n                        <p className='right-0 absolute'>{balance}</p>\n                    </div>\n                    <div className='flex mb-10 relative'>\n                        <p className='left-0 absolute' >Staked balance: </p>\n                        <p className='right-0 absolute' >{stakeBalance}</p>\n                    </div>\n                </div>\n                {/* <button type='submit' onClick={stakeHandler}>{ApproveOrStake}</button> */}\n                {/* <form onSubmit={stakeHandler}>\n                    <h3>Stake tokens </h3>\n                    <p>Amount</p> */}\n                    {/* <input type='number' id='stakeAmount' min='0' step='0.001' placeholder='0'></input> */}\n                    {/* <button type='submit' onClick={stakeHandler}>{ApproveOrStake}</button> */}\n                {/* </form> */}\n                \n\n                <button disabled={stakeAmountState==0 || stakeAmountState == null} className='rounded-3xl bg-indigo-300 disabled:bg-indigo-100 active:bg-violet-700 hover:bg-indigo-400 w-96 py-3' type='submit' onClick={stakeHandler}>\n                    \n                {ApproveOrStake}\n                </button>\n                \n            \n            <div className='px-10'>\n                {/* {txnPending} */}\n\n\n            </div>\n            {/* <div>\n\t\t\t\t{txnHash}\n\t\t\t</div> */}\n\n\n            {/* <div class=\"p-4 max-w-sm bg-white rounded-lg border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700\">\n            <form class=\"space-y-6\" action=\"#\">\n            <h5 class=\"text-xl font-medium text-gray-900 dark:text-white\">Sign in to our platform</h5>\n            <div>\n            <label for=\"email\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" placeholder=\"name@company.com\" required=\"\"/>\n            </div>\n            <div>\n            <label for=\"password\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" required=\"\"/>\n            </div>\n            <div class=\"flex items-start\">\n            <div class=\"flex items-start\">\n            <div class=\"flex items-center h-5\">\n            </div>\n            <label for=\"remember\" class=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Remember me</label>\n            </div>\n            <a href=\"#\" class=\"ml-auto text-sm text-blue-700 hover:underline dark:text-blue-500\">Lost Password?</a>\n            </div>\n            <button type=\"submit\" class=\"w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Login to your account</button>\n            <div class=\"text-sm font-medium text-gray-500 dark:text-gray-300\">\n            Not registered? <a href=\"#\" class=\"text-blue-700 hover:underline dark:text-blue-500\">Create account</a>\n            </div>\n            </form>\n            </div> */}\n\n\n        </div>\n        \n\n    );\n\n}\n\nexport default Interactions;",[],"/Users/michaelyoung/repos/slugsite/src/EventTable.js",["117","118","119"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './EventTable.module.css'\n\n\nconst EventTable = (props) => {\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    const [Event, setEvent] = useState();\n\n    const getEvents = async () => {\n        let contractAddress = await contract.address;\n\n        // let events = contract.filters.TaxCollected(null, defaultAccount);\n        // console.log(events);\n\n        let filter = contract.filters.TaxCollected(defaultAccount)\n\n        let events = await contract.queryFilter(filter);\n        // console.log(events[0].args);\n\n        let rows = []\n\n        let headers = <tr className='table-fixed' key='10000'>\n            <th className='px-10'>Timestamp</th>\n            <th className='px-10'>Transaction Hash</th>\n            <th className='px-10'>Amount</th>\n            \n        </tr>\n\n        // rows.push(headers)\n\n        if (events instanceof Array && events.length > 0){\n            for (let i = 0; i<events.length; i++){\n                let block = await provider.getBlock(events[i].blockNumber);\n                let timestamp = block.timestamp;\n                let date = new Date(timestamp*1000)\n\n                let num = ethers.utils.formatUnits(events[i].args[1], 18)\n                // console.log(num)\n                let fixedNum = parseFloat(num);\n                fixedNum = fixedNum.toFixed(3);\n                \n                \n                console.log(events[i]);\n                let row = <tr className='table-fixed' key={i}>\n                    <td className='pt-3'>{date.toDateString()}</td>\n                    <td className=' pl-10 max-w-[300px] truncate ... pt-3'>\n                        <a className='' href={'https://rinkeby.etherscan.io/tx/'+events[i].transactionHash}>{events[i].transactionHash}</a>\n                    </td>\n                    <td className='pl-10 pr-10 min-w-min pt-3'>{fixedNum}</td>\n                    \n                </tr>\n                // headers += row;\n                rows.push(row);\n            }\n        }\n        // console.log(headers);\n        setEvent(rows);\n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            getEvents();\n        } else {\n            setEvent(\"null\");\n        }\n    },[contract, defaultAccount])\n\n    return (\n        <div className='p-4 bg-white mx-20 rounded-xl border border-gray-200 font-mono'>\n            \n            <table className='flex justify-center table-fixed' id={styles.eventtable}>\n                <tbody className='px-10 table-fixed'>\n                <tr className='table-fixed' key='10000'>\n                    <th className='px-10'>Timestamp</th>\n                    <th className='px-10'>Transaction Hash</th>\n                    <th className='px-10'>Amount</th>\n                    \n                </tr>\n                    {Event}\n                </tbody>\n            </table>\n        </div>\n\n    );\n}\nexport default EventTable;","/Users/michaelyoung/repos/slugsite/src/ErrorModal.js",["120"],[],"/Users/michaelyoung/repos/SlugToken/src/index.js",[],[],"/Users/michaelyoung/repos/SlugToken/src/reportWebVitals.js",[],[],"/Users/michaelyoung/repos/SlugToken/src/App.js",["121"],[],"/Users/michaelyoung/repos/SlugToken/src/Wallet.js",["122","123","124","125","126","127","128","129","130","131","132"],[],"/Users/michaelyoung/repos/SlugToken/src/EventTable.js",["133","134","135","136"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './EventTable.module.css'\n\n\nconst EventTable = (props) => {\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    const [Event, setEvent] = useState();\n\n    const getEvents = async () => {\n        let contractAddress = await contract.address;\n\n        // let events = contract.filters.TaxCollected(null, defaultAccount);\n        // console.log(events);\n\n        let filter = contract.filters.TaxCollected(defaultAccount)\n\n        let events = await contract.queryFilter(filter);\n        // console.log(events[0].args);\n\n        let rows = []\n\n        let headers = <tr className='table-fixed' key='10000'>\n            <th className='px-10'>Timestamp</th>\n            <th className='px-10'>Transaction Hash</th>\n            <th className='px-10'>Amount</th>\n            \n        </tr>\n\n        // rows.push(headers)\n\n        if (events instanceof Array && events.length > 0){\n            for (let i = events.length-1; i > -1; i--){\n\n                if (i == events.length-10){\n                    break;\n                }\n                let block = await provider.getBlock(events[i].blockNumber);\n                let timestamp = block.timestamp;\n                let date = new Date(timestamp*1000)\n\n                let num = ethers.utils.formatUnits(events[i].args[1], 18)\n                // console.log(num)\n                let fixedNum = parseFloat(num);\n                fixedNum = fixedNum.toFixed(3);\n                \n                \n                console.log(events[i]);\n                let row = <tr className='table-fixed' key={i}>\n                    <td className='pt-3'>{date.toDateString()}</td>\n                    <td className=' pl-10 max-w-[300px] truncate ... pt-3'>\n                        <a className='' href={'https://rinkeby.etherscan.io/tx/'+events[i].transactionHash}>{events[i].transactionHash}</a>\n                    </td>\n                    <td className='pl-10 pr-10 min-w-min pt-3'>{fixedNum}</td>\n                    \n                </tr>\n                // headers += row;\n                rows.push(row);\n            }\n        }\n        // console.log(headers);\n        setEvent(rows);\n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            getEvents();\n        } else {\n            setEvent(\"null\");\n        }\n    },[contract, defaultAccount])\n\n    return (\n        <div className='p-4 bg-white mx-20 rounded-xl border border-gray-200 font-mono'>\n            \n            <table className='flex justify-center table-fixed' id={styles.eventtable}>\n                <tbody className='px-10 table-fixed'>\n                <tr className='table-fixed' key='10000'>\n                    <th className='px-10'>Timestamp</th>\n                    <th className='px-10'>Transaction Hash</th>\n                    <th className='px-10'>Amount</th>\n                    \n                </tr>\n                    {Event}\n                </tbody>\n            </table>\n        </div>\n\n    );\n}\nexport default EventTable;",[],"/Users/michaelyoung/repos/SlugToken/src/ErrorModal.js",["137"],[],"import React, { useState } from 'react';\n\nconst ErrorModal = (props) => {\n\n    let setOpenModal = props.setOpenModal.setOpenModal;\n    let ErrorMessage = props.setOpenModal.ErrorMessage;\n    \n\n\n    return (\n        <div className='p-4 bg-white mx-20 rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n             <div className=\"modalContainer\">\n                <div className=\"titleCloseBtn\">\n                {/* <button\n                    onClick={() => {\n                    setOpenModal(false);\n\n                    }}\n                >\n                    X\n                </button> */}\n                </div>\n                <div className=\"title\">\n                <h1>Error</h1>\n                <hr/>\n                </div>\n                <div className=\"body mt-3 mb-3\">\n                <p>{(ErrorMessage).toString()}</p>\n                </div>\n                <div className=\"footer mt-4\">\n                <button\n                    onClick={() => {\n                    setOpenModal(false);\n                    }}\n                    id=\"cancelBtn\"\n                >\n                    Okay\n                </button>\n                {/* <button>Continue</button> */}\n                </div>\n            </div>\n            \n        </div>\n\n\n        );\n}\n\n\n\nexport default ErrorModal;\n","/Users/michaelyoung/repos/SlugToken/src/Interactions.js",["138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport Spinner from 'react-bootstrap/Spinner';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport * as Loader from 'react-loader-spinner';\n\nconst Interactions = (props) => {\n\n    const [txnHash, setTxnHash] = useState();\n\n    const [allowance, setAllowance] = useState();\n    const [selfAllowance, setSelfAllowance] = useState();\n    const [ApproveOrStake, setApproveOrStake] = useState();\n    const [stakeBalance, setStakeBalance] = useState(0);\n    const [unstakeBalance, setUnstakeBalance] = useState();\n\n    const [stakeAmountState, setStakeAmount] = useState();\n    const [stakeState, setStakeState] = useState();\n\n    const [txnPending, setTxnPending] = useState();\n    const [txnComplete, setTxnComplete] = useState();\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [balance, setBalance] = useState(0);\n\n    const [maxStakeAmount, setMaxStakeAmount] = useState(null);\n\n    \n\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    let setOpenModal = props.contract.setOpenModal;\n    let setErrorMessage = props.contract.setErrorMessage;\n\n    \n\n    const approveOrStake = async () => {\n        try{\n            if (defaultAccount != null && defaultAccount.length != 0){\n                let contractAddress = await contract.address;\n                let account = defaultAccount\n                if (account instanceof Array){\n                    account = account[0];\n                }\n                let allowance = await contract.allowance(account, contractAddress);\n\n                let allowanceBalance = allowance * Math.pow(10, 18);\n                setAllowance(ethers.utils.formatUnits(allowance,18));\n                console.log(ethers.utils.formatUnits(allowance,18))\n\n                let selfAllowance = await contract.allowance(account, account);\n                let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n                setSelfAllowance(ethers.utils.formatUnits(selfAllowance,18));\n\n                if (allowanceBalance > 0 && selfAllowanceBalance > 0){\n                    setApproveOrStake(\"Stake\");\n                } else {\n                    setApproveOrStake(\"Approve\");\n                }\n            } else {\n                setApproveOrStake(\"Stake\");\n            }\n            \n        } catch (e) {   \n            setOpenModal(true);\n            setErrorMessage(e);\n        }\n        \n    }\n\n    const getStakeBalance = async () =>{\n        try {\n            let isStakeHolder = false;\n            let stakeId = 0;\n            if (defaultAccount != null && defaultAccount.length > 0){\n                if (defaultAccount instanceof Array){\n                    [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount[0]);\n                } else {\n                    [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n                }\n                \n                \n                if (isStakeHolder == true){\n                    let stakeAmountBig = 0;\n                    if (defaultAccount instanceof Array){\n                        stakeAmountBig = await contract.stakedTokens(defaultAccount[0]);\n                    } else {\n                        stakeAmountBig = await contract.stakedTokens(defaultAccount);\n                    }\n                    \n                    let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18)\n                    setStakeBalance(stakeAmount);\n                } else {\n                    setStakeBalance(0);\n                }\n            } else {\n                setStakeBalance(0);\n                setBalance(0)\n\n            }\n            \n        } catch (e) {   \n            setOpenModal(true);\n            setErrorMessage(e);\n        }\n        \n    }\n\n    const stakeStateHandler = () => {\n        if (stakeState == \"Unstake\"){\n            setApproveOrStake(\"Unstake\")\n\n\n        } else {\n            if (defaultAccount != null && defaultAccount.length > 0){\n                approveOrStake();\n            }\n            \n        }\n    }\n\n    const approveStakeHandler = (e) => {\n\n        let stakeAmount = e;\n        if (stakeState != \"Unstake\"){\n            if (stakeAmount <= parseInt(allowance) && stakeAmount <= parseInt(selfAllowance)){\n                setApproveOrStake(\"Stake\");\n            }\n            else if (stakeAmount == 0){\n                setApproveOrStake(\"Stake\");\n            }\n            else {\n                setApproveOrStake(\"Approve\");\n            }\n        }\n    }\n\n    \n\n    \n\n    const stakeHandler = async (e) => {\n        e.preventDefault();\n\n        try {\n            if (stakeState == \"Unstake\"){\n                let contractAddress = await contract.address;\n                let unstakeAmount = parseInt(stakeAmountState);\n                let unstakeAmountBig = ethers.utils.parseUnits(stakeAmountState, 18);\n    \n                if (stakeBalance > unstakeAmount){\n                    let txn = await contract.unstakeToken(unstakeAmountBig);\n                    console.log(txn);\n                    setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n    \n                    pollTransaction(txn.hash);\n    \n                    // let balance = 0;\n                    \n                } else {\n                    window.alert(\"You cannot unstake more tokens than you have staked...\");\n                }\n            } else {\n                let contractAddress = await contract.address;\n               \n                let stakeAmount = parseInt(stakeAmountState);\n                let stakeAmountBig = ethers.utils.parseUnits(stakeAmountState, 18);\n                // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n                console.log(parseInt(allowance),selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig,0)), stakeAmount)\n    \n                if (stakeAmount <= parseInt(allowance) && stakeAmount <= parseInt(selfAllowance)){\n    \n                    let txn = await contract.stakeToken(stakeAmountBig);\n                    console.log(txn);\n                    setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n                    pollTransaction(txn.hash);\n    \n                } else {\n                    let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n                    let txn = await contract.approve(contractAddress, stakeAmountBig);\n                    console.log(txn);\n                    setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n                    pollTransaction(txn.hash);\n                }\n            }\n        } catch (e) {   \n            setOpenModal(true);\n            setErrorMessage(e);\n        }\n\n        \n        \n    }\n\n    // const unstakeHandler = async (e) => {\n    //     e.preventDefault();\n    //     let contractAddress = await contract.address;\n    //     let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n    //     let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n    //     if (stakeBalance > unstakeAmount){\n    //         let txn = await contract.unstakeToken(unstakeAmountBig);\n    //         console.log(txn);\n    //         setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n\n    //         pollTransaction(txn.hash);\n\n    //         balance = 0;\n            \n    //     } else {\n    //         window.alert(\"You cannot unstake more tokens than you have staked...\");\n    //     }\n        \n    // }\n\n    const pollTransaction = async (txnHash) => {\n        try{\n            let txn = await provider.getTransactionReceipt(txnHash);\n            let time = 0;\n            setApproveOrStake(<span className='justify-center flex'>                \n            <Loader.Oval className='' type=\"Circles\" color=\"#00BFFF\" height={30} width={30}/>\n            </span>);\n        \n\n            while (txn == null && time < 30){\n                await new Promise(r => setTimeout(r, 2000));\n                txn = await provider.getTransactionReceipt(txnHash);\n                time += 1;\n                \n            }\n            if (time == 30){\n                setTxnPending(\"Time out error, check your transaction to make sure it went through\");\n            } else {\n                setTxnPending(\"txn complete\");\n            }\n            setTxnComplete(txnHash);\n            stakeStateHandler();\n        } catch (e) {   \n            setOpenModal(true);\n            setErrorMessage(e);\n        }\n        \n\n        \n    }\n    const updateTokenName = async () => {\n        let name = await contract.name();\n\n        setTokenName(name);\n    }\n    const updateBalance = async () => {\n        \n        let balanceBigN = 0;\n\n        if (defaultAccount instanceof Array){\n            balanceBigN = await contract.balanceOf(defaultAccount[0]);\n        } else {\n            balanceBigN = await contract.balanceOf(defaultAccount);\n        }\n\n        let balanceNumber = balanceBigN;\n\n        let tokenDecimals = await contract.decimals();\n\n\t\tlet tokenBalance = balanceNumber / Math.pow(10, 18);\n        console.log(2 * Math.pow(10,18))\n        setBalance(tokenBalance.toFixed(3));\n    };\n\n    const maxStakeAmountHandler = () => {\n\n        if (stakeState == \"Unstake\"){   \n            setStakeAmount(stakeBalance);\n        } else {\n            setStakeAmount(balance);\n        }\n        \n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            updateBalance();\n            updateTokenName();\n            // approveOrStake();\n            stakeStateHandler();\n            getStakeBalance();\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    },[contract, defaultAccount, stakeState, txnComplete])\n    //contract, defaultAccount, txnPending, stakeState]\n\n    return (\n        <div className='p-4 bg-white mx-20 rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700 font-mono'>\n            <div className=''>\n                <button className='mx-5 mb-5 px-4 py-2 bg-indigo-300 hover:bg-indigo-400 rounded-2xl text-center' onClick={() => setStakeState(\"Stake\")}>\n                    <span>Stake</span>\n                </button>\n                <button className='mx-5 mb-5 px-4 py-2 bg-indigo-300 hover:bg-indigo-400 rounded-2xl text-center' onClick={() => setStakeState(\"Unstake\")}>\n                    <span>Unstake</span>\n                </button>\n                <hr className='pb-5'></hr>\n            </div>\n            <div id='stake-detail' className=''>\n                <div id='amount' className='bg-indigo-400 rounded-3xl px-5 py-10 relative'>\n                        <div className='px-15 mb-2 text-left text-black'>Amount</div>\n                        <div className='flex'>\n                            {/* <form className='flex' onSubmit={stakeHandler}> */}\n                            <div className='ml-10 mr-4'>\n                                <input className='rounded-xl' onChange= {(e) => {setStakeAmount(e.target.value);approveStakeHandler(e.target.value)}} id='stakeAmount' type='number' min='0' step='0.001' placeholder='0' value={stakeAmountState}></input>\n                            </div>\n                            <button className='rounded-3xl bg-indigo-300 w-16 hover:bg-indigo-500' onClick={(e) => {maxStakeAmountHandler()}}>\n                                <span>Max</span>\n                            </button>\n                            {/* </form> */}\n                        </div>\n                        \n                    \n\n\n                </div>\n                \n                {/* <form onSubmit={unstakeHandler}>\n                    <h3>Unstake tokens </h3>\n                    <p>Amount</p>\n                    <input type='number' id='unstakeAmount' min='0' step='0.001' placeholder='0'></input>\n                    <button type='submit'>Unstake</button>\n                </form> */}\n            </div>\n\n            <div className='mt-10 mb-10 mr-3 ml-3'>\n                    <div className='flex pb-10 relative'>\n                        <p className='left-0 absolute'>Balance: </p>\n                        <p className='right-0 absolute'>{balance}</p>\n                    </div>\n                    <div className='flex mb-10 relative'>\n                        <p className='left-0 absolute' >Staked balance: </p>\n                        <p className='right-0 absolute' >{stakeBalance}</p>\n                    </div>\n                </div>\n                {/* <button type='submit' onClick={stakeHandler}>{ApproveOrStake}</button> */}\n                {/* <form onSubmit={stakeHandler}>\n                    <h3>Stake tokens </h3>\n                    <p>Amount</p> */}\n                    {/* <input type='number' id='stakeAmount' min='0' step='0.001' placeholder='0'></input> */}\n                    {/* <button type='submit' onClick={stakeHandler}>{ApproveOrStake}</button> */}\n                {/* </form> */}\n                \n\n                <button disabled={stakeAmountState==0 || stakeAmountState == null} className='rounded-3xl bg-indigo-300 disabled:bg-indigo-100 active:bg-violet-700 hover:bg-indigo-400 w-96 py-3' type='submit' onClick={stakeHandler}>\n                    \n                {ApproveOrStake}\n                </button>\n                \n            \n            <div className='px-10'>\n                {/* {txnPending} */}\n                \n\n\n            </div>\n            {/* <div>\n\t\t\t\t{txnHash}\n\t\t\t</div> */}\n\n\n            {/* <div class=\"p-4 max-w-sm bg-white rounded-lg border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700\">\n            <form class=\"space-y-6\" action=\"#\">\n            <h5 class=\"text-xl font-medium text-gray-900 dark:text-white\">Sign in to our platform</h5>\n            <div>\n            <label for=\"email\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" placeholder=\"name@company.com\" required=\"\"/>\n            </div>\n            <div>\n            <label for=\"password\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" required=\"\"/>\n            </div>\n            <div class=\"flex items-start\">\n            <div class=\"flex items-start\">\n            <div class=\"flex items-center h-5\">\n            </div>\n            <label for=\"remember\" class=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Remember me</label>\n            </div>\n            <a href=\"#\" class=\"ml-auto text-sm text-blue-700 hover:underline dark:text-blue-500\">Lost Password?</a>\n            </div>\n            <button type=\"submit\" class=\"w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Login to your account</button>\n            <div class=\"text-sm font-medium text-gray-500 dark:text-gray-300\">\n            Not registered? <a href=\"#\" class=\"text-blue-700 hover:underline dark:text-blue-500\">Create account</a>\n            </div>\n            </form>\n            </div> */}\n\n\n        </div>\n        \n\n    );\n\n}\n\nexport default Interactions;",{"ruleId":"161","severity":1,"message":"162","line":1,"column":8,"nodeType":"163","messageId":"164","endLine":1,"endColumn":12},{"ruleId":"161","severity":1,"message":"165","line":16,"column":12,"nodeType":"163","messageId":"164","endLine":16,"endColumn":21},{"ruleId":"161","severity":1,"message":"166","line":16,"column":23,"nodeType":"163","messageId":"164","endLine":16,"endColumn":35},{"ruleId":"161","severity":1,"message":"167","line":20,"column":12,"nodeType":"163","messageId":"164","endLine":20,"endColumn":19},{"ruleId":"161","severity":1,"message":"168","line":20,"column":21,"nodeType":"163","messageId":"164","endLine":20,"endColumn":31},{"ruleId":"161","severity":1,"message":"169","line":23,"column":12,"nodeType":"163","messageId":"164","endLine":23,"endColumn":18},{"ruleId":"161","severity":1,"message":"170","line":118,"column":14,"nodeType":"163","messageId":"164","endLine":118,"endColumn":21},{"ruleId":"171","severity":1,"message":"172","line":126,"column":16,"nodeType":"163","messageId":"173","endLine":126,"endColumn":17},{"ruleId":"174","severity":1,"message":"175","line":146,"column":8,"nodeType":"176","endLine":146,"endColumn":51,"suggestions":"177"},{"ruleId":"161","severity":1,"message":"178","line":3,"column":8,"nodeType":"163","messageId":"164","endLine":3,"endColumn":15},{"ruleId":"161","severity":1,"message":"179","line":4,"column":8,"nodeType":"163","messageId":"164","endLine":4,"endColumn":19},{"ruleId":"161","severity":1,"message":"180","line":9,"column":12,"nodeType":"163","messageId":"164","endLine":9,"endColumn":19},{"ruleId":"161","severity":1,"message":"181","line":15,"column":12,"nodeType":"163","messageId":"164","endLine":15,"endColumn":26},{"ruleId":"161","severity":1,"message":"182","line":15,"column":28,"nodeType":"163","messageId":"164","endLine":15,"endColumn":45},{"ruleId":"161","severity":1,"message":"183","line":20,"column":12,"nodeType":"163","messageId":"164","endLine":20,"endColumn":22},{"ruleId":"161","severity":1,"message":"165","line":23,"column":12,"nodeType":"163","messageId":"164","endLine":23,"endColumn":21},{"ruleId":"161","severity":1,"message":"184","line":26,"column":12,"nodeType":"163","messageId":"164","endLine":26,"endColumn":26},{"ruleId":"161","severity":1,"message":"185","line":26,"column":28,"nodeType":"163","messageId":"164","endLine":26,"endColumn":45},{"ruleId":"161","severity":1,"message":"186","line":58,"column":29,"nodeType":"163","messageId":"164","endLine":58,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":62,"column":27,"nodeType":"189","messageId":"190","endLine":62,"endColumn":29},{"ruleId":"187","severity":1,"message":"188","line":78,"column":24,"nodeType":"189","messageId":"190","endLine":78,"endColumn":26},{"ruleId":"187","severity":1,"message":"191","line":90,"column":24,"nodeType":"189","messageId":"190","endLine":90,"endColumn":26},{"ruleId":"187","severity":1,"message":"188","line":94,"column":34,"nodeType":"189","messageId":"190","endLine":94,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":112,"column":24,"nodeType":"189","messageId":"190","endLine":112,"endColumn":26},{"ruleId":"161","severity":1,"message":"192","line":113,"column":17,"nodeType":"163","messageId":"164","endLine":113,"endColumn":32},{"ruleId":"161","severity":1,"message":"193","line":145,"column":21,"nodeType":"163","messageId":"164","endLine":145,"endColumn":35},{"ruleId":"161","severity":1,"message":"194","line":155,"column":11,"nodeType":"163","messageId":"164","endLine":155,"endColumn":25},{"ruleId":"161","severity":1,"message":"192","line":157,"column":13,"nodeType":"163","messageId":"164","endLine":157,"endColumn":28},{"ruleId":"195","severity":1,"message":"196","line":168,"column":13,"nodeType":"163","messageId":"197","endLine":168,"endColumn":20},{"ruleId":"187","severity":1,"message":"188","line":191,"column":18,"nodeType":"189","messageId":"190","endLine":191,"endColumn":20},{"ruleId":"161","severity":1,"message":"198","line":218,"column":13,"nodeType":"163","messageId":"164","endLine":218,"endColumn":26},{"ruleId":"187","severity":1,"message":"188","line":227,"column":24,"nodeType":"189","messageId":"190","endLine":227,"endColumn":26},{"ruleId":"174","severity":1,"message":"199","line":245,"column":7,"nodeType":"176","endLine":245,"endColumn":58,"suggestions":"200"},{"ruleId":"187","severity":1,"message":"188","line":305,"column":51,"nodeType":"189","messageId":"190","endLine":305,"endColumn":53},{"ruleId":"161","severity":1,"message":"192","line":13,"column":13,"nodeType":"163","messageId":"164","endLine":13,"endColumn":28},{"ruleId":"161","severity":1,"message":"201","line":25,"column":13,"nodeType":"163","messageId":"164","endLine":25,"endColumn":20},{"ruleId":"174","severity":1,"message":"202","line":69,"column":7,"nodeType":"176","endLine":69,"endColumn":33,"suggestions":"203"},{"ruleId":"161","severity":1,"message":"204","line":1,"column":17,"nodeType":"163","messageId":"164","endLine":1,"endColumn":25},{"ruleId":"161","severity":1,"message":"162","line":1,"column":8,"nodeType":"163","messageId":"164","endLine":1,"endColumn":12},{"ruleId":"161","severity":1,"message":"165","line":16,"column":12,"nodeType":"163","messageId":"164","endLine":16,"endColumn":21},{"ruleId":"161","severity":1,"message":"166","line":16,"column":23,"nodeType":"163","messageId":"164","endLine":16,"endColumn":35},{"ruleId":"161","severity":1,"message":"167","line":20,"column":12,"nodeType":"163","messageId":"164","endLine":20,"endColumn":19},{"ruleId":"161","severity":1,"message":"168","line":20,"column":21,"nodeType":"163","messageId":"164","endLine":20,"endColumn":31},{"ruleId":"161","severity":1,"message":"169","line":23,"column":12,"nodeType":"163","messageId":"164","endLine":23,"endColumn":18},{"ruleId":"161","severity":1,"message":"205","line":27,"column":12,"nodeType":"163","messageId":"164","endLine":27,"endColumn":25},{"ruleId":"161","severity":1,"message":"206","line":27,"column":27,"nodeType":"163","messageId":"164","endLine":27,"endColumn":43},{"ruleId":"187","severity":1,"message":"191","line":43,"column":32,"nodeType":"189","messageId":"190","endLine":43,"endColumn":34},{"ruleId":"161","severity":1,"message":"170","line":123,"column":14,"nodeType":"163","messageId":"164","endLine":123,"endColumn":21},{"ruleId":"171","severity":1,"message":"172","line":131,"column":16,"nodeType":"163","messageId":"173","endLine":131,"endColumn":17},{"ruleId":"174","severity":1,"message":"175","line":151,"column":8,"nodeType":"176","endLine":151,"endColumn":51,"suggestions":"207"},{"ruleId":"161","severity":1,"message":"192","line":13,"column":13,"nodeType":"163","messageId":"164","endLine":13,"endColumn":28},{"ruleId":"161","severity":1,"message":"201","line":25,"column":13,"nodeType":"163","messageId":"164","endLine":25,"endColumn":20},{"ruleId":"187","severity":1,"message":"188","line":37,"column":23,"nodeType":"189","messageId":"190","endLine":37,"endColumn":25},{"ruleId":"174","severity":1,"message":"202","line":73,"column":7,"nodeType":"176","endLine":73,"endColumn":33,"suggestions":"208"},{"ruleId":"161","severity":1,"message":"204","line":1,"column":17,"nodeType":"163","messageId":"164","endLine":1,"endColumn":25},{"ruleId":"161","severity":1,"message":"178","line":3,"column":8,"nodeType":"163","messageId":"164","endLine":3,"endColumn":15},{"ruleId":"161","severity":1,"message":"179","line":4,"column":8,"nodeType":"163","messageId":"164","endLine":4,"endColumn":19},{"ruleId":"161","severity":1,"message":"180","line":9,"column":12,"nodeType":"163","messageId":"164","endLine":9,"endColumn":19},{"ruleId":"161","severity":1,"message":"181","line":15,"column":12,"nodeType":"163","messageId":"164","endLine":15,"endColumn":26},{"ruleId":"161","severity":1,"message":"182","line":15,"column":28,"nodeType":"163","messageId":"164","endLine":15,"endColumn":45},{"ruleId":"161","severity":1,"message":"183","line":20,"column":12,"nodeType":"163","messageId":"164","endLine":20,"endColumn":22},{"ruleId":"161","severity":1,"message":"165","line":23,"column":12,"nodeType":"163","messageId":"164","endLine":23,"endColumn":21},{"ruleId":"161","severity":1,"message":"184","line":26,"column":12,"nodeType":"163","messageId":"164","endLine":26,"endColumn":26},{"ruleId":"161","severity":1,"message":"185","line":26,"column":28,"nodeType":"163","messageId":"164","endLine":26,"endColumn":45},{"ruleId":"187","severity":1,"message":"191","line":40,"column":65,"nodeType":"189","messageId":"190","endLine":40,"endColumn":67},{"ruleId":"161","severity":1,"message":"186","line":80,"column":37,"nodeType":"163","messageId":"164","endLine":80,"endColumn":44},{"ruleId":"187","severity":1,"message":"188","line":84,"column":35,"nodeType":"189","messageId":"190","endLine":84,"endColumn":37},{"ruleId":"187","severity":1,"message":"188","line":111,"column":24,"nodeType":"189","messageId":"190","endLine":111,"endColumn":26},{"ruleId":"187","severity":1,"message":"191","line":126,"column":24,"nodeType":"189","messageId":"190","endLine":126,"endColumn":26},{"ruleId":"187","severity":1,"message":"188","line":130,"column":34,"nodeType":"189","messageId":"190","endLine":130,"endColumn":36},{"ruleId":"187","severity":1,"message":"188","line":147,"column":28,"nodeType":"189","messageId":"190","endLine":147,"endColumn":30},{"ruleId":"161","severity":1,"message":"192","line":148,"column":21,"nodeType":"163","messageId":"164","endLine":148,"endColumn":36},{"ruleId":"161","severity":1,"message":"193","line":180,"column":25,"nodeType":"163","messageId":"164","endLine":180,"endColumn":39},{"ruleId":"187","severity":1,"message":"188","line":232,"column":22,"nodeType":"189","messageId":"190","endLine":232,"endColumn":24},{"ruleId":"161","severity":1,"message":"198","line":264,"column":13,"nodeType":"163","messageId":"164","endLine":264,"endColumn":26},{"ruleId":"187","severity":1,"message":"188","line":273,"column":24,"nodeType":"189","messageId":"190","endLine":273,"endColumn":26},{"ruleId":"174","severity":1,"message":"199","line":291,"column":7,"nodeType":"176","endLine":291,"endColumn":58,"suggestions":"209"},{"ruleId":"187","severity":1,"message":"188","line":351,"column":51,"nodeType":"189","messageId":"190","endLine":351,"endColumn":53},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'tokenName' is assigned a value but never used.","'setTokenName' is assigned a value but never used.","'balance' is assigned a value but never used.","'setBalance' is assigned a value but never used.","'signer' is assigned a value but never used.","'toFixed' is defined but never used.","no-redeclare","'e' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkIfWalletIsConnected'. Either include it or remove the dependency array. Outer scope values like 'window.ethereum' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["210"],"'Spinner' is defined but never used.","'ProgressBar' is defined but never used.","'txnHash' is assigned a value but never used.","'unstakeBalance' is assigned a value but never used.","'setUnstakeBalance' is assigned a value but never used.","'txnPending' is assigned a value but never used.","'maxStakeAmount' is assigned a value but never used.","'setMaxStakeAmount' is assigned a value but never used.","'stakeId' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'contractAddress' is assigned a value but never used.","'approveSelftxn' is assigned a value but never used.","'unstakeHandler' is assigned a value but never used.","no-const-assign","'balance' is constant.","const","'tokenDecimals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStakeBalance', 'stakeStateHandler', 'updateBalance', and 'updateTokenName'. Either include them or remove the dependency array.",["211"],"'headers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getEvents'. Either include it or remove the dependency array.",["212"],"'useState' is defined but never used.","'ethersUpdated' is assigned a value but never used.","'setEthersUpdated' is assigned a value but never used.",["213"],["214"],["215"],{"desc":"216","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"216","fix":"222"},{"desc":"220","fix":"223"},{"desc":"218","fix":"224"},"Update the dependencies array to be: [checkIfWalletIsConnected, contract, defaultAccount]",{"range":"225","text":"226"},"Update the dependencies array to be: [contract, defaultAccount, getStakeBalance, stakeState, stakeStateHandler, txnComplete, updateBalance, updateTokenName]",{"range":"227","text":"228"},"Update the dependencies array to be: [contract, defaultAccount, getEvents]",{"range":"229","text":"230"},{"range":"231","text":"226"},{"range":"232","text":"230"},{"range":"233","text":"228"},[4457,4500],"[checkIfWalletIsConnected, contract, defaultAccount]",[8102,8153],"[contract, defaultAccount, getStakeBalance, stakeState, stakeStateHandler, txnComplete, updateBalance, updateTokenName]",[2366,2392],"[contract, defaultAccount, getEvents]",[4637,4680],[2461,2487],[9757,9808]]