[{"/Users/michaelyoung/repos/slugsite/src/index.js":"1","/Users/michaelyoung/repos/slugsite/src/reportWebVitals.js":"2","/Users/michaelyoung/repos/slugsite/src/App.js":"3","/Users/michaelyoung/repos/slugsite/src/Wallet.js":"4","/Users/michaelyoung/repos/slugsite/src/Interactions.js":"5","/Users/michaelyoung/repos/slugsite/src/EventTable.js":"6","/Users/michaelyoung/repos/slugsite/src/ErrorModal.js":"7","/Users/michaelyoung/repos/SlugToken/src/index.js":"8","/Users/michaelyoung/repos/SlugToken/src/reportWebVitals.js":"9","/Users/michaelyoung/repos/SlugToken/src/App.js":"10","/Users/michaelyoung/repos/SlugToken/src/Wallet.js":"11","/Users/michaelyoung/repos/SlugToken/src/EventTable.js":"12","/Users/michaelyoung/repos/SlugToken/src/ErrorModal.js":"13","/Users/michaelyoung/repos/SlugToken/src/Interactions.js":"14","/Users/michaelyoung/repos/SlugToken/src/Landing.js":"15","/Users/michaelyoung/repos/SlugToken/src/NavBar.js":"16","/Users/michaelyoung/repos/SlugToken/src/NavBar-app.js":"17"},{"size":586,"mtime":1651103820104,"results":"18","hashOfConfig":"19"},{"size":362,"mtime":1650495266991,"results":"20","hashOfConfig":"19"},{"size":280,"mtime":1651098720309,"results":"21","hashOfConfig":"19"},{"size":6185,"mtime":1651184858884,"results":"22","hashOfConfig":"19"},{"size":14183,"mtime":1651171801304,"results":"23","hashOfConfig":"19"},{"size":3051,"mtime":1651101840606,"results":"24","hashOfConfig":"19"},{"size":1338,"mtime":1651184512831,"results":"25","hashOfConfig":"19"},{"size":609,"mtime":1651332761025,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":1650495266991,"results":"28","hashOfConfig":"27"},{"size":679,"mtime":1651785551089,"results":"29","hashOfConfig":"27"},{"size":8072,"mtime":1651929751534,"results":"30","hashOfConfig":"27"},{"size":3465,"mtime":1651871953064,"results":"31","hashOfConfig":"27"},{"size":1545,"mtime":1651872503418,"results":"32","hashOfConfig":"27"},{"size":16775,"mtime":1651929817301,"results":"33","hashOfConfig":"27"},{"size":7734,"mtime":1651871169316,"results":"34","hashOfConfig":"27"},{"size":2791,"mtime":1651932991952,"results":"35","hashOfConfig":"27"},{"size":2745,"mtime":1651933010997,"results":"36","hashOfConfig":"27"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"7lwdm4",{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},"1dnrgf0",{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"85"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","suppressedMessages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"85"},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106"},"/Users/michaelyoung/repos/slugsite/src/index.js",[],[],[],"/Users/michaelyoung/repos/slugsite/src/reportWebVitals.js",[],[],"/Users/michaelyoung/repos/slugsite/src/App.js",["107"],[],"import logo from './logo.svg';\nimport './App.css';\nimport Wallet from './Wallet';\n\n\nfunction App() {\n  return (\n    \n    <div className=\"App font-mono\">\n      <script src=\"../node_modules/flowbite/dist/flowbite.js\"></script>\n      <Wallet/>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/michaelyoung/repos/slugsite/src/Wallet.js",["108","109","110","111","112","113","114","115"],[],"\nimport {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './Wallet.module.css'\n// import simple_token_abi from './Contracts/simple_token_abi.json'\nimport Interactions from './Interactions';\nimport ErrorModal from './ErrorModal';\nimport token_abi from './contracts/abi.json'\n\nimport EventTable from './EventTable';\n\nconst Wallet = () => {\n\n    const contractAddress = \"0x290Aa71b3e2A0ce00CeD0b2178985114a66B8e36\";\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n    const [defaultAccount, setDefaultAccount] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [balance, setBalance] = useState();\n\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n\n    const [modalOpen, setModalOpen] = useState();\n\n    \n    const checkIfWalletIsConnected = async () => {\n        try{\n            const { ethereum } = window;\n      \n            if(!ethereum){\n              console.log(\"Use Metamask!\");\n            } else{\n              console.log(\"Ethereum object found\", ethereum);\n            //   detailsOn();\n            }\n      \n            const accounts = await ethereum.request({method: 'eth_accounts'});\n            console.log(accounts[0])\n            if(accounts !== 0){\n                // if(accounts[0] != defaultAccount){\n                //     setConnButtonText('Not Connected');\n                // } else {\n                    const account = accounts[0];\n                    console.log(\"Found an authorized account \", account);\n                    setDefaultAccount(account);\n                    updateEthers();\n                    setConnButtonText('Connected');\n                // }\n              \n            //   detailsOn();\n    \n            } else{\n              console.log(\"Could not find an authorized account\");\n              setConnButtonText('Not Connected');\n            }\n          } catch(error){\n            console.log(error);\n          }\n    }\n\n    const connectWalletHandler = () => {\n        if (window.ethereum && window.ethereum.isMetaMask){\n\n            window.ethereum.request({method: 'eth_requestAccounts'})\n            .then(result => {\n                // console.log(result)\n                accountChangedHandler(result[0]);\n                setConnButtonText('Connected');\n            })\n            .catch(error => {\n                setErrorMessage(error.message);\n                setModalOpen(true);\n            })\n\n        } else {\n            console.log(\"Please install metamask\");\n            setErrorMessage(\"Please install metamask\");\n            setModalOpen(true);\n        }\n    }\n\n    const accountChangedHandler = (newAddress) =>\n    {\n        setDefaultAccount(newAddress);\n        updateEthers();\n    }\n\n    const updateEthers = () => {\n        let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n        let tempSigner = tempProvider.getSigner();\n\n        let tempContract = new ethers.Contract(contractAddress, token_abi, tempSigner);\n\n        setProvider(tempProvider);\n        setSigner(tempSigner);\n        setContract(tempContract);\n    }\n\n    \n\n    \n    const chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n    if (window.ethereum){\n        // listen for account changes\n        window.ethereum.on('accountsChanged', accountChangedHandler);\n\n        window.ethereum.on('chainChanged', chainChangedHandler);\n    }\n\t\n\n    function toFixed(x) {\n        if (Math.abs(x) < 1.0) {\n           var e = parseInt(x.toString().split('e-')[1]);\n           if (e) {\n              x *= Math.pow(10, e - 1);\n              x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\n           }\n        } else {\n           var e = parseInt(x.toString().split('+')[1]);\n           if (e > 20) {\n              e -= 20;\n              x /= Math.pow(10, e);\n              x += (new Array(e + 1)).join('0');\n           }\n        }\n        return x;\n     }\n\n     useEffect(() => {\n        if (defaultAccount == null){\n            checkIfWalletIsConnected();\n        }\n        //checkIfWalletIsConnected();\n        // if (contract != null){\n            \n        //     updateBalance();\n        //     updateTokenName();\n        // } \n    }, [contract, defaultAccount, window.ethereum])\n\n     let props = {\n         contract: contract,\n         defaultAccount: defaultAccount,\n         provider: provider\n     }\n\n     let modal_props = {\n        contract: contract,\n        defaultAccount: defaultAccount,\n        provider: provider,\n        setOpenModal: (x) => {setModalOpen(x)},\n        ErrorMessage: errorMessage\n     }\n\n    return (\n    <div>\n        <button id={styles.connectWalletButton} onClick={connectWalletHandler}>{connButtonText}</button>\n        <div>\n            <h3 className='pt-5'>Slug Token</h3>\n            {/* <div>\n                <h3>Address: {defaultAccount}</h3>\n            </div> */}                \n\n\n            <div className='mt-[50px]'>\n\n                <div className='flex items-center justify-center mb-7'>\n                    \n                <Interactions contract={props}/>\n                </div>\n                <div className='flex items-center justify-center mb-3'>\n                    {modalOpen && <ErrorModal setOpenModal={modal_props}></ErrorModal>}\n\n                </div>\n\n\n                <hr className='my-10'/>\n                <h3 className='mb-5'>Recent Taxes Collected</h3>\n                <div className='mt-2 mb-[150px] flex items-center justify-center'>\n                <EventTable contract={props}/>\n                </div>\n                \n\n\n\n                {/* <EventTable contract={props}/> */}\n            </div>\n\n            <button\n        className=\"openModalBtn\"\n        onClick={() => {\n          setModalOpen(true);\n        }}\n      >\n        ERROR TEST\n      </button>\n          \n\n            \n            \n            <p>{errorMessage}</p>\n        </div>\n\n    </div>\n\n    );\n}\n\nexport default Wallet;\n","/Users/michaelyoung/repos/slugsite/src/Interactions.js",["116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport Spinner from 'react-bootstrap/Spinner';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport * as Loader from 'react-loader-spinner';\n\nconst Interactions = (props) => {\n\n    const [txnHash, setTxnHash] = useState();\n\n    const [allowance, setAllowance] = useState();\n    const [selfAllowance, setSelfAllowance] = useState();\n    const [ApproveOrStake, setApproveOrStake] = useState();\n    const [stakeBalance, setStakeBalance] = useState(0);\n    const [unstakeBalance, setUnstakeBalance] = useState();\n\n    const [stakeAmountState, setStakeAmount] = useState();\n    const [stakeState, setStakeState] = useState();\n\n    const [txnPending, setTxnPending] = useState();\n    const [txnComplete, setTxnComplete] = useState();\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [balance, setBalance] = useState(0);\n\n    const [maxStakeAmount, setMaxStakeAmount] = useState(null);\n\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    \n\n    const approveOrStake = async () => {\n        let contractAddress = await contract.address;\n        let allowance = await contract.allowance(defaultAccount, contractAddress);\n\n        let allowanceBalance = allowance * Math.pow(10, 18);\n        setAllowance(ethers.utils.formatUnits(allowance,18));\n        console.log(ethers.utils.formatUnits(allowance,18))\n\n        let selfAllowance = await contract.allowance(defaultAccount, defaultAccount);\n        let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n        setSelfAllowance(ethers.utils.formatUnits(selfAllowance,18));\n\n        if (allowanceBalance > 0 && selfAllowanceBalance > 0){\n            setApproveOrStake(\"Stake\");\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    }\n\n    const getStakeBalance = async () =>{\n        let isStakeHolder = false;\n        let stakeId = 0;\n        if (defaultAccount instanceof Array){\n            [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount[0]);\n        } else {\n            [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n        }\n        \n        \n        if (isStakeHolder == true){\n            let stakeAmountBig = 0;\n            if (defaultAccount instanceof Array){\n                stakeAmountBig = await contract.stakedTokens(defaultAccount[0]);\n            } else {\n                stakeAmountBig = await contract.stakedTokens(defaultAccount);\n            }\n            \n            let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18)\n            setStakeBalance(stakeAmount);\n        } else {\n            setStakeBalance(0);\n        }\n    }\n\n    const stakeStateHandler = () => {\n        if (stakeState == \"Unstake\"){\n            setApproveOrStake(\"Unstake\")\n\n\n        } else {\n            approveOrStake();\n        }\n    }\n\n    const approveStakeHandler = (e) => {\n\n        let stakeAmount = e;\n        if (stakeState != \"Unstake\"){\n            if (stakeAmount <= parseInt(allowance) && stakeAmount <= parseInt(selfAllowance)){\n                setApproveOrStake(\"Stake\");\n            }\n            else if (stakeAmount == 0){\n                setApproveOrStake(\"Stake\");\n            }\n            else {\n                setApproveOrStake(\"Approve\");\n            }\n        }\n    }\n\n    \n\n    \n\n    const stakeHandler = async (e) => {\n        e.preventDefault();\n\n        console.log(stakeState);\n\n        if (stakeState == \"Unstake\"){\n            let contractAddress = await contract.address;\n            let unstakeAmount = parseInt(stakeAmountState);\n            let unstakeAmountBig = ethers.utils.parseUnits(stakeAmountState, 18);\n\n            if (stakeBalance > unstakeAmount){\n                let txn = await contract.unstakeToken(unstakeAmountBig);\n                console.log(txn);\n                setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n\n                pollTransaction(txn.hash);\n\n                // let balance = 0;\n                \n            } else {\n                window.alert(\"You cannot unstake more tokens than you have staked...\");\n            }\n        } else {\n            let contractAddress = await contract.address;\n           \n            let stakeAmount = parseInt(stakeAmountState);\n            let stakeAmountBig = ethers.utils.parseUnits(stakeAmountState, 18);\n            // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n            console.log(parseInt(allowance),selfAllowance, parseInt(ethers.utils.formatUnits(stakeAmountBig,0)), stakeAmount)\n\n            if (stakeAmount <= parseInt(allowance) && stakeAmount <= parseInt(selfAllowance)){\n\n                let txn = await contract.stakeToken(stakeAmountBig);\n                console.log(txn);\n                setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n                pollTransaction(txn.hash);\n\n            } else {\n                let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n                let txn = await contract.approve(contractAddress, stakeAmountBig);\n                console.log(txn);\n                setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n                pollTransaction(txn.hash);\n            }\n        }\n        \n    }\n\n    const unstakeHandler = async (e) => {\n        e.preventDefault();\n        let contractAddress = await contract.address;\n        let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n        let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n        if (stakeBalance > unstakeAmount){\n            let txn = await contract.unstakeToken(unstakeAmountBig);\n            console.log(txn);\n            setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n\n            pollTransaction(txn.hash);\n\n            balance = 0;\n            \n        } else {\n            window.alert(\"You cannot unstake more tokens than you have staked...\");\n        }\n        \n    }\n\n    const pollTransaction = async (txnHash) => {\n        // setTxnPending(\"Pending transaction...\");\n        let txn = await provider.getTransactionReceipt(txnHash);\n        let time = 0;\n        setApproveOrStake(<span className='justify-center flex'>                \n        <Loader.Oval className='' type=\"Circles\" color=\"#00BFFF\" height={30} width={30}/>\n    </span>);\n    \n\n        while (txn == null && time < 30){\n            await new Promise(r => setTimeout(r, 2000));\n            txn = await provider.getTransactionReceipt(txnHash);\n            time += 1;\n            \n        }\n        if (time == 30){\n            setTxnPending(\"Time out error, check your transaction to make sure it went through\");\n        } else {\n            setTxnPending(\"txn complete\");\n        }\n        setTxnComplete(txnHash);\n        stakeStateHandler();\n\n        \n    }\n    const updateTokenName = async () => {\n        let name = await contract.name();\n\n        setTokenName(name);\n    }\n    const updateBalance = async () => {\n        \n        let balanceBigN = 0;\n\n        if (defaultAccount instanceof Array){\n            balanceBigN = await contract.balanceOf(defaultAccount[0]);\n        } else {\n            balanceBigN = await contract.balanceOf(defaultAccount);\n        }\n\n        let balanceNumber = balanceBigN;\n\n        let tokenDecimals = await contract.decimals();\n\n\t\tlet tokenBalance = balanceNumber / Math.pow(10, 18);\n        console.log(2 * Math.pow(10,18))\n        setBalance(tokenBalance.toFixed(3));\n    };\n\n    const maxStakeAmountHandler = () => {\n\n        if (stakeState == \"Unstake\"){   \n            setStakeAmount(stakeBalance);\n        } else {\n            setStakeAmount(balance);\n        }\n        \n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            updateBalance();\n            updateTokenName();\n            // approveOrStake();\n            stakeStateHandler();\n            getStakeBalance();\n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    },[contract, defaultAccount, stakeState, txnComplete])\n    //contract, defaultAccount, txnPending, stakeState]\n\n    return (\n        <div className='p-4 bg-white mx-20 rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700 font-mono'>\n            <div className=''>\n                <button className='mx-5 mb-5 px-4 py-2 bg-indigo-300 hover:bg-indigo-400 rounded-2xl text-center' onClick={() => setStakeState(\"Stake\")}>\n                    <span>Stake</span>\n                </button>\n                <button className='mx-5 mb-5 px-4 py-2 bg-indigo-300 hover:bg-indigo-400 rounded-2xl text-center' onClick={() => setStakeState(\"Unstake\")}>\n                    <span>Unstake</span>\n                </button>\n                <hr className='pb-5'></hr>\n            </div>\n            <div id='stake-detail' className=''>\n                <div id='amount' className='bg-indigo-400 rounded-3xl px-5 py-10 relative'>\n                        <div className='px-15 mb-2 text-left text-black'>Amount</div>\n                        <div className='flex'>\n                            {/* <form className='flex' onSubmit={stakeHandler}> */}\n                            <div className='ml-10 mr-4'>\n                                <input className='rounded-xl' onChange= {(e) => {setStakeAmount(e.target.value);approveStakeHandler(e.target.value)}} id='stakeAmount' type='number' min='0' step='0.001' placeholder='0' value={stakeAmountState}></input>\n                            </div>\n                            <button className='rounded-3xl bg-indigo-300 w-16 hover:bg-indigo-500' onClick={(e) => {maxStakeAmountHandler()}}>\n                                <span>Max</span>\n                            </button>\n                            {/* </form> */}\n                        </div>\n                        \n                    \n\n\n                </div>\n                \n                {/* <form onSubmit={unstakeHandler}>\n                    <h3>Unstake tokens </h3>\n                    <p>Amount</p>\n                    <input type='number' id='unstakeAmount' min='0' step='0.001' placeholder='0'></input>\n                    <button type='submit'>Unstake</button>\n                </form> */}\n            </div>\n\n            <div className='mt-10 mb-10 mr-3 ml-3'>\n                    <div className='flex pb-10 relative'>\n                        <p className='left-0 absolute'>Balance: </p>\n                        <p className='right-0 absolute'>{balance}</p>\n                    </div>\n                    <div className='flex mb-10 relative'>\n                        <p className='left-0 absolute' >Staked balance: </p>\n                        <p className='right-0 absolute' >{stakeBalance}</p>\n                    </div>\n                </div>\n                {/* <button type='submit' onClick={stakeHandler}>{ApproveOrStake}</button> */}\n                {/* <form onSubmit={stakeHandler}>\n                    <h3>Stake tokens </h3>\n                    <p>Amount</p> */}\n                    {/* <input type='number' id='stakeAmount' min='0' step='0.001' placeholder='0'></input> */}\n                    {/* <button type='submit' onClick={stakeHandler}>{ApproveOrStake}</button> */}\n                {/* </form> */}\n                \n\n                <button disabled={stakeAmountState==0 || stakeAmountState == null} className='rounded-3xl bg-indigo-300 disabled:bg-indigo-100 active:bg-violet-700 hover:bg-indigo-400 w-96 py-3' type='submit' onClick={stakeHandler}>\n                    \n                {ApproveOrStake}\n                </button>\n                \n            \n            <div className='px-10'>\n                {/* {txnPending} */}\n\n\n            </div>\n            {/* <div>\n\t\t\t\t{txnHash}\n\t\t\t</div> */}\n\n\n            {/* <div class=\"p-4 max-w-sm bg-white rounded-lg border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700\">\n            <form class=\"space-y-6\" action=\"#\">\n            <h5 class=\"text-xl font-medium text-gray-900 dark:text-white\">Sign in to our platform</h5>\n            <div>\n            <label for=\"email\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" placeholder=\"name@company.com\" required=\"\"/>\n            </div>\n            <div>\n            <label for=\"password\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" required=\"\"/>\n            </div>\n            <div class=\"flex items-start\">\n            <div class=\"flex items-start\">\n            <div class=\"flex items-center h-5\">\n            </div>\n            <label for=\"remember\" class=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Remember me</label>\n            </div>\n            <a href=\"#\" class=\"ml-auto text-sm text-blue-700 hover:underline dark:text-blue-500\">Lost Password?</a>\n            </div>\n            <button type=\"submit\" class=\"w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Login to your account</button>\n            <div class=\"text-sm font-medium text-gray-500 dark:text-gray-300\">\n            Not registered? <a href=\"#\" class=\"text-blue-700 hover:underline dark:text-blue-500\">Create account</a>\n            </div>\n            </form>\n            </div> */}\n\n\n        </div>\n        \n\n    );\n\n}\n\nexport default Interactions;",[],"/Users/michaelyoung/repos/slugsite/src/EventTable.js",["141","142","143"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './EventTable.module.css'\n\n\nconst EventTable = (props) => {\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    const [Event, setEvent] = useState();\n\n    const getEvents = async () => {\n        let contractAddress = await contract.address;\n\n        // let events = contract.filters.TaxCollected(null, defaultAccount);\n        // console.log(events);\n\n        let filter = contract.filters.TaxCollected(defaultAccount)\n\n        let events = await contract.queryFilter(filter);\n        // console.log(events[0].args);\n\n        let rows = []\n\n        let headers = <tr className='table-fixed' key='10000'>\n            <th className='px-10'>Timestamp</th>\n            <th className='px-10'>Transaction Hash</th>\n            <th className='px-10'>Amount</th>\n            \n        </tr>\n\n        // rows.push(headers)\n\n        if (events instanceof Array && events.length > 0){\n            for (let i = 0; i<events.length; i++){\n                let block = await provider.getBlock(events[i].blockNumber);\n                let timestamp = block.timestamp;\n                let date = new Date(timestamp*1000)\n\n                let num = ethers.utils.formatUnits(events[i].args[1], 18)\n                // console.log(num)\n                let fixedNum = parseFloat(num);\n                fixedNum = fixedNum.toFixed(3);\n                \n                \n                console.log(events[i]);\n                let row = <tr className='table-fixed' key={i}>\n                    <td className='pt-3'>{date.toDateString()}</td>\n                    <td className=' pl-10 max-w-[300px] truncate ... pt-3'>\n                        <a className='' href={'https://rinkeby.etherscan.io/tx/'+events[i].transactionHash}>{events[i].transactionHash}</a>\n                    </td>\n                    <td className='pl-10 pr-10 min-w-min pt-3'>{fixedNum}</td>\n                    \n                </tr>\n                // headers += row;\n                rows.push(row);\n            }\n        }\n        // console.log(headers);\n        setEvent(rows);\n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            getEvents();\n        } else {\n            setEvent(\"null\");\n        }\n    },[contract, defaultAccount])\n\n    return (\n        <div className='p-4 bg-white mx-20 rounded-xl border border-gray-200 font-mono'>\n            \n            <table className='flex justify-center table-fixed' id={styles.eventtable}>\n                <tbody className='px-10 table-fixed'>\n                <tr className='table-fixed' key='10000'>\n                    <th className='px-10'>Timestamp</th>\n                    <th className='px-10'>Transaction Hash</th>\n                    <th className='px-10'>Amount</th>\n                    \n                </tr>\n                    {Event}\n                </tbody>\n            </table>\n        </div>\n\n    );\n}\nexport default EventTable;","/Users/michaelyoung/repos/slugsite/src/ErrorModal.js",["144"],[],"/Users/michaelyoung/repos/SlugToken/src/index.js",[],[],[],"/Users/michaelyoung/repos/SlugToken/src/reportWebVitals.js",[],[],"/Users/michaelyoung/repos/SlugToken/src/App.js",["145","146","147","148","149"],[],"import logo from './logo.svg';\nimport './App.css';\nimport Wallet from './Wallet';\nimport Landing from './Landing';\nimport {Route, Link, Routes, BrowserRouter, Switch, Router} from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\n\n\n\nfunction App() {\n  return (\n    \n    <div className=\"App \">\n      <script src=\"../node_modules/flowbite/dist/flowbite.js\"></script>\n      <BrowserRouter>\n      <Routes>\n        <Route path='/stake' element={<Wallet/>}>\n          \n        </Route>\n        <Route path='/' element={<Landing/>}>\n          \n        </Route>\n        </Routes>\n      </BrowserRouter>\n      \n\n      \n      \n    </div>\n    \n  );\n}\n\nexport default App;\n",[],"/Users/michaelyoung/repos/SlugToken/src/Wallet.js",["150","151","152","153","154","155","156","157","158","159","160","161"],[],"\nimport {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './Wallet.module.css'\n// import simple_token_abi from './Contracts/simple_token_abi.json'\nimport Interactions from './Interactions';\nimport ErrorModal from './ErrorModal';\nimport token_abi from './contracts/abi.json'\n\nimport EventTable from './EventTable';\n// import NavBar from './NavBar';\nimport NavBar from './NavBar-app.js';\n\n\n\nconst Wallet = () => {\n\n    const contractAddress = \"0x290Aa71b3e2A0ce00CeD0b2178985114a66B8e36\";\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [connButtonText, setConnButtonText] = useState(\"Connect Wallet\");\n    const [defaultAccount, setDefaultAccount] = useState(null);\n    const [errorMessage, setErrorMessage] = useState(null);\n    const [balance, setBalance] = useState();\n\n    const [provider, setProvider] = useState(null);\n    const [signer, setSigner] = useState(null);\n    const [contract, setContract] = useState(null);\n\n    const [modalOpen, setModalOpen] = useState();\n    const [ethersUpdated, setEthersUpdated] = useState(false);\n\n    const [network, setNetwork] = useState(null);\n\n\n    \n    const checkIfWalletIsConnected = async () => {\n        try{\n            const { ethereum } = window;\n      \n            if(!ethereum){\n              console.log(\"Use Metamask!\");\n            } else{\n              console.log(\"Ethereum object found\", ethereum);\n            //   detailsOn();\n            }\n      \n            const accounts = await ethereum.request({method: 'eth_requestAccounts'});\n            console.log(accounts)\n            if(accounts.length != 0){\n                // if(accounts[0] != defaultAccount){\n                //     setConnButtonText('Not Connected');\n                // } else {\n                    const account = accounts[0];\n                    console.log(\"Found an authorized account \", account);\n                    setDefaultAccount(account);\n                    updateEthers();\n                    setConnButtonText('Connected');\n                // }\n              \n            //   detailsOn();\n    \n            } else{\n              console.log(\"Could not find an authorized account\");\n              setConnButtonText('Not Connected');\n            }\n          } catch(error){\n            console.log(error);\n            setErrorMessage(error);\n            setModalOpen(true);\n          }\n    }\n\n    const connectWalletHandler = () => {\n        if (window.ethereum && window.ethereum.isMetaMask){\n\n            window.ethereum.request({method: 'eth_requestAccounts'})\n            .then(result => {\n                // console.log(result)\n                accountChangedHandler(result[0]);\n                setConnButtonText('Connected');\n            })\n            .catch(error => {\n                console.log(error)\n                setErrorMessage(error.message);\n                setModalOpen(true);\n            })\n\n        } else {\n            console.log(\"Please install metamask\");\n            setErrorMessage(\"Please install metamask\");\n            setModalOpen(true);\n\n        }\n    }\n\n    const accountChangedHandler = (newAddress) =>\n    {\n        if (newAddress instanceof Array){\n        setDefaultAccount(newAddress[0]);\n        } else {\n            setDefaultAccount(newAddress);\n        }\n        updateEthers();\n    }\n\n    const updateEthers = () => {\n       \n        let tempProvider = new ethers.providers.Web3Provider(window.ethereum);\n\n        let tempSigner = tempProvider.getSigner();\n\n        let tempContract = new ethers.Contract(contractAddress, token_abi, tempSigner);\n\n        setProvider(tempProvider);\n        setSigner(tempSigner);\n        setContract(tempContract);\n    }\n\n    \n\n    \n\n    \n    const chainChangedHandler = () => {\n\t\t// reload the page to avoid any errors with chain change mid use of application\n\t\twindow.location.reload();\n\t}\n    if (window.ethereum){\n        // listen for account changes\n        window.ethereum.on('accountsChanged', accountChangedHandler);\n\n        window.ethereum.on('chainChanged', chainChangedHandler);\n\n    }\n\t\n\n    function toFixed(x) {\n        if (Math.abs(x) < 1.0) {\n           var e = parseInt(x.toString().split('e-')[1]);\n           if (e) {\n              x *= Math.pow(10, e - 1);\n              x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);\n           }\n        } else {\n           var e = parseInt(x.toString().split('+')[1]);\n           if (e > 20) {\n              e -= 20;\n              x /= Math.pow(10, e);\n              x += (new Array(e + 1)).join('0');\n           }\n        }\n        return x;\n     }\n     const getNetwork = async () => {\n        let n =  await provider.getNetwork(1);\n        console.log(n.name);\n        setNetwork(n.name);\n    }\n\n     useEffect(() => {\n        if (defaultAccount == null && window.ethereum && window.ethereum.isMetaMask){\n            checkIfWalletIsConnected();\n            \n        }\n        getNetwork();\n        //checkIfWalletIsConnected();\n        // if (contract != null){\n            \n        //     updateBalance();\n        //     updateTokenName();\n        // } \n    }, [contract, defaultAccount, window.ethereum, network])\n\n     let props = {\n         contract: contract,\n         defaultAccount: defaultAccount,\n         provider: provider,\n         setOpenModal: (x) => {setModalOpen(x)},\n         setErrorMessage: (x) => {setErrorMessage(x)},\n         network: network\n\n     }\n\n     let modal_props = {\n        contract: contract,\n        defaultAccount: defaultAccount,\n        provider: provider,\n        setOpenModal: (x) => {setModalOpen(x)},\n        ErrorMessage: errorMessage\n        \n     }\n\n    return (\n\n        \n    <div className=\" bg-[url('/src/slugpcopy.png')]  md:bg-cover bg-no-repeat bg-center md:bg-top w-screen h-screen scroll  justify-center  \">\n        {/* <div className='justify-end flex '>\n                    <NavBar className=''/>\n                    \n        </div> */}\n        <div className='justify-end flex relative'>\n            <NavBar className=''/>\n            <div className='flex justify-start max-w-[300px] p-2 pt-5 absolute left-0'>\n                    <img src={require('./title.png')} className=' md:bg-cover bg-no-repeat bg-center'/>\n\n                </div>\n            {/* <h3 id={styles.header} className=''>Slug Token</h3> */}\n        </div>\n        <button className='p-2 bottom-3 left-3 absolute bg-white pixel-border' id={styles.connectWalletButtton} onClick={connectWalletHandler}>{connButtonText}</button>\n\n\n        \n        \n        <div>\n            \n            {/* <div>\n                <h3>Address: {defaultAccount}</h3>\n            </div> */}                \n\n\n            <div className='xl:mt-[135px] lg:mt-[135px]  md:mt-[125px]  sm:mt-[100px] mt-[90px] xl:text-2xl lg:text-2xl md:text-2xl sm:text-2xl text-xl  ' id={styles.container}>\n                \n                <div className='flex items-center justify-center mb-7 '>\n                    \n                <Interactions contract={props}/>\n                </div>\n                <div className='flex items-center justify-center mb-3'>\n                    {modalOpen && <ErrorModal setOpenModal={modal_props}></ErrorModal>}\n\n                </div>\n\n                <hr className='my-10'/>\n                <div className='justify-center flex items-center '>\n                    <h3 className='mb-5 pixel-border bg-white border px-30 justify-center flex items-center text-2xl'>Recent Taxes Collected</h3>\n                </div>\n                <div className='mt-2 mb-[150px] flex items-center justify-center '>\n                <EventTable contract={props}/>\n                </div>\n                \n                \n\n\n\n                {/* <EventTable contract={props}/> */}\n            </div>\n\n            {/* <button\n        className=\"openModalBtn\"\n        onClick={() => {\n          setModalOpen(true);\n        }}\n      >\n        ERROR TEST\n      </button> */}\n          \n\n            \n            \n            {/* <p>{errorMessage}</p> */}\n        </div>\n\n    </div>\n\n    );\n}\n\nexport default Wallet;\n",[],"/Users/michaelyoung/repos/SlugToken/src/EventTable.js",["162","163","164","165"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport styles from './EventTable.module.css'\n\n\nconst EventTable = (props) => {\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    const [Event, setEvent] = useState();\n\n    const getEvents = async () => {\n        let contractAddress = await contract.address;\n\n        // let events = contract.filters.TaxCollected(null, defaultAccount);\n        // console.log(events);\n\n        let filter = contract.filters.TaxCollected(defaultAccount)\n\n        let events = await contract.queryFilter(filter);\n        // console.log(events[0].args);\n\n        let rows = []\n\n        let headers = <tr className='table-fixed' key='10000'>\n            <th className='px-10'>Timestamp</th>\n            <th className='px-10'>Transaction Hash</th>\n            <th className='px-10'>Amount</th>\n            \n        </tr>\n\n        // rows.push(headers)\n\n        if (events instanceof Array && events.length > 0){\n            for (let i = events.length-1; i > -1; i--){\n\n                if (i == events.length-10){\n                    break;\n                }\n                let block = await provider.getBlock(events[i].blockNumber);\n                let timestamp = block.timestamp;\n                let date = new Date(timestamp*1000)\n\n                let num = ethers.utils.formatUnits(events[i].args[1], 18)\n                // console.log(num)\n                let fixedNum = parseFloat(num);\n                fixedNum = fixedNum.toFixed(3);\n                \n                \n                console.log(events[i]);\n                let row = <tr className='' key={i}>\n                    <td className='pt-3'>{date.toDateString()}</td>\n                    <td className=' xl:pl-10 lg:pl-10 md:pl-10 sm:pl-10 xl:max-w-[300px] lg:max-w-[300px] md:max-w-[300px] sm:max-w-[300px] max-w-[150px] truncate ... pt-3'>\n                        <a className='' href={'https://rinkeby.etherscan.io/tx/'+events[i].transactionHash}>{events[i].transactionHash}</a>\n                    </td>\n                    <td className='xl:pl-10 lg:pl-10 md:pl-10 sm:pl-10 xl:pr-10 lg:pr-10 md:pr-10 sm:pr-10 min-w-min pt-3'>{fixedNum}</td>\n                    \n                </tr>\n                // headers += row;\n                rows.push(row);\n            }\n        }\n        // console.log(headers);\n        setEvent(rows);\n    }\n\n    useEffect(() =>{\n        if (contract != null){\n            getEvents();\n        } else {\n            setEvent(\"null\");\n        }\n    },[contract, defaultAccount])\n\n    return (\n        <div className='p-4 bg-white pixel-border border border-gray-200 xl:mx-32 lg:mx-20 md:mx-20 sm:mx-5 mx-3 xl:text-xl lg:text-xl md:text-xl sm:text-xl text-xl'>\n            \n            <table className='flex justify-center table-fixed ' id={styles.eventtable}>\n                <tbody className=' table-fixed '>\n                <tr className='table-fixed' key='10000'>\n                    <th className='xl:px-16 lg:px-16 md:px-10 sm:px-10 px-3'>Timestamp</th>\n                    <th className='xl:px-16 lg:px-16 md:px-10 sm:px-10 px-3'>Txn Hash</th>\n                    <th className='xl:px-16 lg:px-16 md:px-10 sm:px-10 px-3'>Amount</th>\n                    \n                </tr>\n                    {Event}\n                </tbody>\n            </table>\n        </div>\n\n    );\n}\nexport default EventTable;",[],"/Users/michaelyoung/repos/SlugToken/src/ErrorModal.js",["166"],[],"import React, { useState } from 'react';\n\nconst ErrorModal = (props) => {\n\n    let setOpenModal = props.setOpenModal.setOpenModal;\n    let ErrorMessage = props.setOpenModal.ErrorMessage;\n\n    if (typeof ErrorMessage === 'object'){\n        ErrorMessage = ErrorMessage.message;\n    } \n    \n\n\n    return (\n        <div className='p-4 bg-white mx-20 pixel-border border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n             <div className=\"modalContainer\">\n                <div className=\"titleCloseBtn\">\n                {/* <button\n                    onClick={() => {\n                    setOpenModal(false);\n\n                    }}\n                >\n                    X\n                </button> */}\n                </div>\n                <div className=\"title\">\n                <h1>Error</h1>\n                <hr/>\n                </div>\n                <div className=\"body mt-3 mb-3 max-w-[700px]\">\n                <p className='max-w-[700px]'>{(ErrorMessage).toString()}</p>\n                </div>\n                <div className=\"footer mt-4\">\n                <button className='pixel-border border bg-lime-400  hover:bg-lime-600'\n                    onClick={() => {\n                    setOpenModal(false);\n                    }}\n                    id=\"cancelBtn\"\n                >\n                    Okay\n                </button>\n                {/* <button>Continue</button> */}\n                </div>\n            </div>\n            \n        </div>\n\n\n        );\n}\n\n\n\nexport default ErrorModal;\n","/Users/michaelyoung/repos/SlugToken/src/Interactions.js",["167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport Spinner from 'react-bootstrap/Spinner';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport * as Loader from 'react-loader-spinner';\n\nconst Interactions = (props) => {\n\n    const [txnHash, setTxnHash] = useState();\n\n    const [allowance, setAllowance] = useState();\n    const [selfAllowance, setSelfAllowance] = useState();\n    const [ApproveOrStake, setApproveOrStake] = useState();\n    const [stakeBalance, setStakeBalance] = useState(0);\n    const [unstakeBalance, setUnstakeBalance] = useState();\n\n    const [stakeAmountState, setStakeAmount] = useState();\n    const [stakeState, setStakeState] = useState();\n\n    const [txnPending, setTxnPending] = useState();\n    const [txnComplete, setTxnComplete] = useState();\n\n    const [tokenName, setTokenName] = useState(\"Token\");\n    const [balance, setBalance] = useState(0);\n\n    const [maxStakeAmount, setMaxStakeAmount] = useState(null);\n\n\n    \n\n    let contract = props.contract.contract;\n    let defaultAccount = props.contract.defaultAccount;\n    let provider = props.contract.provider;\n    let setOpenModal = props.contract.setOpenModal;\n    let setErrorMessage = props.contract.setErrorMessage;\n    let network = props.contract.network;\n\n    \n\n    const approveOrStake = async () => {\n        try{\n            if (defaultAccount != null && defaultAccount.length != 0){\n                let contractAddress = await contract.address;\n                let account = defaultAccount\n                if (account instanceof Array){\n                    account = account[0];\n                }\n                let allowance = await contract.allowance(account, contractAddress);\n\n                let allowanceBalance = allowance * Math.pow(10, 18);\n                setAllowance(ethers.utils.formatUnits(allowance,18));\n                console.log(ethers.utils.formatUnits(allowance,18))\n\n                let selfAllowance = await contract.allowance(account, account);\n                let selfAllowanceBalance = selfAllowance * Math.pow(10, 18);\n                setSelfAllowance(ethers.utils.formatUnits(selfAllowance,18));\n\n                if (allowanceBalance > 0 && selfAllowanceBalance > 0){\n                    setApproveOrStake(\"Stake\");\n                } else {\n                    setApproveOrStake(\"Approve\");\n                }\n            } else {\n                setApproveOrStake(\"Stake\");\n            }\n            \n        } catch (e) {   \n            setOpenModal(true);\n            setErrorMessage(e);\n        }\n        \n    }\n\n    const getStakeBalance = async () =>{\n        try {\n            let isStakeHolder = false;\n            let stakeId = 0;\n            if (defaultAccount != null && defaultAccount.length > 0){\n                if (defaultAccount instanceof Array){\n                    [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount[0]);\n                } else {\n                    [isStakeHolder, stakeId] = await contract.isStakeholder(defaultAccount);\n                }\n                \n                \n                if (isStakeHolder == true){\n                    let stakeAmountBig = 0;\n                    if (defaultAccount instanceof Array){\n                        stakeAmountBig = await contract.stakedTokens(defaultAccount[0]);\n                    } else {\n                        stakeAmountBig = await contract.stakedTokens(defaultAccount);\n                    }\n                    \n                    let stakeAmount = ethers.utils.formatUnits(stakeAmountBig, 18)\n                    setStakeBalance(stakeAmount);\n                } else {\n                    setStakeBalance(0);\n                }\n            } else {\n                setStakeBalance(0);\n                setBalance(0)\n\n            }\n            \n        } catch (e) {   \n            setOpenModal(true);\n            setErrorMessage(e);\n        }\n        \n    }\n\n    const stakeStateHandler = () => {\n        if (stakeState == \"Unstake\"){\n            setApproveOrStake(\"Unstake\")\n\n\n        } else {\n            if (defaultAccount != null && defaultAccount.length > 0){\n                approveOrStake();\n            }\n            \n        }\n    }\n\n    const approveStakeHandler = (e) => {\n\n        let stakeAmount = e;\n        if (stakeState != \"Unstake\"){\n            if (stakeAmount <= parseInt(allowance) && stakeAmount <= parseInt(selfAllowance)){\n                setApproveOrStake(\"Stake\");\n            }\n            else if (stakeAmount == 0){\n                setApproveOrStake(\"Stake\");\n            }\n            else {\n                setApproveOrStake(\"Approve\");\n            }\n        }\n    }\n\n    \n\n    \n\n    const stakeHandler = async (e) => {\n        e.preventDefault();\n        console.log(defaultAccount);\n\n        try {\n            if (stakeState == \"Unstake\"){\n                let contractAddress = await contract.address;\n                let unstakeAmount = parseInt(stakeAmountState);\n                let unstakeAmountBig = ethers.utils.parseUnits(stakeAmountState, 18);\n    \n                if (stakeBalance > unstakeAmount){\n                    let txn = await contract.unstakeToken(unstakeAmountBig);\n                    console.log(txn);\n                    setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n    \n                    pollTransaction(txn.hash);\n                    // setStakeAmount(0);\n    \n                    // let balance = 0;\n                    \n                } else {\n                    window.alert(\"You cannot unstake more tokens than you have staked...\");\n                }\n            } else {\n                let contractAddress = await contract.address;\n               \n                let stakeAmount = parseFloat(stakeAmountState);\n                let stakeAmountBig = ethers.utils.parseUnits(stakeAmountState, 18);\n                // let allowanceBig = ethers.utils.parseUnits(allowance.toString());\n                console.log(parseFloat(allowance),selfAllowance, parseFloat(ethers.utils.formatUnits(stakeAmountBig,0)), stakeAmount)\n                if (stakeAmount > balance){\n                    window.alert(\"You do not have enough tokens...\");\n                } else {\n                    if (stakeAmount <= parseFloat(allowance) && stakeAmount <= parseFloat(selfAllowance)){\n    \n                        let txn = await contract.stakeToken(stakeAmountBig);\n                        console.log(txn);\n                        setTxnHash(\"Stake transaction confirmation hash: \" + txn.hash);\n                        pollTransaction(txn.hash);\n                        // setStakeAmount(0);\n        \n                    } else {\n                        let approveSelftxn = await contract.approve(defaultAccount, stakeAmountBig);\n                        let txn = await contract.approve(contractAddress, stakeAmountBig);\n                        console.log(txn);\n                        setTxnHash(\"Approval transaction confirmation hash: \" + txn.hash);\n                        pollTransaction(txn.hash);\n                    }\n                }\n                \n            }\n        } catch (e) {   \n            setOpenModal(true);\n\n            if (typeof e === 'object'){\n                setErrorMessage(e.message);\n            } else {\n                console.log(e);\n                setErrorMessage(e);\n            }\n            \n        }\n\n        \n        \n    }\n\n    // const unstakeHandler = async (e) => {\n    //     e.preventDefault();\n    //     let contractAddress = await contract.address;\n    //     let unstakeAmount = parseInt(e.target.unstakeAmount.value);\n    //     let unstakeAmountBig = ethers.utils.parseUnits(e.target.unstakeAmount.value, 18);\n\n    //     if (stakeBalance > unstakeAmount){\n    //         let txn = await contract.unstakeToken(unstakeAmountBig);\n    //         console.log(txn);\n    //         setTxnHash(\"Unstake transaction confirmation hash: \" + txn.hash);\n\n    //         pollTransaction(txn.hash);\n\n    //         balance = 0;\n            \n    //     } else {\n    //         window.alert(\"You cannot unstake more tokens than you have staked...\");\n    //     }\n        \n    // }\n\n    const pollTransaction = async (txnHash) => {\n        try{\n            let txn = await provider.getTransactionReceipt(txnHash);\n            let time = 0;\n            setApproveOrStake(<span className='justify-center flex'>                \n            <Loader.Oval className='' type=\"Circles\" color=\"#000000\" height={30} width={30}/>\n            </span>);\n        \n\n            while (txn == null && time < 30){\n                await new Promise(r => setTimeout(r, 2000));\n                txn = await provider.getTransactionReceipt(txnHash);\n                time += 1;\n                \n            }\n            if (time == 30){\n                setTxnPending(\"Time out error, check your transaction to make sure it went through\");\n            } else {\n                setTxnPending(\"txn complete\");\n            }\n            \n            setTxnComplete(txnHash);\n            stakeStateHandler();\n        } catch (e) {   \n            setOpenModal(true);\n            setErrorMessage(e);\n        }\n        \n\n        \n    }\n    const updateTokenName = async () => {\n        let name = await contract.name();\n\n        setTokenName(name);\n    }\n    const updateBalance = async () => {\n        \n        let balanceBigN = 0;\n\n        if (defaultAccount instanceof Array){\n            balanceBigN = await contract.balanceOf(defaultAccount[0]);\n        } else {\n            balanceBigN = await contract.balanceOf(defaultAccount);\n        }\n\n        let balanceNumber = balanceBigN;\n\n        let tokenDecimals = await contract.decimals();\n\n\t\tlet tokenBalance = balanceNumber / Math.pow(10, 18);\n        console.log(2 * Math.pow(10,18))\n        setBalance(tokenBalance.toFixed(5));\n    };\n\n    const maxStakeAmountHandler = () => {\n\n        if (stakeState == \"Unstake\"){   \n            setStakeAmount(stakeBalance);\n        } else {\n            setStakeAmount(balance);\n        }\n        \n    }\n\n   \n\n    useEffect(() =>{\n        \n        \n        if (contract != null){  \n\n            \n\n            if (network == 'rinkeby') {\n                updateBalance();\n                updateTokenName();\n                // approveOrStake();\n                stakeStateHandler();\n                getStakeBalance();\n            } else if (network != null){\n                setOpenModal(true);\n                setErrorMessage(\"Wrong network\");\n            }\n            \n            \n        } else {\n            setApproveOrStake(\"Approve\");\n        }\n    },[contract, defaultAccount, stakeState, txnComplete, network])\n    //contract, defaultAccount, txnPending, stakeState]\n\n    return (\n        <div className=' pt-4 bg-white pixel-border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700 '>\n            <div className=''>\n                <button className='mx-5 mb-5 px-4 py-2 bg-lime-400 hover:bg-lime-600 pixel-border text-center' onClick={() => setStakeState(\"Stake\")}>\n                    <span className=''>Stake</span>\n                </button>\n                <button className='mx-5 mb-5 px-4 py-2 bg-lime-400 hover:bg-lime-600 pixel-border text-center' onClick={() => setStakeState(\"Unstake\")}>\n                    <span>Unstake</span>\n                </button>\n                <hr className='pb-5'></hr>\n            </div>\n            <div id='stake-detail' className='mx-3'>\n                <div id='amount' className='bg-lime-500 pixel-border px-3 py-10 '>\n                        <div className='px-15 mb-2 text-left text-black'>Amount</div>\n                        <div className='flex md:mx-5 '>\n                            {/* <form className='flex' onSubmit={stakeHandler}> */}\n                            <div className='ml-10 mr-4'>\n                                <input className='pixel-border xl:text-xl lg:text-xl md:text-xl sm:text-xl' onChange= {(e) => {setStakeAmount(e.target.value);approveStakeHandler(e.target.value)}} id='stakeAmount' type='number' min='0' step='0.001' placeholder='0' value={stakeAmountState}></input>\n                            </div>\n                            <button className='pixel-border bg-lime-200 w-16 hover:bg-lime-600' onClick={(e) => {maxStakeAmountHandler()}}>\n                                <span>Max</span>\n                            </button>\n                            {/* </form> */}\n                        </div>\n                        \n                    \n\n\n                </div>\n                \n                {/* <form onSubmit={unstakeHandler}>\n                    <h3>Unstake tokens </h3>\n                    <p>Amount</p>\n                    <input type='number' id='unstakeAmount' min='0' step='0.001' placeholder='0'></input>\n                    <button type='submit'>Unstake</button>\n                </form> */}\n            </div>\n\n            <div className='mt-10 mb-10 mr-3 ml-3  '>\n                    <div className='flex pb-10 relative'>\n                        <p className='left-0 absolute'>Balance: </p>\n                        <p className='right-0 absolute'>{balance}</p>\n                    </div>\n                    <div className='flex mb-10 relative'>\n                        <p className='left-0 absolute' >Staked balance: </p>\n                        <p className='right-0 absolute' >{stakeBalance}</p>\n                    </div>\n            </div>\n                {/* <button type='submit' onClick={stakeHandler}>{ApproveOrStake}</button> */}\n                {/* <form onSubmit={stakeHandler}>\n                    <h3>Stake tokens </h3>\n                    <p>Amount</p> */}\n                    {/* <input type='number' id='stakeAmount' min='0' step='0.001' placeholder='0'></input> */}\n                    {/* <button type='submit' onClick={stakeHandler}>{ApproveOrStake}</button> */}\n                {/* </form> */}\n                \n\n                <button disabled={stakeAmountState==0 || stakeAmountState == null} className='pixel-border bg-lime-500 disabled:bg-lime-100 active:bg-lime-500 hover:bg-lime-600 xl:w-96 lg:w-96 md:w-96 sm:w-96 w-80 py-3 my-5' type='submit' onClick={stakeHandler}>\n                    \n                {ApproveOrStake}\n                </button>\n                \n            \n            <div className='px-10'>\n                {/* {txnPending} */}\n                \n\n\n            </div>\n            {/* <div>\n\t\t\t\t{txnHash}\n\t\t\t</div> */}\n\n\n            {/* <div class=\"p-4 max-w-sm bg-white rounded-lg border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700\">\n            <form class=\"space-y-6\" action=\"#\">\n            <h5 class=\"text-xl font-medium text-gray-900 dark:text-white\">Sign in to our platform</h5>\n            <div>\n            <label for=\"email\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your email</label>\n            <input type=\"email\" name=\"email\" id=\"email\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" placeholder=\"name@company.com\" required=\"\"/>\n            </div>\n            <div>\n            <label for=\"password\" class=\"block mb-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Your password</label>\n            <input type=\"password\" name=\"password\" id=\"password\" placeholder=\"••••••••\" class=\"bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5 dark:bg-gray-600 dark:border-gray-500 dark:placeholder-gray-400 dark:text-white\" required=\"\"/>\n            </div>\n            <div class=\"flex items-start\">\n            <div class=\"flex items-start\">\n            <div class=\"flex items-center h-5\">\n            </div>\n            <label for=\"remember\" class=\"ml-2 text-sm font-medium text-gray-900 dark:text-gray-300\">Remember me</label>\n            </div>\n            <a href=\"#\" class=\"ml-auto text-sm text-blue-700 hover:underline dark:text-blue-500\">Lost Password?</a>\n            </div>\n            <button type=\"submit\" class=\"w-full text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800\">Login to your account</button>\n            <div class=\"text-sm font-medium text-gray-500 dark:text-gray-300\">\n            Not registered? <a href=\"#\" class=\"text-blue-700 hover:underline dark:text-blue-500\">Create account</a>\n            </div>\n            </form>\n            </div> */}\n\n\n        </div>\n        \n\n    );\n\n}\n\nexport default Interactions;","/Users/michaelyoung/repos/SlugToken/src/Landing.js",["191","192","193","194","195"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\nimport NavBar from './NavBar';\n\n\nconst Landing = () => {\n\n    let props = {\n        defaultAddress: null\n    }\n    return (\n        <div className=\"bg-[url('/src/nocloud.png')] md:bg-cover bg-no-repeat bg-center md:bg-top w-screen h-screen scroll relative\">\n            \n            <div className=\"justify-center relative  \">\n                    \n\n                <div className='justify-end flex '>\n                    <NavBar className=''/>\n                    \n                </div>\n\n                {/* <div className=\"bg-[url('/src/title.png')] md:bg-cover bg-no-repeat bg-center\">\n                    \n                </div> */}\n\n                <div className='flex justify-center pt-[100px] xl:mx-32  lg:mx-20 md:mx-20 sm:mx-5 mx-10 '>\n                    <img src={require('./title.png')} className=' md:bg-cover bg-no-repeat bg-center'/>\n\n                </div>\n                \n\n                <div className='  xl:pt-[75px] lg:pt-[75px] md:pt-[75px] sm:pt-[75px] pt-[50px] pb-14 grid lg:grid-cols-3 md:grid-cols-3 gap-8 sm:grid-cols-3 grid-cols-1  xl:mx-64 lg:mx-20 md:mx-20 sm:mx-5 mx-10'>\n                {/* <h5>SLUG TOKEN</h5> */}\n                \n                    <div className=' flex flex-col items-center justify-center xl:col-span-2 lg:col-span-2 md:col-span-2 sm:col-span-2 col-span-1 p-4 bg-white pixel-border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        <h5 className='lg:text-3xl md:text-3xl sm:text-3xl text-3xl'>\n                            Stake Tokens, Win Money\n                        </h5>\n                        <h3 className='pt-4 px-5 lg:text-2xl md:text-2xl sm:text-2xl text-xl'>\n                            Stake your $SLUG tokens for a chance to win anytime a transaction takes place.\n                        </h3>\n                    </div>\n\n                    <div className=' pixel-border min-h-[150px] row-span-1 col-span-1 bg-[url(\"/src/sluglayer.png\")] bg-contain bg-no-repeat bg-center flex flex-col items-center justify-center p-4 bg-white  border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        {/* <img src='/src/sluglayer.png'>\n                        </img>\n                        <h5 className='lg:text-2xl md:text-2xl sm:text-2xl text-2xl'>\n                            Stake $SLUG Here!\n                        </h5>\n                         */}\n                        \n                    </div>\n\n                  \n                    <div className='pixel-border flex flex-col items-center justify-center row-span-4  xl:col-span-3 lg:col-span-3 md:col-span-3 sm:col-span-3 col-span-1 p-4 bg-white  border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        <h5 className='lg:text-3xl md:text-3xl sm:text-3xl text-3xl'>\n                            How it works\n                        </h5>\n                        <h3 className='pt-4 px-5 lg:text-2xl md:text-2xl sm:text-2xl text-xl'>\n                            Each $SLUG Token transaction has a small tax of 10%, this tax is sent to a random stakeholders address.\n                            The tokenomics of SlugToken promote hodling with a staking + sell tax model, which increases the wealth of token holders.\n                        </h3>\n\n                        <h3 className='pt-4 px-5 lg:text-2xl md:text-2xl sm:text-2xl text-xl'>\n                            Check out our documentation for more information.\n                        </h3>\n                        \n                    </div>\n\n                    <div className=' pixel-border flex flex-col justify-center items-center  p-4 bg-white mrt-10  border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        <h5 className='lg:text-2xl md:text-2xl sm:text-2xl text-2xl'>\n                            Buy on Quickswap\n                        </h5>\n                        <h3 className=' pt-4 px-5 lg:text-lg md:text-lg sm:text-lg text-md'>\n                            LINK\n                        </h3>\n                        \n                    </div>\n\n                    <div className='pixel-border flex flex-col justify-center items-center  p-4 bg-white mrt-10 border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        <h5 className='lg:text-2xl md:text-2xl sm:text-2xl text-2xl'>\n                            Join the Community!\n                        </h5>\n                        <h3 className=' pt-4 px-5 lg:text-lg md:text-lg sm:text-lg text-md'>\n                            DISCORD\n                        </h3>\n                        \n                    </div>\n\n                    <div className='pixel-border flex flex-col justify-center items-center  p-4 bg-white mrt-10 border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        <h5 className='lg:text-2xl md:text-2xl sm:text-2xl text-2xl'>\n                            Roadmap\n                        </h5>\n                        <h3 className=' pt-4 px-5 lg:text-lg md:text-lg sm:text-lg text-md'>\n                            Check out our Slugmap!\n                        </h3>\n                        \n                    </div>\n\n                    {/* <div className='xl:col-span-3 lg:col-span-3 md:col-span-3 sm:col-span-3 col-span-1'>\n                        <EventTable contract={props}/>\n\n                    </div> */}\n\n\n                    \n\n                </div>\n                {/* <hr className='pt-10'></hr>\n                <div className='pb-10 xl:mx-32  lg:mx-20 md:mx-20 sm:mx-5 mx-10'>\n                    <div className='p-4 bg-white rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        <h5 className='text-2xl'>\n                            How it works\n                        </h5>\n                        <h3 className='pt-8 px-5'>\n                            Each SlugToken transaction has a small tax of 10%, this tax is sent to a random stakeholders address.\n                            The tokenomics of SlugToken promote hodling with a staking + sell tax model, which increases the wealth of token holders.\n                        </h3>\n                    </div>\n                    \n                </div>\n\n                <hr className='pt-10'></hr>\n                <div className='grid lg:grid-cols-2 md:grid-cols-2 gap-5 sm:grid-cols-2 grid-cols-1  xl:mx-32  lg:mx-20 md:mx-20 sm:mx-5 mx-10'>\n                    <div className=' bg-white  rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        <h5 className='text-2xl '>\n                            Buy SlugToken\n                        </h5>\n                        <h3 className='pt-8 px-5 '>\n                            Link to quickswap\n                        </h3>\n                    </div>\n                    <div className=' bg-white  rounded-3xl border border-gray-200 shadow-md sm:p-6 lg:p-8 dark:bg-gray-800 dark:border-gray-700'>\n                        <h5 className='text-2xl'>\n                            SlugToken Price\n                        </h5>\n                        <h3 className='pt-8 px-5 '>\n                            $1.00\n                        </h3>\n                    </div>\n                    \n                </div> */}\n\n                <hr className='pt-10'></hr>\n\n                \n\n\n                \n\n                \n\n\n                \n            </div>\n        </div>\n\n        \n    );\n}\n\nexport default Landing;","/Users/michaelyoung/repos/SlugToken/src/NavBar.js",["196","197","198","199"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\n// import styles from './NavBar.module.css'\nimport Hamburger from 'hamburger-react'\n\n\n\n\nconst MenuItem = (props) => {\n    let text = props.text;\n    let pathDict = {\n        Stake: \"Stake\",\n        Buy: \"\",\n        Community: \"\",\n        Docs: \"\",\n        Slugmap: \"\"\n    }\n    return <a href={window.location.href+pathDict[text]} className=' '>\n        <button className=' header-button justify-center bg-white border hover:bg-gray-300 '>\n        <span className=''>{text}</span>\n        </button>\n    </a>\n    \n}\n\nconst NavBar = () => {\n    const [menuOpen, setMenuOpen] = useState('none');\n    const [menuTransform, setMenuTransform] = useState('')\n    const [open, setOpen] = useState(false);\n\n\n    const openMenu = () => {\n        // setMenuTransform('translateX(100%)');\n        if (menuOpen == null || menuOpen == 'none'){\n\n            setMenuOpen('flex');\n            setOpen(true);\n\n        } else {\n            setMenuOpen('none')\n            setOpen(false);\n        }\n        \n        \n        \n    }\n\n    const handleResize = () => {\n        console.log('called')\n        if (window.innerWidth < 760){\n            setMenuOpen('none');\n            // setMenuTransform('translateX(-120%)');\n        } else {\n            setMenuOpen('flex');\n            setOpen(false);\n            // setMenuTransform('translateX(0)')\n        }\n    }\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", handleResize);\n\n\n    useEffect(() => {\n        \n    })\n\n    var myMenu = ['Stake','Buy','Community', 'Docs','Slugmap'];\n    return (\n        <div className='flex w-screen '>\n            {/* <button className='left-0 absolute header-button '>\n                Slug Token\n            </button> */}\n\n          <div className='wrapper justify-center absolute right-0 mt-2 '>\n            \n            <div id='navButtonLanding' className='justify-end bg-white  border absolute right-0 hover:bg-gray-300'>\n            \n                <Hamburger id='' size={20} toggled={open} toggle={() => {openMenu()}} className='justify-end' style={{'display': 'none'}}>X</Hamburger>\n\n            </div>\n            <div className='bg-white bgf-[url(\"/src/slugp.png\")] ml-20 pixel-border border button-container ' style={{'visibility': open ? 'visible' : 'hidden'}}>\n                <ul className='justify-center ' style={{'display': menuOpen, 'visibility': 'visible'}}>\n                        \n                        {myMenu.map(item => {\n                        return <MenuItem key={item} text={item}/>\n                        })}\n                    </ul>\n            </div>\n            \n            \n          </div>\n          \n          \n        </div>    \n      );\n}\n\nexport default NavBar;",[],"/Users/michaelyoung/repos/SlugToken/src/NavBar-app.js",["200","201","202","203"],[],"import {React, useState, useEffect} from 'react'\nimport {ethers} from 'ethers'\n// import styles from './NavBar.module.css'\nimport Hamburger from 'hamburger-react'\n\n\n\n\nconst MenuItem = (props) => {\n    let text = props.text;\n\n    let pathDict = {\n        Home: \"\",\n        Buy: \"\",\n        Community: \"\",\n        Docs: \"\",\n        Slugmap: \"\"\n    }\n    return <a href={window.location.href+pathDict[text]}>\n        <button className=' header-button justify-center  bg-white border hover:bg-gray-300  '>\n        <span className=''>{text}</span>\n        </button>\n    </a>\n    \n}\n\nconst NavBar = () => {\n    const [menuOpen, setMenuOpen] = useState('none');\n    const [menuTransform, setMenuTransform] = useState('')\n    const [open, setOpen] = useState(false);\n\n\n    const openMenu = () => {\n        // setMenuTransform('translateX(100%)');\n        if (menuOpen == null || menuOpen == 'none'){\n\n            setMenuOpen('flex');\n            setOpen(true);\n\n        } else {\n            setMenuOpen('none')\n            setOpen(false);\n        }\n        \n        \n        \n    }\n\n    const handleResize = () => {\n        if (window.innerWidth < 760){\n            setMenuOpen('none');\n            // setMenuTransform('translateX(-120%)');\n        } else {\n            setMenuOpen('flex');\n            setOpen(false);\n            // setMenuTransform('translateX(0)')\n        }\n    }\n    window.addEventListener(\"resize\", handleResize);\n    window.addEventListener(\"load\", handleResize);\n\n    useEffect(() => {\n        \n    })\n\n    var myMenu = ['Home','Buy','Community', 'Docs','Slugmap'];\n    return (\n        <div className='flex w-screen '>\n            {/* <button className='left-0 absolute header-button '>\n                Slug Token\n            </button> */}\n\n          <div className=' wrapper justify-center absolute right-0 mt-2'>\n            \n            <div id='navButton' className='justify-end bg-white border absolute right-0 hover:bg-gray-300'>\n            \n                <Hamburger id='navButton' size={20} toggled={open} toggle={() => {openMenu()}} className='justify-end' style={{'display': 'none'}}>X</Hamburger>\n\n            </div>\n            <div className='bg-white bgf-[url(\"/src/slugp.png\")] ml-20 mr-5 pixel-border border button-container ' style={{'visibility': open ? 'visible' : 'hidden'}}>\n                <ul className='justify-center  ' style={{'display': menuOpen, 'visibility': 'visible'}}>\n                        \n                        {myMenu.map(item => {\n                        return <MenuItem key={item} text={item}/>\n                        })}\n                </ul>\n            </div>\n            \n            \n          </div>\n          \n          \n        </div>    \n      );\n}\n\nexport default NavBar;",{"ruleId":"204","severity":1,"message":"205","line":1,"column":8,"nodeType":"206","messageId":"207","endLine":1,"endColumn":12},{"ruleId":"204","severity":1,"message":"208","line":16,"column":12,"nodeType":"206","messageId":"207","endLine":16,"endColumn":21},{"ruleId":"204","severity":1,"message":"209","line":16,"column":23,"nodeType":"206","messageId":"207","endLine":16,"endColumn":35},{"ruleId":"204","severity":1,"message":"210","line":20,"column":12,"nodeType":"206","messageId":"207","endLine":20,"endColumn":19},{"ruleId":"204","severity":1,"message":"211","line":20,"column":21,"nodeType":"206","messageId":"207","endLine":20,"endColumn":31},{"ruleId":"204","severity":1,"message":"212","line":23,"column":12,"nodeType":"206","messageId":"207","endLine":23,"endColumn":18},{"ruleId":"204","severity":1,"message":"213","line":118,"column":14,"nodeType":"206","messageId":"207","endLine":118,"endColumn":21},{"ruleId":"214","severity":1,"message":"215","line":126,"column":16,"nodeType":"206","messageId":"216","endLine":126,"endColumn":17},{"ruleId":"217","severity":1,"message":"218","line":146,"column":8,"nodeType":"219","endLine":146,"endColumn":51,"suggestions":"220"},{"ruleId":"204","severity":1,"message":"221","line":3,"column":8,"nodeType":"206","messageId":"207","endLine":3,"endColumn":15},{"ruleId":"204","severity":1,"message":"222","line":4,"column":8,"nodeType":"206","messageId":"207","endLine":4,"endColumn":19},{"ruleId":"204","severity":1,"message":"223","line":9,"column":12,"nodeType":"206","messageId":"207","endLine":9,"endColumn":19},{"ruleId":"204","severity":1,"message":"224","line":15,"column":12,"nodeType":"206","messageId":"207","endLine":15,"endColumn":26},{"ruleId":"204","severity":1,"message":"225","line":15,"column":28,"nodeType":"206","messageId":"207","endLine":15,"endColumn":45},{"ruleId":"204","severity":1,"message":"226","line":20,"column":12,"nodeType":"206","messageId":"207","endLine":20,"endColumn":22},{"ruleId":"204","severity":1,"message":"208","line":23,"column":12,"nodeType":"206","messageId":"207","endLine":23,"endColumn":21},{"ruleId":"204","severity":1,"message":"227","line":26,"column":12,"nodeType":"206","messageId":"207","endLine":26,"endColumn":26},{"ruleId":"204","severity":1,"message":"228","line":26,"column":28,"nodeType":"206","messageId":"207","endLine":26,"endColumn":45},{"ruleId":"204","severity":1,"message":"229","line":58,"column":29,"nodeType":"206","messageId":"207","endLine":58,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":62,"column":27,"nodeType":"232","messageId":"233","endLine":62,"endColumn":29},{"ruleId":"230","severity":1,"message":"231","line":78,"column":24,"nodeType":"232","messageId":"233","endLine":78,"endColumn":26},{"ruleId":"230","severity":1,"message":"234","line":90,"column":24,"nodeType":"232","messageId":"233","endLine":90,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":94,"column":34,"nodeType":"232","messageId":"233","endLine":94,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":112,"column":24,"nodeType":"232","messageId":"233","endLine":112,"endColumn":26},{"ruleId":"204","severity":1,"message":"235","line":113,"column":17,"nodeType":"206","messageId":"207","endLine":113,"endColumn":32},{"ruleId":"204","severity":1,"message":"236","line":145,"column":21,"nodeType":"206","messageId":"207","endLine":145,"endColumn":35},{"ruleId":"204","severity":1,"message":"237","line":155,"column":11,"nodeType":"206","messageId":"207","endLine":155,"endColumn":25},{"ruleId":"204","severity":1,"message":"235","line":157,"column":13,"nodeType":"206","messageId":"207","endLine":157,"endColumn":28},{"ruleId":"238","severity":1,"message":"239","line":168,"column":13,"nodeType":"206","messageId":"240","endLine":168,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":191,"column":18,"nodeType":"232","messageId":"233","endLine":191,"endColumn":20},{"ruleId":"204","severity":1,"message":"241","line":218,"column":13,"nodeType":"206","messageId":"207","endLine":218,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":227,"column":24,"nodeType":"232","messageId":"233","endLine":227,"endColumn":26},{"ruleId":"217","severity":1,"message":"242","line":245,"column":7,"nodeType":"219","endLine":245,"endColumn":58,"suggestions":"243"},{"ruleId":"230","severity":1,"message":"231","line":305,"column":51,"nodeType":"232","messageId":"233","endLine":305,"endColumn":53},{"ruleId":"204","severity":1,"message":"235","line":13,"column":13,"nodeType":"206","messageId":"207","endLine":13,"endColumn":28},{"ruleId":"204","severity":1,"message":"244","line":25,"column":13,"nodeType":"206","messageId":"207","endLine":25,"endColumn":20},{"ruleId":"217","severity":1,"message":"245","line":69,"column":7,"nodeType":"219","endLine":69,"endColumn":33,"suggestions":"246"},{"ruleId":"204","severity":1,"message":"247","line":1,"column":17,"nodeType":"206","messageId":"207","endLine":1,"endColumn":25},{"ruleId":"204","severity":1,"message":"205","line":1,"column":8,"nodeType":"206","messageId":"207","endLine":1,"endColumn":12},{"ruleId":"204","severity":1,"message":"248","line":5,"column":16,"nodeType":"206","messageId":"207","endLine":5,"endColumn":20},{"ruleId":"204","severity":1,"message":"249","line":5,"column":45,"nodeType":"206","messageId":"207","endLine":5,"endColumn":51},{"ruleId":"204","severity":1,"message":"250","line":5,"column":53,"nodeType":"206","messageId":"207","endLine":5,"endColumn":59},{"ruleId":"204","severity":1,"message":"251","line":6,"column":10,"nodeType":"206","messageId":"207","endLine":6,"endColumn":30},{"ruleId":"204","severity":1,"message":"208","line":20,"column":12,"nodeType":"206","messageId":"207","endLine":20,"endColumn":21},{"ruleId":"204","severity":1,"message":"209","line":20,"column":23,"nodeType":"206","messageId":"207","endLine":20,"endColumn":35},{"ruleId":"204","severity":1,"message":"210","line":24,"column":12,"nodeType":"206","messageId":"207","endLine":24,"endColumn":19},{"ruleId":"204","severity":1,"message":"211","line":24,"column":21,"nodeType":"206","messageId":"207","endLine":24,"endColumn":31},{"ruleId":"204","severity":1,"message":"212","line":27,"column":12,"nodeType":"206","messageId":"207","endLine":27,"endColumn":18},{"ruleId":"204","severity":1,"message":"252","line":31,"column":12,"nodeType":"206","messageId":"207","endLine":31,"endColumn":25},{"ruleId":"204","severity":1,"message":"253","line":31,"column":27,"nodeType":"206","messageId":"207","endLine":31,"endColumn":43},{"ruleId":"230","severity":1,"message":"234","line":50,"column":32,"nodeType":"232","messageId":"233","endLine":50,"endColumn":34},{"ruleId":"204","severity":1,"message":"213","line":138,"column":14,"nodeType":"206","messageId":"207","endLine":138,"endColumn":21},{"ruleId":"214","severity":1,"message":"215","line":146,"column":16,"nodeType":"206","messageId":"216","endLine":146,"endColumn":17},{"ruleId":"217","severity":1,"message":"254","line":173,"column":8,"nodeType":"219","endLine":173,"endColumn":60,"suggestions":"255"},{"ruleId":"256","severity":1,"message":"257","line":205,"column":21,"nodeType":"258","endLine":205,"endColumn":104},{"ruleId":"204","severity":1,"message":"235","line":13,"column":13,"nodeType":"206","messageId":"207","endLine":13,"endColumn":28},{"ruleId":"204","severity":1,"message":"244","line":25,"column":13,"nodeType":"206","messageId":"207","endLine":25,"endColumn":20},{"ruleId":"230","severity":1,"message":"231","line":37,"column":23,"nodeType":"232","messageId":"233","endLine":37,"endColumn":25},{"ruleId":"217","severity":1,"message":"245","line":73,"column":7,"nodeType":"219","endLine":73,"endColumn":33,"suggestions":"259"},{"ruleId":"204","severity":1,"message":"247","line":1,"column":17,"nodeType":"206","messageId":"207","endLine":1,"endColumn":25},{"ruleId":"204","severity":1,"message":"221","line":3,"column":8,"nodeType":"206","messageId":"207","endLine":3,"endColumn":15},{"ruleId":"204","severity":1,"message":"222","line":4,"column":8,"nodeType":"206","messageId":"207","endLine":4,"endColumn":19},{"ruleId":"204","severity":1,"message":"223","line":9,"column":12,"nodeType":"206","messageId":"207","endLine":9,"endColumn":19},{"ruleId":"204","severity":1,"message":"224","line":15,"column":12,"nodeType":"206","messageId":"207","endLine":15,"endColumn":26},{"ruleId":"204","severity":1,"message":"225","line":15,"column":28,"nodeType":"206","messageId":"207","endLine":15,"endColumn":45},{"ruleId":"204","severity":1,"message":"226","line":20,"column":12,"nodeType":"206","messageId":"207","endLine":20,"endColumn":22},{"ruleId":"204","severity":1,"message":"208","line":23,"column":12,"nodeType":"206","messageId":"207","endLine":23,"endColumn":21},{"ruleId":"204","severity":1,"message":"227","line":26,"column":12,"nodeType":"206","messageId":"207","endLine":26,"endColumn":26},{"ruleId":"204","severity":1,"message":"228","line":26,"column":28,"nodeType":"206","messageId":"207","endLine":26,"endColumn":45},{"ruleId":"230","severity":1,"message":"234","line":42,"column":65,"nodeType":"232","messageId":"233","endLine":42,"endColumn":67},{"ruleId":"204","severity":1,"message":"229","line":82,"column":37,"nodeType":"206","messageId":"207","endLine":82,"endColumn":44},{"ruleId":"230","severity":1,"message":"231","line":86,"column":35,"nodeType":"232","messageId":"233","endLine":86,"endColumn":37},{"ruleId":"230","severity":1,"message":"231","line":113,"column":24,"nodeType":"232","messageId":"233","endLine":113,"endColumn":26},{"ruleId":"230","severity":1,"message":"234","line":128,"column":24,"nodeType":"232","messageId":"233","endLine":128,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":132,"column":34,"nodeType":"232","messageId":"233","endLine":132,"endColumn":36},{"ruleId":"230","severity":1,"message":"231","line":150,"column":28,"nodeType":"232","messageId":"233","endLine":150,"endColumn":30},{"ruleId":"204","severity":1,"message":"235","line":151,"column":21,"nodeType":"206","messageId":"207","endLine":151,"endColumn":36},{"ruleId":"204","severity":1,"message":"236","line":187,"column":29,"nodeType":"206","messageId":"207","endLine":187,"endColumn":43},{"ruleId":"230","severity":1,"message":"231","line":248,"column":22,"nodeType":"232","messageId":"233","endLine":248,"endColumn":24},{"ruleId":"204","severity":1,"message":"241","line":281,"column":13,"nodeType":"206","messageId":"207","endLine":281,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":290,"column":24,"nodeType":"232","messageId":"233","endLine":290,"endColumn":26},{"ruleId":"230","severity":1,"message":"231","line":307,"column":25,"nodeType":"232","messageId":"233","endLine":307,"endColumn":27},{"ruleId":"217","severity":1,"message":"260","line":322,"column":7,"nodeType":"219","endLine":322,"endColumn":67,"suggestions":"261"},{"ruleId":"230","severity":1,"message":"231","line":382,"column":51,"nodeType":"232","messageId":"233","endLine":382,"endColumn":53},{"ruleId":"204","severity":1,"message":"247","line":1,"column":16,"nodeType":"206","messageId":"207","endLine":1,"endColumn":24},{"ruleId":"204","severity":1,"message":"262","line":1,"column":26,"nodeType":"206","messageId":"207","endLine":1,"endColumn":35},{"ruleId":"204","severity":1,"message":"263","line":2,"column":9,"nodeType":"206","messageId":"207","endLine":2,"endColumn":15},{"ruleId":"204","severity":1,"message":"264","line":8,"column":9,"nodeType":"206","messageId":"207","endLine":8,"endColumn":14},{"ruleId":"256","severity":1,"message":"257","line":27,"column":21,"nodeType":"258","endLine":27,"endColumn":104},{"ruleId":"204","severity":1,"message":"263","line":2,"column":9,"nodeType":"206","messageId":"207","endLine":2,"endColumn":15},{"ruleId":"204","severity":1,"message":"265","line":28,"column":12,"nodeType":"206","messageId":"207","endLine":28,"endColumn":25},{"ruleId":"204","severity":1,"message":"266","line":28,"column":27,"nodeType":"206","messageId":"207","endLine":28,"endColumn":43},{"ruleId":"230","severity":1,"message":"231","line":34,"column":42,"nodeType":"232","messageId":"233","endLine":34,"endColumn":44},{"ruleId":"204","severity":1,"message":"263","line":2,"column":9,"nodeType":"206","messageId":"207","endLine":2,"endColumn":15},{"ruleId":"204","severity":1,"message":"265","line":29,"column":12,"nodeType":"206","messageId":"207","endLine":29,"endColumn":25},{"ruleId":"204","severity":1,"message":"266","line":29,"column":27,"nodeType":"206","messageId":"207","endLine":29,"endColumn":43},{"ruleId":"230","severity":1,"message":"231","line":35,"column":42,"nodeType":"232","messageId":"233","endLine":35,"endColumn":44},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'tokenName' is assigned a value but never used.","'setTokenName' is assigned a value but never used.","'balance' is assigned a value but never used.","'setBalance' is assigned a value but never used.","'signer' is assigned a value but never used.","'toFixed' is defined but never used.","no-redeclare","'e' is already defined.","redeclared","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkIfWalletIsConnected'. Either include it or remove the dependency array. Outer scope values like 'window.ethereum' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["267"],"'Spinner' is defined but never used.","'ProgressBar' is defined but never used.","'txnHash' is assigned a value but never used.","'unstakeBalance' is assigned a value but never used.","'setUnstakeBalance' is assigned a value but never used.","'txnPending' is assigned a value but never used.","'maxStakeAmount' is assigned a value but never used.","'setMaxStakeAmount' is assigned a value but never used.","'stakeId' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","'contractAddress' is assigned a value but never used.","'approveSelftxn' is assigned a value but never used.","'unstakeHandler' is assigned a value but never used.","no-const-assign","'balance' is constant.","const","'tokenDecimals' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'getStakeBalance', 'stakeStateHandler', 'updateBalance', and 'updateTokenName'. Either include them or remove the dependency array.",["268"],"'headers' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getEvents'. Either include it or remove the dependency array.",["269"],"'useState' is defined but never used.","'Link' is defined but never used.","'Switch' is defined but never used.","'Router' is defined but never used.","'createBrowserHistory' is defined but never used.","'ethersUpdated' is assigned a value but never used.","'setEthersUpdated' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'checkIfWalletIsConnected' and 'getNetwork'. Either include them or remove the dependency array. Outer scope values like 'window.ethereum' aren't valid dependencies because mutating them doesn't re-render the component.",["270"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["271"],"React Hook useEffect has missing dependencies: 'getStakeBalance', 'setErrorMessage', 'setOpenModal', 'stakeStateHandler', 'updateBalance', and 'updateTokenName'. Either include them or remove the dependency array.",["272"],"'useEffect' is defined but never used.","'ethers' is defined but never used.","'props' is assigned a value but never used.","'menuTransform' is assigned a value but never used.","'setMenuTransform' is assigned a value but never used.",{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"277","fix":"281"},{"desc":"282","fix":"283"},"Update the dependencies array to be: [checkIfWalletIsConnected, contract, defaultAccount]",{"range":"284","text":"285"},"Update the dependencies array to be: [contract, defaultAccount, getStakeBalance, stakeState, stakeStateHandler, txnComplete, updateBalance, updateTokenName]",{"range":"286","text":"287"},"Update the dependencies array to be: [contract, defaultAccount, getEvents]",{"range":"288","text":"289"},"Update the dependencies array to be: [contract, defaultAccount, network, getNetwork, checkIfWalletIsConnected]",{"range":"290","text":"291"},{"range":"292","text":"289"},"Update the dependencies array to be: [contract, defaultAccount, stakeState, txnComplete, network, updateBalance, updateTokenName, stakeStateHandler, getStakeBalance, setOpenModal, setErrorMessage]",{"range":"293","text":"294"},[4457,4500],"[checkIfWalletIsConnected, contract, defaultAccount]",[8102,8153],"[contract, defaultAccount, getStakeBalance, stakeState, stakeStateHandler, txnComplete, updateBalance, updateTokenName]",[2366,2392],"[contract, defaultAccount, getEvents]",[5122,5174],"[contract, defaultAccount, network, getNetwork, checkIfWalletIsConnected]",[2608,2634],[10605,10665],"[contract, defaultAccount, stakeState, txnComplete, network, updateBalance, updateTokenName, stakeStateHandler, getStakeBalance, setOpenModal, setErrorMessage]"]